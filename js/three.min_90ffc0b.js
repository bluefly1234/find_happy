"use strict";var THREE={REVISION:"75"};"function"==typeof define&&define.amd?define("three",THREE):"undefined"!=typeof exports&&"undefined"!=typeof module&&(module.exports=THREE),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Math.sign&&(Math.sign=function(a){return 0>a?-1:a>0?1:+a}),void 0===Function.prototype.name&&void 0!==Object.defineProperty&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1]}}),void 0===Object.assign&&Object.defineProperty(Object,"assign",{writable:!0,configurable:!0,value:function(a){if(void 0===a||null===a)throw new TypeError("Cannot convert first argument to object");for(var h=Object(a),c=1,d=arguments.length;c!==d;++c){var e=arguments[c];if(void 0!==e&&null!==e)for(var e=Object(e),f=Object.keys(e),E=0,g=f.length;E!==g;++E){var v=f[E],l=Object.getOwnPropertyDescriptor(e,v);void 0!==l&&l.enumerable&&(h[v]=e[v])}}return h}}),THREE.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2},THREE.CullFaceNone=0,THREE.CullFaceBack=1,THREE.CullFaceFront=2,THREE.CullFaceFrontBack=3,THREE.FrontFaceDirectionCW=0,THREE.FrontFaceDirectionCCW=1,THREE.BasicShadowMap=0,THREE.PCFShadowMap=1,THREE.PCFSoftShadowMap=2,THREE.FrontSide=0,THREE.BackSide=1,THREE.DoubleSide=2,THREE.FlatShading=1,THREE.SmoothShading=2,THREE.NoColors=0,THREE.FaceColors=1,THREE.VertexColors=2,THREE.NoBlending=0,THREE.NormalBlending=1,THREE.AdditiveBlending=2,THREE.SubtractiveBlending=3,THREE.MultiplyBlending=4,THREE.CustomBlending=5,THREE.AddEquation=100,THREE.SubtractEquation=101,THREE.ReverseSubtractEquation=102,THREE.MinEquation=103,THREE.MaxEquation=104,THREE.ZeroFactor=200,THREE.OneFactor=201,THREE.SrcColorFactor=202,THREE.OneMinusSrcColorFactor=203,THREE.SrcAlphaFactor=204,THREE.OneMinusSrcAlphaFactor=205,THREE.DstAlphaFactor=206,THREE.OneMinusDstAlphaFactor=207,THREE.DstColorFactor=208,THREE.OneMinusDstColorFactor=209,THREE.SrcAlphaSaturateFactor=210,THREE.NeverDepth=0,THREE.AlwaysDepth=1,THREE.LessDepth=2,THREE.LessEqualDepth=3,THREE.EqualDepth=4,THREE.GreaterEqualDepth=5,THREE.GreaterDepth=6,THREE.NotEqualDepth=7,THREE.MultiplyOperation=0,THREE.MixOperation=1,THREE.AddOperation=2,THREE.NoToneMapping=0,THREE.LinearToneMapping=1,THREE.ReinhardToneMapping=2,THREE.Uncharted2ToneMapping=3,THREE.CineonToneMapping=4,THREE.UVMapping=300,THREE.CubeReflectionMapping=301,THREE.CubeRefractionMapping=302,THREE.EquirectangularReflectionMapping=303,THREE.EquirectangularRefractionMapping=304,THREE.SphericalReflectionMapping=305,THREE.CubeUVReflectionMapping=306,THREE.CubeUVRefractionMapping=307,THREE.RepeatWrapping=1e3,THREE.ClampToEdgeWrapping=1001,THREE.MirroredRepeatWrapping=1002,THREE.NearestFilter=1003,THREE.NearestMipMapNearestFilter=1004,THREE.NearestMipMapLinearFilter=1005,THREE.LinearFilter=1006,THREE.LinearMipMapNearestFilter=1007,THREE.LinearMipMapLinearFilter=1008,THREE.UnsignedByteType=1009,THREE.ByteType=1010,THREE.ShortType=1011,THREE.UnsignedShortType=1012,THREE.IntType=1013,THREE.UnsignedIntType=1014,THREE.FloatType=1015,THREE.HalfFloatType=1025,THREE.UnsignedShort4444Type=1016,THREE.UnsignedShort5551Type=1017,THREE.UnsignedShort565Type=1018,THREE.AlphaFormat=1019,THREE.RGBFormat=1020,THREE.RGBAFormat=1021,THREE.LuminanceFormat=1022,THREE.LuminanceAlphaFormat=1023,THREE.RGBEFormat=THREE.RGBAFormat,THREE.RGB_S3TC_DXT1_Format=2001,THREE.RGBA_S3TC_DXT1_Format=2002,THREE.RGBA_S3TC_DXT3_Format=2003,THREE.RGBA_S3TC_DXT5_Format=2004,THREE.RGB_PVRTC_4BPPV1_Format=2100,THREE.RGB_PVRTC_2BPPV1_Format=2101,THREE.RGBA_PVRTC_4BPPV1_Format=2102,THREE.RGBA_PVRTC_2BPPV1_Format=2103,THREE.RGB_ETC1_Format=2151,THREE.LoopOnce=2200,THREE.LoopRepeat=2201,THREE.LoopPingPong=2202,THREE.InterpolateDiscrete=2300,THREE.InterpolateLinear=2301,THREE.InterpolateSmooth=2302,THREE.ZeroCurvatureEnding=2400,THREE.ZeroSlopeEnding=2401,THREE.WrapAroundEnding=2402,THREE.TrianglesDrawMode=0,THREE.TriangleStripDrawMode=1,THREE.TriangleFanDrawMode=2,THREE.LinearEncoding=3e3,THREE.sRGBEncoding=3001,THREE.GammaEncoding=3007,THREE.RGBEEncoding=3002,THREE.LogLuvEncoding=3003,THREE.RGBM7Encoding=3004,THREE.RGBM16Encoding=3005,THREE.RGBDEncoding=3006,THREE.Color=function(a){return 3===arguments.length?this.fromArray(arguments):this.set(a)},THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){return a instanceof THREE.Color?this.copy(a):"number"==typeof a?this.setHex(a):"string"==typeof a&&this.setStyle(a),this},setScalar:function(a){this.b=this.g=this.r=a},setHex:function(a){return a=Math.floor(a),this.r=(a>>16&255)/255,this.g=(a>>8&255)/255,this.b=(255&a)/255,this},setRGB:function(a,h,c){return this.r=a,this.g=h,this.b=c,this},setHSL:function(){function a(a,h,d){return 0>d&&(d+=1),d>1&&(d-=1),1/6>d?a+6*(h-a)*d:.5>d?h:2/3>d?a+6*(h-a)*(2/3-d):a}return function(h,c,d){return h=THREE.Math.euclideanModulo(h,1),c=THREE.Math.clamp(c,0,1),d=THREE.Math.clamp(d,0,1),0===c?this.r=this.g=this.b=d:(c=.5>=d?d*(1+c):d+c-d*c,d=2*d-c,this.r=a(d,c,h+1/3),this.g=a(d,c,h),this.b=a(d,c,h-1/3)),this}}(),setStyle:function(a){function h(a){void 0!==a&&1>parseFloat(a)&&void 0}var c;if(c=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)){var d=c[2];switch(c[1]){case"rgb":case"rgba":if(c=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(255,parseInt(c[1],10))/255,this.g=Math.min(255,parseInt(c[2],10))/255,this.b=Math.min(255,parseInt(c[3],10))/255,h(c[5]),this;if(c=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(100,parseInt(c[1],10))/100,this.g=Math.min(100,parseInt(c[2],10))/100,this.b=Math.min(100,parseInt(c[3],10))/100,h(c[5]),this;break;case"hsl":case"hsla":if(c=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)){var d=parseFloat(c[1])/360,e=parseInt(c[2],10)/100,f=parseInt(c[3],10)/100;return h(c[5]),this.setHSL(d,e,f)}}}else if(c=/^\#([A-Fa-f0-9]+)$/.exec(a)){if(c=c[1],d=c.length,3===d)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===d)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}return a&&0<a.length&&(c=THREE.ColorKeywords[a],void 0!==c?this.setHex(c):void 0),this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(a){return this.r=a.r,this.g=a.g,this.b=a.b,this},copyGammaToLinear:function(a,h){return void 0===h&&(h=2),this.r=Math.pow(a.r,h),this.g=Math.pow(a.g,h),this.b=Math.pow(a.b,h),this},copyLinearToGamma:function(a,h){void 0===h&&(h=2);var c=h>0?1/h:1;return this.r=Math.pow(a.r,c),this.g=Math.pow(a.g,c),this.b=Math.pow(a.b,c),this},convertGammaToLinear:function(){var a=this.r,h=this.g,c=this.b;return this.r=a*a,this.g=h*h,this.b=c*c,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var h=this.r,c=this.g,d=this.b,e=Math.max(h,c,d),f=Math.min(h,c,d),E,g=(f+e)/2;if(f===e)f=E=0;else{var v=e-f,f=.5>=g?v/(e+f):v/(2-e-f);switch(e){case h:E=(c-d)/v+(d>c?6:0);break;case c:E=(d-h)/v+2;break;case d:E=(h-c)/v+4}E/=6}return a.h=E,a.s=f,a.l=g,a},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,h,c){var d=this.getHSL();return d.h+=a,d.s+=h,d.l+=c,this.setHSL(d.h,d.s,d.l),this},add:function(a){return this.r+=a.r,this.g+=a.g,this.b+=a.b,this},addColors:function(a,h){return this.r=a.r+h.r,this.g=a.g+h.g,this.b=a.b+h.b,this},addScalar:function(a){return this.r+=a,this.g+=a,this.b+=a,this},multiply:function(a){return this.r*=a.r,this.g*=a.g,this.b*=a.b,this},multiplyScalar:function(a){return this.r*=a,this.g*=a,this.b*=a,this},lerp:function(a,h){return this.r+=(a.r-this.r)*h,this.g+=(a.g-this.g)*h,this.b+=(a.b-this.b)*h,this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a,h){return void 0===h&&(h=0),this.r=a[h],this.g=a[h+1],this.b=a[h+2],this},toArray:function(a,h){return void 0===a&&(a=[]),void 0===h&&(h=0),a[h]=this.r,a[h+1]=this.g,a[h+2]=this.b,a}},THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},THREE.Quaternion=function(a,h,c,d){this._x=a||0,this._y=h||0,this._z=c||0,this._w=void 0!==d?d:1},THREE.Quaternion.prototype={constructor:THREE.Quaternion,get x(){return this._x},set x(a){this._x=a,this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a,this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a,this.onChangeCallback()},get w(){return this._w},set w(a){this._w=a,this.onChangeCallback()},set:function(a,h,c,d){return this._x=a,this._y=h,this._z=c,this._w=d,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(a){return this._x=a.x,this._y=a.y,this._z=a.z,this._w=a.w,this.onChangeCallback(),this},setFromEuler:function(a,h){if(!1==a instanceof THREE.Euler)throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),E=Math.sin(a._y/2),g=Math.sin(a._z/2),v=a.order;return"XYZ"===v?(this._x=f*d*e+c*E*g,this._y=c*E*e-f*d*g,this._z=c*d*g+f*E*e,this._w=c*d*e-f*E*g):"YXZ"===v?(this._x=f*d*e+c*E*g,this._y=c*E*e-f*d*g,this._z=c*d*g-f*E*e,this._w=c*d*e+f*E*g):"ZXY"===v?(this._x=f*d*e-c*E*g,this._y=c*E*e+f*d*g,this._z=c*d*g+f*E*e,this._w=c*d*e-f*E*g):"ZYX"===v?(this._x=f*d*e-c*E*g,this._y=c*E*e+f*d*g,this._z=c*d*g-f*E*e,this._w=c*d*e+f*E*g):"YZX"===v?(this._x=f*d*e+c*E*g,this._y=c*E*e+f*d*g,this._z=c*d*g-f*E*e,this._w=c*d*e-f*E*g):"XZY"===v&&(this._x=f*d*e-c*E*g,this._y=c*E*e-f*d*g,this._z=c*d*g+f*E*e,this._w=c*d*e+f*E*g),!1!==h&&this.onChangeCallback(),this},setFromAxisAngle:function(a,h){var c=h/2,d=Math.sin(c);return this._x=a.x*d,this._y=a.y*d,this._z=a.z*d,this._w=Math.cos(c),this.onChangeCallback(),this},setFromRotationMatrix:function(a){var h=a.elements,c=h[0];a=h[4];var d=h[8],e=h[1],f=h[5],E=h[9],g=h[2],v=h[6],h=h[10],l=c+f+h;return l>0?(c=.5/Math.sqrt(l+1),this._w=.25/c,this._x=(v-E)*c,this._y=(d-g)*c,this._z=(e-a)*c):c>f&&c>h?(c=2*Math.sqrt(1+c-f-h),this._w=(v-E)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+g)/c):f>h?(c=2*Math.sqrt(1+f-c-h),this._w=(d-g)/c,this._x=(a+e)/c,this._y=.25*c,this._z=(E+v)/c):(c=2*Math.sqrt(1+h-c-f),this._w=(e-a)/c,this._x=(d+g)/c,this._y=(E+v)/c,this._z=.25*c),this.onChangeCallback(),this},setFromUnitVectors:function(){var a,h;return function(c,d){return void 0===a&&(a=new THREE.Vector3),h=c.dot(d)+1,1e-6>h?(h=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d),this._x=a.x,this._y=a.y,this._z=a.z,this._w=h,this.normalize(),this}}(),inverse:function(){return this.conjugate().normalize(),this},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();return 0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a),this.onChangeCallback(),this},multiply:function(a,h){return void 0!==h?this.multiplyQuaternions(a,h):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,h){var c=a._x,d=a._y,e=a._z,f=a._w,E=h._x,g=h._y,v=h._z,l=h._w;return this._x=c*l+f*E+d*v-e*g,this._y=d*l+f*g+e*E-c*v,this._z=e*l+f*v+c*g-d*E,this._w=f*l-c*E-d*g-e*v,this.onChangeCallback(),this},slerp:function(a,h){if(0===h)return this;if(1===h)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,E=f*a._w+c*a._x+d*a._y+e*a._z;if(0>E?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,E=-E):this.copy(a),E>=1)return this._w=f,this._x=c,this._y=d,this._z=e,this;var g=Math.sqrt(1-E*E);if(.001>Math.abs(g))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;var v=Math.atan2(g,E),E=Math.sin((1-h)*v)/g,g=Math.sin(h*v)/g;return this._w=f*E+this._w*g,this._x=c*E+this._x*g,this._y=d*E+this._y*g,this._z=e*E+this._z*g,this.onChangeCallback(),this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,h){return void 0===h&&(h=0),this._x=a[h],this._y=a[h+1],this._z=a[h+2],this._w=a[h+3],this.onChangeCallback(),this},toArray:function(a,h){return void 0===a&&(a=[]),void 0===h&&(h=0),a[h]=this._x,a[h+1]=this._y,a[h+2]=this._z,a[h+3]=this._w,a},onChange:function(a){return this.onChangeCallback=a,this},onChangeCallback:function(){}},Object.assign(THREE.Quaternion,{slerp:function(a,h,c,d){return c.copy(a).slerp(h,d)},slerpFlat:function(a,h,c,d,e,f,E){var g=c[d+0],v=c[d+1],l=c[d+2];c=c[d+3],d=e[f+0];var p=e[f+1],n=e[f+2];if(e=e[f+3],c!==e||g!==d||v!==p||l!==n){f=1-E;var m=g*d+v*p+l*n+c*e,q=m>=0?1:-1,u=1-m*m;u>Number.EPSILON&&(u=Math.sqrt(u),m=Math.atan2(u,m*q),f=Math.sin(f*m)/u,E=Math.sin(E*m)/u),q*=E,g=g*f+d*q,v=v*f+p*q,l=l*f+n*q,c=c*f+e*q,f===1-E&&(E=1/Math.sqrt(g*g+v*v+l*l+c*c),g*=E,v*=E,l*=E,c*=E)}a[h]=g,a[h+1]=v,a[h+2]=l,a[h+3]=c}}),THREE.Vector2=function(a,h){this.x=a||0,this.y=h||0},THREE.Vector2.prototype={constructor:THREE.Vector2,get width(){return this.x},set width(a){this.x=a},get height(){return this.y},set height(a){this.y=a},set:function(a,h){return this.x=a,this.y=h,this},setScalar:function(a){return this.y=this.x=a,this},setX:function(a){return this.x=a,this},setY:function(a){return this.y=a,this},setComponent:function(a,h){switch(a){case 0:this.x=h;break;case 1:this.y=h;break;default:throw Error("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(a){return this.x=a.x,this.y=a.y,this},add:function(a,h){return void 0!==h?this.addVectors(a,h):(this.x+=a.x,this.y+=a.y,this)},addScalar:function(a){return this.x+=a,this.y+=a,this},addVectors:function(a,h){return this.x=a.x+h.x,this.y=a.y+h.y,this},addScaledVector:function(a,h){return this.x+=a.x*h,this.y+=a.y*h,this},sub:function(a,h){return void 0!==h?this.subVectors(a,h):(this.x-=a.x,this.y-=a.y,this)},subScalar:function(a){return this.x-=a,this.y-=a,this},subVectors:function(a,h){return this.x=a.x-h.x,this.y=a.y-h.y,this},multiply:function(a){return this.x*=a.x,this.y*=a.y,this},multiplyScalar:function(a){return isFinite(a)?(this.x*=a,this.y*=a):this.y=this.x=0,this},divide:function(a){return this.x/=a.x,this.y/=a.y,this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this},max:function(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this},clamp:function(a,h){return this.x=Math.max(a.x,Math.min(h.x,this.x)),this.y=Math.max(a.y,Math.min(h.y,this.y)),this},clampScalar:function(){var a,h;return function(c,d){return void 0===a&&(a=new THREE.Vector2,h=new THREE.Vector2),a.set(c,c),h.set(d,d),this.clamp(a,h)}}(),clampLength:function(a,h){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(h,c))/c),this},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x),this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var a=Math.atan2(this.y,this.x);return 0>a&&(a+=2*Math.PI),a},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var h=this.x-a.x;return a=this.y-a.y,h*h+a*a},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,h){return this.x+=(a.x-this.x)*h,this.y+=(a.y-this.y)*h,this},lerpVectors:function(a,h,c){return this.subVectors(h,a).multiplyScalar(c).add(a),this},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,h){return void 0===h&&(h=0),this.x=a[h],this.y=a[h+1],this},toArray:function(a,h){return void 0===a&&(a=[]),void 0===h&&(h=0),a[h]=this.x,a[h+1]=this.y,a},fromAttribute:function(a,h,c){return void 0===c&&(c=0),h=h*a.itemSize+c,this.x=a.array[h],this.y=a.array[h+1],this},rotateAround:function(a,h){var c=Math.cos(h),d=Math.sin(h),e=this.x-a.x,f=this.y-a.y;return this.x=e*c-f*d+a.x,this.y=e*d+f*c+a.y,this}},THREE.Vector3=function(a,h,c){this.x=a||0,this.y=h||0,this.z=c||0},THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,h,c){return this.x=a,this.y=h,this.z=c,this},setScalar:function(a){return this.z=this.y=this.x=a,this},setX:function(a){return this.x=a,this},setY:function(a){return this.y=a,this},setZ:function(a){return this.z=a,this},setComponent:function(a,h){switch(a){case 0:this.x=h;break;case 1:this.y=h;break;case 2:this.z=h;break;default:throw Error("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+a)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(a){return this.x=a.x,this.y=a.y,this.z=a.z,this},add:function(a,h){return void 0!==h?this.addVectors(a,h):(this.x+=a.x,this.y+=a.y,this.z+=a.z,this)},addScalar:function(a){return this.x+=a,this.y+=a,this.z+=a,this},addVectors:function(a,h){return this.x=a.x+h.x,this.y=a.y+h.y,this.z=a.z+h.z,this},addScaledVector:function(a,h){return this.x+=a.x*h,this.y+=a.y*h,this.z+=a.z*h,this},sub:function(a,h){return void 0!==h?this.subVectors(a,h):(this.x-=a.x,this.y-=a.y,this.z-=a.z,this)},subScalar:function(a){return this.x-=a,this.y-=a,this.z-=a,this},subVectors:function(a,h){return this.x=a.x-h.x,this.y=a.y-h.y,this.z=a.z-h.z,this},multiply:function(a,h){return void 0!==h?this.multiplyVectors(a,h):(this.x*=a.x,this.y*=a.y,this.z*=a.z,this)},multiplyScalar:function(a){return isFinite(a)?(this.x*=a,this.y*=a,this.z*=a):this.z=this.y=this.x=0,this},multiplyVectors:function(a,h){return this.x=a.x*h.x,this.y=a.y*h.y,this.z=a.z*h.z,this},applyEuler:function(){var a;return function(h){return!1==h instanceof THREE.Euler&&void 0,void 0===a&&(a=new THREE.Quaternion),this.applyQuaternion(a.setFromEuler(h)),this}}(),applyAxisAngle:function(){var a;return function(h,c){return void 0===a&&(a=new THREE.Quaternion),this.applyQuaternion(a.setFromAxisAngle(h,c)),this}}(),applyMatrix3:function(a){var h=this.x,c=this.y,d=this.z;return a=a.elements,this.x=a[0]*h+a[3]*c+a[6]*d,this.y=a[1]*h+a[4]*c+a[7]*d,this.z=a[2]*h+a[5]*c+a[8]*d,this},applyMatrix4:function(a){var h=this.x,c=this.y,d=this.z;return a=a.elements,this.x=a[0]*h+a[4]*c+a[8]*d+a[12],this.y=a[1]*h+a[5]*c+a[9]*d+a[13],this.z=a[2]*h+a[6]*c+a[10]*d+a[14],this},applyProjection:function(a){var h=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*h+a[7]*c+a[11]*d+a[15]);return this.x=(a[0]*h+a[4]*c+a[8]*d+a[12])*e,this.y=(a[1]*h+a[5]*c+a[9]*d+a[13])*e,this.z=(a[2]*h+a[6]*c+a[10]*d+a[14])*e,this},applyQuaternion:function(a){var h=this.x,c=this.y,d=this.z,e=a.x,f=a.y,E=a.z;a=a.w;var g=a*h+f*d-E*c,v=a*c+E*h-e*d,l=a*d+e*c-f*h,h=-e*h-f*c-E*d;return this.x=g*a+h*-e+v*-E-l*-f,this.y=v*a+h*-f+l*-e-g*-E,this.z=l*a+h*-E+g*-f-v*-e,this},project:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.multiplyMatrices(h.projectionMatrix,a.getInverse(h.matrixWorld)),this.applyProjection(a)}}(),unproject:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.multiplyMatrices(h.matrixWorld,a.getInverse(h.projectionMatrix)),this.applyProjection(a)}}(),transformDirection:function(a){var h=this.x,c=this.y,d=this.z;return a=a.elements,this.x=a[0]*h+a[4]*c+a[8]*d,this.y=a[1]*h+a[5]*c+a[9]*d,this.z=a[2]*h+a[6]*c+a[10]*d,this.normalize(),this},divide:function(a){return this.x/=a.x,this.y/=a.y,this.z/=a.z,this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this.z=Math.min(this.z,a.z),this},max:function(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this.z=Math.max(this.z,a.z),this},clamp:function(a,h){return this.x=Math.max(a.x,Math.min(h.x,this.x)),this.y=Math.max(a.y,Math.min(h.y,this.y)),this.z=Math.max(a.z,Math.min(h.z,this.z)),this},clampScalar:function(){var a,h;return function(c,d){return void 0===a&&(a=new THREE.Vector3,h=new THREE.Vector3),a.set(c,c,c),h.set(d,d,d),this.clamp(a,h)}}(),clampLength:function(a,h){var c=this.length();return this.multiplyScalar(Math.max(a,Math.min(h,c))/c),this},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x),this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y),this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,h){return this.x+=(a.x-this.x)*h,this.y+=(a.y-this.y)*h,this.z+=(a.z-this.z)*h,this},lerpVectors:function(a,h,c){return this.subVectors(h,a).multiplyScalar(c).add(a),this},cross:function(a,h){if(void 0!==h)return this.crossVectors(a,h);var c=this.x,d=this.y,e=this.z;return this.x=d*a.z-e*a.y,this.y=e*a.x-c*a.z,this.z=c*a.y-d*a.x,this},crossVectors:function(a,h){var c=a.x,d=a.y,e=a.z,f=h.x,E=h.y,g=h.z;return this.x=d*g-e*E,this.y=e*f-c*g,this.z=c*E-d*f,this},projectOnVector:function(){var a,h;return function(c){return void 0===a&&(a=new THREE.Vector3),a.copy(c).normalize(),h=this.dot(a),this.copy(a).multiplyScalar(h)}}(),projectOnPlane:function(){var a;return function(h){return void 0===a&&(a=new THREE.Vector3),a.copy(this).projectOnVector(h),this.sub(a)}}(),reflect:function(){var a;return function(h){return void 0===a&&(a=new THREE.Vector3),this.sub(a.copy(h).multiplyScalar(2*this.dot(h)))}}(),angleTo:function(a){return a=this.dot(a)/Math.sqrt(this.lengthSq()*a.lengthSq()),Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var h=this.x-a.x,c=this.y-a.y;return a=this.z-a.z,h*h+c*c+a*a},setFromSpherical:function(a){var h=Math.sin(a.phi)*a.radius;return this.x=h*Math.sin(a.theta),this.y=Math.cos(a.phi)*a.radius,this.z=h*Math.cos(a.theta),this},setFromMatrixPosition:function(a){return this.setFromMatrixColumn(a,3)},setFromMatrixScale:function(a){var h=this.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length();return a=this.setFromMatrixColumn(a,2).length(),this.x=h,this.y=c,this.z=a,this},setFromMatrixColumn:function(a,h){return"number"==typeof a&&(h=a=h),this.fromArray(a.elements,4*h)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,h){return void 0===h&&(h=0),this.x=a[h],this.y=a[h+1],this.z=a[h+2],this},toArray:function(a,h){return void 0===a&&(a=[]),void 0===h&&(h=0),a[h]=this.x,a[h+1]=this.y,a[h+2]=this.z,a},fromAttribute:function(a,h,c){return void 0===c&&(c=0),h=h*a.itemSize+c,this.x=a.array[h],this.y=a.array[h+1],this.z=a.array[h+2],this}},THREE.Vector4=function(a,h,c,d){this.x=a||0,this.y=h||0,this.z=c||0,this.w=void 0!==d?d:1},THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,h,c,d){return this.x=a,this.y=h,this.z=c,this.w=d,this},setScalar:function(a){return this.w=this.z=this.y=this.x=a,this},setX:function(a){return this.x=a,this},setY:function(a){return this.y=a,this},setZ:function(a){return this.z=a,this},setW:function(a){return this.w=a,this},setComponent:function(a,h){switch(a){case 0:this.x=h;break;case 1:this.y=h;break;case 2:this.z=h;break;case 3:this.w=h;break;default:throw Error("index is out of range: "+a)}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(a){return this.x=a.x,this.y=a.y,this.z=a.z,this.w=void 0!==a.w?a.w:1,this},add:function(a,h){return void 0!==h?this.addVectors(a,h):(this.x+=a.x,this.y+=a.y,this.z+=a.z,this.w+=a.w,this)},addScalar:function(a){return this.x+=a,this.y+=a,this.z+=a,this.w+=a,this},addVectors:function(a,h){return this.x=a.x+h.x,this.y=a.y+h.y,this.z=a.z+h.z,this.w=a.w+h.w,this},addScaledVector:function(a,h){return this.x+=a.x*h,this.y+=a.y*h,this.z+=a.z*h,this.w+=a.w*h,this},sub:function(a,h){return void 0!==h?this.subVectors(a,h):(this.x-=a.x,this.y-=a.y,this.z-=a.z,this.w-=a.w,this)},subScalar:function(a){return this.x-=a,this.y-=a,this.z-=a,this.w-=a,this},subVectors:function(a,h){return this.x=a.x-h.x,this.y=a.y-h.y,this.z=a.z-h.z,this.w=a.w-h.w,this},multiplyScalar:function(a){return isFinite(a)?(this.x*=a,this.y*=a,this.z*=a,this.w*=a):this.w=this.z=this.y=this.x=0,this},applyMatrix4:function(a){var h=this.x,c=this.y,d=this.z,e=this.w;return a=a.elements,this.x=a[0]*h+a[4]*c+a[8]*d+a[12]*e,this.y=a[1]*h+a[5]*c+a[9]*d+a[13]*e,this.z=a[2]*h+a[6]*c+a[10]*d+a[14]*e,this.w=a[3]*h+a[7]*c+a[11]*d+a[15]*e,this},divideScalar:function(a){return this.multiplyScalar(1/a)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var h=Math.sqrt(1-a.w*a.w);return 1e-4>h?(this.x=1,this.z=this.y=0):(this.x=a.x/h,this.y=a.y/h,this.z=a.z/h),this},setAxisAngleFromRotationMatrix:function(a){var h,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],E=a[1],g=a[5],v=a[9];c=a[2],h=a[6];var l=a[10];return.01>Math.abs(d-E)&&.01>Math.abs(f-c)&&.01>Math.abs(v-h)?.1>Math.abs(d+E)&&.1>Math.abs(f+c)&&.1>Math.abs(v+h)&&.1>Math.abs(e+g+l-3)?(this.set(1,0,0,0),this):(a=Math.PI,e=(e+1)/2,g=(g+1)/2,l=(l+1)/2,d=(d+E)/4,f=(f+c)/4,v=(v+h)/4,e>g&&e>l?.01>e?(h=0,d=c=.707106781):(h=Math.sqrt(e),c=d/h,d=f/h):g>l?.01>g?(h=.707106781,c=0,d=.707106781):(c=Math.sqrt(g),h=d/c,d=v/c):.01>l?(c=h=.707106781,d=0):(d=Math.sqrt(l),h=f/d,c=v/d),this.set(h,c,d,a),this):(a=Math.sqrt((h-v)*(h-v)+(f-c)*(f-c)+(E-d)*(E-d)),.001>Math.abs(a)&&(a=1),this.x=(h-v)/a,this.y=(f-c)/a,this.z=(E-d)/a,this.w=Math.acos((e+g+l-1)/2),this)},min:function(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this.z=Math.min(this.z,a.z),this.w=Math.min(this.w,a.w),this},max:function(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this.z=Math.max(this.z,a.z),this.w=Math.max(this.w,a.w),this},clamp:function(a,h){return this.x=Math.max(a.x,Math.min(h.x,this.x)),this.y=Math.max(a.y,Math.min(h.y,this.y)),this.z=Math.max(a.z,Math.min(h.z,this.z)),this.w=Math.max(a.w,Math.min(h.w,this.w)),this},clampScalar:function(){var a,h;return function(c,d){return void 0===a&&(a=new THREE.Vector4,h=new THREE.Vector4),a.set(c,c,c,c),h.set(d,d,d,d),this.clamp(a,h)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x),this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y),this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z),this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){return this.multiplyScalar(a/this.length())},lerp:function(a,h){return this.x+=(a.x-this.x)*h,this.y+=(a.y-this.y)*h,this.z+=(a.z-this.z)*h,this.w+=(a.w-this.w)*h,this
},lerpVectors:function(a,h,c){return this.subVectors(h,a).multiplyScalar(c).add(a),this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a,h){return void 0===h&&(h=0),this.x=a[h],this.y=a[h+1],this.z=a[h+2],this.w=a[h+3],this},toArray:function(a,h){return void 0===a&&(a=[]),void 0===h&&(h=0),a[h]=this.x,a[h+1]=this.y,a[h+2]=this.z,a[h+3]=this.w,a},fromAttribute:function(a,h,c){return void 0===c&&(c=0),h=h*a.itemSize+c,this.x=a.array[h],this.y=a.array[h+1],this.z=a.array[h+2],this.w=a.array[h+3],this}},THREE.Euler=function(a,h,c,d){this._x=a||0,this._y=h||0,this._z=c||0,this._order=d||THREE.Euler.DefaultOrder},THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" "),THREE.Euler.DefaultOrder="XYZ",THREE.Euler.prototype={constructor:THREE.Euler,get x(){return this._x},set x(a){this._x=a,this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a,this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a,this.onChangeCallback()},get order(){return this._order},set order(a){this._order=a,this.onChangeCallback()},set:function(a,h,c,d){return this._x=a,this._y=h,this._z=c,this._order=d||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(a){return this._x=a._x,this._y=a._y,this._z=a._z,this._order=a._order,this.onChangeCallback(),this},setFromRotationMatrix:function(a,h,c){var d=THREE.Math.clamp,e=a.elements;a=e[0];var f=e[4],E=e[8],g=e[1],v=e[5],l=e[9],p=e[2],n=e[6],e=e[10];return h=h||this._order,"XYZ"===h?(this._y=Math.asin(d(E,-1,1)),.99999>Math.abs(E)?(this._x=Math.atan2(-l,e),this._z=Math.atan2(-f,a)):(this._x=Math.atan2(n,v),this._z=0)):"YXZ"===h?(this._x=Math.asin(-d(l,-1,1)),.99999>Math.abs(l)?(this._y=Math.atan2(E,e),this._z=Math.atan2(g,v)):(this._y=Math.atan2(-p,a),this._z=0)):"ZXY"===h?(this._x=Math.asin(d(n,-1,1)),.99999>Math.abs(n)?(this._y=Math.atan2(-p,e),this._z=Math.atan2(-f,v)):(this._y=0,this._z=Math.atan2(g,a))):"ZYX"===h?(this._y=Math.asin(-d(p,-1,1)),.99999>Math.abs(p)?(this._x=Math.atan2(n,e),this._z=Math.atan2(g,a)):(this._x=0,this._z=Math.atan2(-f,v))):"YZX"===h?(this._z=Math.asin(d(g,-1,1)),.99999>Math.abs(g)?(this._x=Math.atan2(-l,v),this._y=Math.atan2(-p,a)):(this._x=0,this._y=Math.atan2(E,e))):"XZY"===h?(this._z=Math.asin(-d(f,-1,1)),.99999>Math.abs(f)?(this._x=Math.atan2(n,v),this._y=Math.atan2(E,a)):(this._x=Math.atan2(-l,e),this._y=0)):void 0,this._order=h,!1!==c&&this.onChangeCallback(),this},setFromQuaternion:function(){var a;return function(h,c,d){return void 0===a&&(a=new THREE.Matrix4),a.makeRotationFromQuaternion(h),this.setFromRotationMatrix(a,c,d),this}}(),setFromVector3:function(a,h){return this.set(a.x,a.y,a.z,h||this._order)},reorder:function(){var a=new THREE.Quaternion;return function(h){a.setFromEuler(this),this.setFromQuaternion(a,h)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){return this._x=a[0],this._y=a[1],this._z=a[2],void 0!==a[3]&&(this._order=a[3]),this.onChangeCallback(),this},toArray:function(a,h){return void 0===a&&(a=[]),void 0===h&&(h=0),a[h]=this._x,a[h+1]=this._y,a[h+2]=this._z,a[h+3]=this._order,a},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(a){return this.onChangeCallback=a,this},onChangeCallback:function(){}},THREE.Line3=function(a,h){this.start=void 0!==a?a:new THREE.Vector3,this.end=void 0!==h?h:new THREE.Vector3},THREE.Line3.prototype={constructor:THREE.Line3,set:function(a,h){return this.start.copy(a),this.end.copy(h),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.start.copy(a.start),this.end.copy(a.end),this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,h){var c=h||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,h=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start),h.subVectors(this.end,this.start);var e=h.dot(h),e=h.dot(a)/e;return d&&(e=THREE.Math.clamp(e,0,1)),e}}(),closestPointToPoint:function(a,h,c){return a=this.closestPointToPointParameter(a,h),c=c||new THREE.Vector3,this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){return this.start.applyMatrix4(a),this.end.applyMatrix4(a),this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}},THREE.Box2=function(a,h){this.min=void 0!==a?a:new THREE.Vector2(1/0,1/0),this.max=void 0!==h?h:new THREE.Vector2(-1/0,-1/0)},THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,h){return this.min.copy(a),this.max.copy(h),this},setFromPoints:function(a){this.makeEmpty();for(var h=0,c=a.length;c>h;h++)this.expandByPoint(a[h]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(h,c){var d=a.copy(c).multiplyScalar(.5);return this.min.copy(h).sub(d),this.max.copy(h).add(d),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.min.copy(a.min),this.max.copy(a.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){return this.min.min(a),this.max.max(a),this},expandByVector:function(a){return this.min.sub(a),this.max.add(a),this},expandByScalar:function(a){return this.min.addScalar(-a),this.max.addScalar(a),this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a,h){return(h||new THREE.Vector2).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,h){return(h||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(h){return a.copy(h).clamp(this.min,this.max).sub(h).length()}}(),intersect:function(a){return this.min.max(a.min),this.max.min(a.max),this},union:function(a){return this.min.min(a.min),this.max.max(a.max),this},translate:function(a){return this.min.add(a),this.max.add(a),this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}},THREE.Box3=function(a,h){this.min=void 0!==a?a:new THREE.Vector3(1/0,1/0,1/0),this.max=void 0!==h?h:new THREE.Vector3(-1/0,-1/0,-1/0)},THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,h){return this.min.copy(a),this.max.copy(h),this},setFromArray:function(a){this.makeEmpty();for(var h=1/0,c=1/0,d=1/0,e=-1/0,f=-1/0,E=-1/0,g=0,v=a.length;v>g;g+=3){var l=a[g],p=a[g+1],n=a[g+2];h>l&&(h=l),c>p&&(c=p),d>n&&(d=n),l>e&&(e=l),p>f&&(f=p),n>E&&(E=n)}this.min.set(h,c,d),this.max.set(e,f,E)},setFromPoints:function(a){this.makeEmpty();for(var h=0,c=a.length;c>h;h++)this.expandByPoint(a[h]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;return function(h,c){var d=a.copy(c).multiplyScalar(.5);return this.min.copy(h).sub(d),this.max.copy(h).add(d),this}}(),setFromObject:function(){var a;return function(h){void 0===a&&(a=new THREE.Box3);var c=this;return this.makeEmpty(),h.updateMatrixWorld(!0),h.traverse(function(h){var e=h.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),!1===e.boundingBox.isEmpty()&&(a.copy(e.boundingBox),a.applyMatrix4(h.matrixWorld),c.union(a)))}),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.min.copy(a.min),this.max.copy(a.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){return this.min.min(a),this.max.max(a),this},expandByVector:function(a){return this.min.sub(a),this.max.add(a),this},expandByScalar:function(a){return this.min.addScalar(-a),this.max.addScalar(a),this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a,h){return(h||new THREE.Vector3).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},intersectsSphere:function(){var a;return function(h){return void 0===a&&(a=new THREE.Vector3),this.clampPoint(h.center,a),a.distanceToSquared(h.center)<=h.radius*h.radius}}(),intersectsPlane:function(a){var h,c;return 0<a.normal.x?(h=a.normal.x*this.min.x,c=a.normal.x*this.max.x):(h=a.normal.x*this.max.x,c=a.normal.x*this.min.x),0<a.normal.y?(h+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(h+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y),0<a.normal.z?(h+=a.normal.z*this.min.z,c+=a.normal.z*this.max.z):(h+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z),h<=a.constant&&c>=a.constant},clampPoint:function(a,h){return(h||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(h){return a.copy(h).clamp(this.min,this.max).sub(h).length()}}(),getBoundingSphere:function(){var a=new THREE.Vector3;return function(h){return h=h||new THREE.Sphere,h.center=this.center(),h.radius=.5*this.size(a).length(),h}}(),intersect:function(a){return this.min.max(a.min),this.max.min(a.max),this},union:function(a){return this.min.min(a.min),this.max.max(a.max),this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(h){return a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(h),a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(h),a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(h),a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(h),a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(h),a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(h),a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(h),a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(h),this.makeEmpty(),this.setFromPoints(a),this}}(),translate:function(a){return this.min.add(a),this.max.add(a),this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}},THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]),0<arguments.length&&void 0},THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,h,c,d,e,f,E,g,v){var l=this.elements;return l[0]=a,l[1]=d,l[2]=E,l[3]=h,l[4]=e,l[5]=g,l[6]=c,l[7]=f,l[8]=v,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(a){return a=a.elements,this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]),this},setFromMatrix4:function(a){return a=a.elements,this.set(a[0],a[4],a[8],a[1],a[5],a[9],a[2],a[6],a[10]),this},applyToVector3Array:function(){var a;return function(h,c,d){void 0===a&&(a=new THREE.Vector3),void 0===c&&(c=0),void 0===d&&(d=h.length);for(var e=0;d>e;e+=3,c+=3)a.fromArray(h,c),a.applyMatrix3(this),a.toArray(h,c);return h}}(),applyToBuffer:function(){var a;return function(h,c,d){void 0===a&&(a=new THREE.Vector3),void 0===c&&(c=0),void 0===d&&(d=h.length/h.itemSize);for(var e=0;d>e;e++,c++)a.x=h.getX(c),a.y=h.getY(c),a.z=h.getZ(c),a.applyMatrix3(this),h.setXYZ(a.x,a.y,a.z);return h}}(),multiplyScalar:function(a){var h=this.elements;return h[0]*=a,h[3]*=a,h[6]*=a,h[1]*=a,h[4]*=a,h[7]*=a,h[2]*=a,h[5]*=a,h[8]*=a,this},determinant:function(){var a=this.elements,h=a[0],c=a[1],d=a[2],e=a[3],f=a[4],E=a[5],g=a[6],v=a[7],a=a[8];return h*f*a-h*E*v-c*e*a+c*E*g+d*e*v-d*f*g},getInverse:function(a,h){a instanceof THREE.Matrix4&&void 0;var c=a.elements,d=this.elements,e=c[0],f=c[1],E=c[2],g=c[3],v=c[4],l=c[5],p=c[6],n=c[7],c=c[8],m=c*v-l*n,q=l*p-c*g,u=n*g-v*p,T=e*m+f*q+E*u;if(0===T){if(h)throw Error("THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0");return this.identity()}return d[0]=m,d[1]=E*n-c*f,d[2]=l*f-E*v,d[3]=q,d[4]=c*e-E*p,d[5]=E*g-l*e,d[6]=u,d[7]=f*p-n*e,d[8]=v*e-f*g,this.multiplyScalar(1/T)},transpose:function(){var a,h=this.elements;return a=h[1],h[1]=h[3],h[3]=a,a=h[2],h[2]=h[6],h[6]=a,a=h[5],h[5]=h[7],h[7]=a,this},flattenToArrayOffset:function(a,h){var c=this.elements;return a[h]=c[0],a[h+1]=c[1],a[h+2]=c[2],a[h+3]=c[3],a[h+4]=c[4],a[h+5]=c[5],a[h+6]=c[6],a[h+7]=c[7],a[h+8]=c[8],a},getNormalMatrix:function(a){return this.setFromMatrix4(a).getInverse(this).transpose()},transposeIntoArray:function(a){var h=this.elements;return a[0]=h[0],a[1]=h[3],a[2]=h[6],a[3]=h[1],a[4]=h[4],a[5]=h[7],a[6]=h[2],a[7]=h[5],a[8]=h[8],this},fromArray:function(a){return this.elements.set(a),this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8]]}},THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),0<arguments.length&&void 0},THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,h,c,d,e,f,E,g,v,l,p,n,m,q,u,T){var t=this.elements;return t[0]=a,t[4]=h,t[8]=c,t[12]=d,t[1]=e,t[5]=f,t[9]=E,t[13]=g,t[2]=v,t[6]=l,t[10]=p,t[14]=n,t[3]=m,t[7]=q,t[11]=u,t[15]=T,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)},copy:function(a){return this.elements.set(a.elements),this},copyPosition:function(a){var h=this.elements;return a=a.elements,h[12]=a[12],h[13]=a[13],h[14]=a[14],this},extractBasis:function(a,h,c){return a.setFromMatrixColumn(this,0),h.setFromMatrixColumn(this,1),c.setFromMatrixColumn(this,2),this},makeBasis:function(a,h,c){return this.set(a.x,h.x,c.x,0,a.y,h.y,c.y,0,a.z,h.z,c.z,0,0,0,0,1),this},extractRotation:function(){var a;return function(h){void 0===a&&(a=new THREE.Vector3);var c=this.elements,d=h.elements,e=1/a.setFromMatrixColumn(h,0).length(),f=1/a.setFromMatrixColumn(h,1).length();return h=1/a.setFromMatrixColumn(h,2).length(),c[0]=d[0]*e,c[1]=d[1]*e,c[2]=d[2]*e,c[4]=d[4]*f,c[5]=d[5]*f,c[6]=d[6]*f,c[8]=d[8]*h,c[9]=d[9]*h,c[10]=d[10]*h,this}}(),makeRotationFromEuler:function(a){!1==a instanceof THREE.Euler&&void 0;var h=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),E=Math.cos(d),d=Math.sin(d),g=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){a=f*g;var v=f*e,l=c*g,p=c*e;h[0]=E*g,h[4]=-E*e,h[8]=d,h[1]=v+l*d,h[5]=a-p*d,h[9]=-c*E,h[2]=p-a*d,h[6]=l+v*d,h[10]=f*E}else"YXZ"===a.order?(a=E*g,v=E*e,l=d*g,p=d*e,h[0]=a+p*c,h[4]=l*c-v,h[8]=f*d,h[1]=f*e,h[5]=f*g,h[9]=-c,h[2]=v*c-l,h[6]=p+a*c,h[10]=f*E):"ZXY"===a.order?(a=E*g,v=E*e,l=d*g,p=d*e,h[0]=a-p*c,h[4]=-f*e,h[8]=l+v*c,h[1]=v+l*c,h[5]=f*g,h[9]=p-a*c,h[2]=-f*d,h[6]=c,h[10]=f*E):"ZYX"===a.order?(a=f*g,v=f*e,l=c*g,p=c*e,h[0]=E*g,h[4]=l*d-v,h[8]=a*d+p,h[1]=E*e,h[5]=p*d+a,h[9]=v*d-l,h[2]=-d,h[6]=c*E,h[10]=f*E):"YZX"===a.order?(a=f*E,v=f*d,l=c*E,p=c*d,h[0]=E*g,h[4]=p-a*e,h[8]=l*e+v,h[1]=e,h[5]=f*g,h[9]=-c*g,h[2]=-d*g,h[6]=v*e+l,h[10]=a-p*e):"XZY"===a.order&&(a=f*E,v=f*d,l=c*E,p=c*d,h[0]=E*g,h[4]=-e,h[8]=d*g,h[1]=a*e+p,h[5]=f*g,h[9]=v*e-l,h[2]=l*e-v,h[6]=c*g,h[10]=p*e+a);return h[3]=0,h[7]=0,h[11]=0,h[12]=0,h[13]=0,h[14]=0,h[15]=1,this},makeRotationFromQuaternion:function(a){var h=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,E=c+c,g=d+d,v=e+e;a=c*E;var l=c*g,c=c*v,p=d*g,d=d*v,e=e*v,E=f*E,g=f*g,f=f*v;return h[0]=1-(p+e),h[4]=l-f,h[8]=c+g,h[1]=l+f,h[5]=1-(a+e),h[9]=d-E,h[2]=c-g,h[6]=d+E,h[10]=1-(a+p),h[3]=0,h[7]=0,h[11]=0,h[12]=0,h[13]=0,h[14]=0,h[15]=1,this},lookAt:function(){var a,h,c;return function(d,e,f){void 0===a&&(a=new THREE.Vector3),void 0===h&&(h=new THREE.Vector3),void 0===c&&(c=new THREE.Vector3);var E=this.elements;return c.subVectors(d,e).normalize(),0===c.lengthSq()&&(c.z=1),a.crossVectors(f,c).normalize(),0===a.lengthSq()&&(c.x+=1e-4,a.crossVectors(f,c).normalize()),h.crossVectors(c,a),E[0]=a.x,E[4]=h.x,E[8]=c.x,E[1]=a.y,E[5]=h.y,E[9]=c.y,E[2]=a.z,E[6]=h.z,E[10]=c.z,this}}(),multiply:function(a,h){return void 0!==h?this.multiplyMatrices(a,h):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,h){var c=a.elements,d=h.elements,e=this.elements,f=c[0],E=c[4],g=c[8],v=c[12],l=c[1],p=c[5],n=c[9],m=c[13],q=c[2],u=c[6],T=c[10],t=c[14],s=c[3],y=c[7],R=c[11],c=c[15],x=d[0],H=d[4],_=d[8],b=d[12],M=d[1],S=d[5],w=d[9],A=d[13],L=d[2],C=d[6],P=d[10],B=d[14],I=d[3],D=d[7],U=d[11],d=d[15];return e[0]=f*x+E*M+g*L+v*I,e[4]=f*H+E*S+g*C+v*D,e[8]=f*_+E*w+g*P+v*U,e[12]=f*b+E*A+g*B+v*d,e[1]=l*x+p*M+n*L+m*I,e[5]=l*H+p*S+n*C+m*D,e[9]=l*_+p*w+n*P+m*U,e[13]=l*b+p*A+n*B+m*d,e[2]=q*x+u*M+T*L+t*I,e[6]=q*H+u*S+T*C+t*D,e[10]=q*_+u*w+T*P+t*U,e[14]=q*b+u*A+T*B+t*d,e[3]=s*x+y*M+R*L+c*I,e[7]=s*H+y*S+R*C+c*D,e[11]=s*_+y*w+R*P+c*U,e[15]=s*b+y*A+R*B+c*d,this},multiplyToArray:function(a,h,c){var d=this.elements;return this.multiplyMatrices(a,h),c[0]=d[0],c[1]=d[1],c[2]=d[2],c[3]=d[3],c[4]=d[4],c[5]=d[5],c[6]=d[6],c[7]=d[7],c[8]=d[8],c[9]=d[9],c[10]=d[10],c[11]=d[11],c[12]=d[12],c[13]=d[13],c[14]=d[14],c[15]=d[15],this},multiplyScalar:function(a){var h=this.elements;return h[0]*=a,h[4]*=a,h[8]*=a,h[12]*=a,h[1]*=a,h[5]*=a,h[9]*=a,h[13]*=a,h[2]*=a,h[6]*=a,h[10]*=a,h[14]*=a,h[3]*=a,h[7]*=a,h[11]*=a,h[15]*=a,this},applyToVector3Array:function(){var a;return function(h,c,d){void 0===a&&(a=new THREE.Vector3),void 0===c&&(c=0),void 0===d&&(d=h.length);for(var e=0;d>e;e+=3,c+=3)a.fromArray(h,c),a.applyMatrix4(this),a.toArray(h,c);return h}}(),applyToBuffer:function(){var a;return function(h,c,d){void 0===a&&(a=new THREE.Vector3),void 0===c&&(c=0),void 0===d&&(d=h.length/h.itemSize);for(var e=0;d>e;e++,c++)a.x=h.getX(c),a.y=h.getY(c),a.z=h.getZ(c),a.applyMatrix4(this),h.setXYZ(a.x,a.y,a.z);return h}}(),determinant:function(){var a=this.elements,h=a[0],c=a[4],d=a[8],e=a[12],f=a[1],E=a[5],g=a[9],v=a[13],l=a[2],p=a[6],n=a[10],m=a[14];return a[3]*(+e*g*p-d*v*p-e*E*n+c*v*n+d*E*m-c*g*m)+a[7]*(+h*g*m-h*v*n+e*f*n-d*f*m+d*v*l-e*g*l)+a[11]*(+h*v*p-h*E*m-e*f*p+c*f*m+e*E*l-c*v*l)+a[15]*(-d*E*l-h*g*p+h*E*n+d*f*p-c*f*n+c*g*l)},transpose:function(){var a=this.elements,h;return h=a[1],a[1]=a[4],a[4]=h,h=a[2],a[2]=a[8],a[8]=h,h=a[6],a[6]=a[9],a[9]=h,h=a[3],a[3]=a[12],a[12]=h,h=a[7],a[7]=a[13],a[13]=h,h=a[11],a[11]=a[14],a[14]=h,this},flattenToArrayOffset:function(a,h){var c=this.elements;return a[h]=c[0],a[h+1]=c[1],a[h+2]=c[2],a[h+3]=c[3],a[h+4]=c[4],a[h+5]=c[5],a[h+6]=c[6],a[h+7]=c[7],a[h+8]=c[8],a[h+9]=c[9],a[h+10]=c[10],a[h+11]=c[11],a[h+12]=c[12],a[h+13]=c[13],a[h+14]=c[14],a[h+15]=c[15],a},getPosition:function(){var a;return function(){return void 0===a&&(a=new THREE.Vector3),a.setFromMatrixColumn(this,3)}}(),setPosition:function(a){var h=this.elements;return h[12]=a.x,h[13]=a.y,h[14]=a.z,this},getInverse:function(a,h){var c=this.elements,d=a.elements,e=d[0],f=d[1],E=d[2],g=d[3],v=d[4],l=d[5],p=d[6],n=d[7],m=d[8],q=d[9],u=d[10],T=d[11],t=d[12],s=d[13],y=d[14],d=d[15],R=q*y*n-s*u*n+s*p*T-l*y*T-q*p*d+l*u*d,x=t*u*n-m*y*n-t*p*T+v*y*T+m*p*d-v*u*d,H=m*s*n-t*q*n+t*l*T-v*s*T-m*l*d+v*q*d,_=t*q*p-m*s*p-t*l*u+v*s*u+m*l*y-v*q*y,b=e*R+f*x+E*H+g*_;if(0===b){if(h)throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");return this.identity()}return c[0]=R,c[1]=s*u*g-q*y*g-s*E*T+f*y*T+q*E*d-f*u*d,c[2]=l*y*g-s*p*g+s*E*n-f*y*n-l*E*d+f*p*d,c[3]=q*p*g-l*u*g-q*E*n+f*u*n+l*E*T-f*p*T,c[4]=x,c[5]=m*y*g-t*u*g+t*E*T-e*y*T-m*E*d+e*u*d,c[6]=t*p*g-v*y*g-t*E*n+e*y*n+v*E*d-e*p*d,c[7]=v*u*g-m*p*g+m*E*n-e*u*n-v*E*T+e*p*T,c[8]=H,c[9]=t*q*g-m*s*g-t*f*T+e*s*T+m*f*d-e*q*d,c[10]=v*s*g-t*l*g+t*f*n-e*s*n-v*f*d+e*l*d,c[11]=m*l*g-v*q*g-m*f*n+e*q*n+v*f*T-e*l*T,c[12]=_,c[13]=m*s*E-t*q*E+t*f*u-e*s*u-m*f*y+e*q*y,c[14]=t*l*E-v*s*E-t*f*p+e*s*p+v*f*y-e*l*y,c[15]=v*q*E-m*l*E+m*f*p-e*q*p-v*f*u+e*l*u,this.multiplyScalar(1/b)},scale:function(a){var h=this.elements,c=a.x,d=a.y;return a=a.z,h[0]*=c,h[4]*=d,h[8]*=a,h[1]*=c,h[5]*=d,h[9]*=a,h[2]*=c,h[6]*=d,h[10]*=a,h[3]*=c,h[7]*=d,h[11]*=a,this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10]))},makeTranslation:function(a,h,c){return this.set(1,0,0,a,0,1,0,h,0,0,1,c,0,0,0,1),this},makeRotationX:function(a){var h=Math.cos(a);return a=Math.sin(a),this.set(1,0,0,0,0,h,-a,0,0,a,h,0,0,0,0,1),this},makeRotationY:function(a){var h=Math.cos(a);return a=Math.sin(a),this.set(h,0,a,0,0,1,0,0,-a,0,h,0,0,0,0,1),this},makeRotationZ:function(a){var h=Math.cos(a);return a=Math.sin(a),this.set(h,-a,0,0,a,h,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(a,h){var c=Math.cos(h),d=Math.sin(h),e=1-c,f=a.x,E=a.y,g=a.z,v=e*f,l=e*E;return this.set(v*f+c,v*E-d*g,v*g+d*E,0,v*E+d*g,l*E+c,l*g-d*f,0,v*g-d*E,l*g+d*f,e*g*g+c,0,0,0,0,1),this},makeScale:function(a,h,c){return this.set(a,0,0,0,0,h,0,0,0,0,c,0,0,0,0,1),this},compose:function(a,h,c){return this.makeRotationFromQuaternion(h),this.scale(c),this.setPosition(a),this},decompose:function(){var a,h;return function(c,d,e){void 0===a&&(a=new THREE.Vector3),void 0===h&&(h=new THREE.Matrix4);var f=this.elements,E=a.set(f[0],f[1],f[2]).length(),g=a.set(f[4],f[5],f[6]).length(),v=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(E=-E),c.x=f[12],c.y=f[13],c.z=f[14],h.elements.set(this.elements),c=1/E;var f=1/g,l=1/v;return h.elements[0]*=c,h.elements[1]*=c,h.elements[2]*=c,h.elements[4]*=f,h.elements[5]*=f,h.elements[6]*=f,h.elements[8]*=l,h.elements[9]*=l,h.elements[10]*=l,d.setFromRotationMatrix(h),e.x=E,e.y=g,e.z=v,this}}(),makeFrustum:function(a,h,c,d,e,f){var E=this.elements;return E[0]=2*e/(h-a),E[4]=0,E[8]=(h+a)/(h-a),E[12]=0,E[1]=0,E[5]=2*e/(d-c),E[9]=(d+c)/(d-c),E[13]=0,E[2]=0,E[6]=0,E[10]=-(f+e)/(f-e),E[14]=-2*f*e/(f-e),E[3]=0,E[7]=0,E[11]=-1,E[15]=0,this},makePerspective:function(a,h,c,d){a=c*Math.tan(THREE.Math.degToRad(.5*a));var e=-a;return this.makeFrustum(e*h,a*h,e,a,c,d)},makeOrthographic:function(a,h,c,d,e,f){var E=this.elements,g=1/(h-a),v=1/(c-d),l=1/(f-e);return E[0]=2*g,E[4]=0,E[8]=0,E[12]=-((h+a)*g),E[1]=0,E[5]=2*v,E[9]=0,E[13]=-((c+d)*v),E[2]=0,E[6]=0,E[10]=-2*l,E[14]=-((f+e)*l),E[3]=0,E[7]=0,E[11]=0,E[15]=1,this},equals:function(a){var h=this.elements;a=a.elements;for(var c=0;16>c;c++)if(h[c]!==a[c])return!1;return!0},fromArray:function(a){return this.elements.set(a),this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]]}},THREE.Ray=function(a,h){this.origin=void 0!==a?a:new THREE.Vector3,this.direction=void 0!==h?h:new THREE.Vector3},THREE.Ray.prototype={constructor:THREE.Ray,set:function(a,h){return this.origin.copy(a),this.direction.copy(h),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.origin.copy(a.origin),this.direction.copy(a.direction),this},at:function(a,h){return(h||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},lookAt:function(a){this.direction.copy(a).sub(this.origin).normalize()},recast:function(){var a=new THREE.Vector3;return function(h){return this.origin.copy(this.at(h,a)),this}}(),closestPointToPoint:function(a,h){var c=h||new THREE.Vector3;c.subVectors(a,this.origin);var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(){var a=new THREE.Vector3;return function(h){var c=a.subVectors(h,this.origin).dot(this.direction);return 0>c?this.origin.distanceToSquared(h):(a.copy(this.direction).multiplyScalar(c).add(this.origin),a.distanceToSquared(h))}}(),distanceSqToSegment:function(){var a=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,E){a.copy(d).add(e).multiplyScalar(.5),h.copy(e).sub(d).normalize(),c.copy(this.origin).sub(a);var g=.5*d.distanceTo(e),v=-this.direction.dot(h),l=c.dot(this.direction),p=-c.dot(h),n=c.lengthSq(),m=Math.abs(1-v*v),q;return m>0?(d=v*p-l,e=v*l-p,q=g*m,d>=0?e>=-q?q>=e?(g=1/m,d*=g,e*=g,v=d*(d+v*e+2*l)+e*(v*d+e+2*p)+n):(e=g,d=Math.max(0,-(v*e+l)),v=-d*d+e*(e+2*p)+n):(e=-g,d=Math.max(0,-(v*e+l)),v=-d*d+e*(e+2*p)+n):-q>=e?(d=Math.max(0,-(-v*g+l)),e=d>0?-g:Math.min(Math.max(-g,-p),g),v=-d*d+e*(e+2*p)+n):q>=e?(d=0,e=Math.min(Math.max(-g,-p),g),v=e*(e+2*p)+n):(d=Math.max(0,-(v*g+l)),e=d>0?g:Math.min(Math.max(-g,-p),g),v=-d*d+e*(e+2*p)+n)):(e=v>0?-g:g,d=Math.max(0,-(v*e+l)),v=-d*d+e*(e+2*p)+n),f&&f.copy(this.direction).multiplyScalar(d).add(this.origin),E&&E.copy(h).multiplyScalar(e).add(a),v}}(),intersectSphere:function(){var a=new THREE.Vector3;return function(h,c){a.subVectors(h.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d,f=h.radius*h.radius;return e>f?null:(f=Math.sqrt(f-e),e=d-f,d+=f,0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c))}}(),intersectsSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},distanceToPlane:function(a){var h=a.normal.dot(this.direction);return 0===h?0===a.distanceToPoint(this.origin)?0:null:(a=-(this.origin.dot(a.normal)+a.constant)/h,a>=0?a:null)},intersectPlane:function(a,h){var c=this.distanceToPlane(a);return null===c?null:this.at(c,h)},intersectsPlane:function(a){var h=a.distanceToPoint(this.origin);return 0===h||0>a.normal.dot(this.direction)*h?!0:!1},intersectBox:function(a,h){var c,d,e,f,E;d=1/this.direction.x,f=1/this.direction.y,E=1/this.direction.z;var g=this.origin;return d>=0?(c=(a.min.x-g.x)*d,d*=a.max.x-g.x):(c=(a.max.x-g.x)*d,d*=a.min.x-g.x),f>=0?(e=(a.min.y-g.y)*f,f*=a.max.y-g.y):(e=(a.max.y-g.y)*f,f*=a.min.y-g.y),c>f||e>d?null:((e>c||c!==c)&&(c=e),(d>f||d!==d)&&(d=f),E>=0?(e=(a.min.z-g.z)*E,E*=a.max.z-g.z):(e=(a.max.z-g.z)*E,E*=a.min.z-g.z),c>E||e>d?null:((e>c||c!==c)&&(c=e),(d>E||d!==d)&&(d=E),0>d?null:this.at(c>=0?c:d,h)))},intersectsBox:function(){var a=new THREE.Vector3;return function(h){return null!==this.intersectBox(h,a)}}(),intersectTriangle:function(){var a=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,E,g,v){if(h.subVectors(f,e),c.subVectors(E,e),d.crossVectors(h,c),f=this.direction.dot(d),f>0){if(g)return null;g=1}else{if(!(0>f))return null;g=-1,f=-f}return a.subVectors(this.origin,e),e=g*this.direction.dot(c.crossVectors(a,c)),0>e?null:(E=g*this.direction.dot(h.cross(a)),0>E||e+E>f?null:(e=-g*a.dot(d),0>e?null:this.at(e/f,v)))}}(),applyMatrix4:function(a){return this.direction.add(this.origin).applyMatrix4(a),this.origin.applyMatrix4(a),this.direction.sub(this.origin),this.direction.normalize(),this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}},THREE.Sphere=function(a,h){this.center=void 0!==a?a:new THREE.Vector3,this.radius=void 0!==h?h:0},THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,h){return this.center.copy(a),this.radius=h,this},setFromPoints:function(){var a=new THREE.Box3;return function(h,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(h).center(d);for(var e=0,f=0,E=h.length;E>f;f++)e=Math.max(e,d.distanceToSquared(h[f]));return this.radius=Math.sqrt(e),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.center.copy(a.center),this.radius=a.radius,this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var h=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=h*h},intersectsBox:function(a){return a.intersectsSphere(this)},intersectsPlane:function(a){return Math.abs(this.center.dot(a.normal)-a.constant)<=this.radius},clampPoint:function(a,h){var c=this.center.distanceToSquared(a),d=h||new THREE.Vector3;return d.copy(a),c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center)),d},getBoundingBox:function(a){return a=a||new THREE.Box3,a.set(this.center,this.center),a.expandByScalar(this.radius),a},applyMatrix4:function(a){return this.center.applyMatrix4(a),this.radius*=a.getMaxScaleOnAxis(),this},translate:function(a){return this.center.add(a),this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius}},THREE.Frustum=function(a,h,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==h?h:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]},THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,h,c,d,e,f){var E=this.planes;return E[0].copy(a),E[1].copy(h),E[2].copy(c),E[3].copy(d),E[4].copy(e),E[5].copy(f),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){for(var h=this.planes,c=0;6>c;c++)h[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var h=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],E=c[4],g=c[5],v=c[6],l=c[7],p=c[8],n=c[9],m=c[10],q=c[11],u=c[12],T=c[13],t=c[14],c=c[15];return h[0].setComponents(f-a,l-E,q-p,c-u).normalize(),h[1].setComponents(f+a,l+E,q+p,c+u).normalize(),h[2].setComponents(f+d,l+g,q+n,c+T).normalize(),h[3].setComponents(f-d,l-g,q-n,c-T).normalize(),h[4].setComponents(f-e,l-v,q-m,c-t).normalize(),h[5].setComponents(f+e,l+v,q+m,c+t).normalize(),this},intersectsObject:function(){var a=new THREE.Sphere;return function(h){var c=h.geometry;return null===c.boundingSphere&&c.computeBoundingSphere(),a.copy(c.boundingSphere),a.applyMatrix4(h.matrixWorld),this.intersectsSphere(a)}}(),intersectsSphere:function(a){var h=this.planes,c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(h[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,h=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x,h.x=0<f.normal.x?c.max.x:c.min.x,a.y=0<f.normal.y?c.min.y:c.max.y,h.y=0<f.normal.y?c.max.y:c.min.y,a.z=0<f.normal.z?c.min.z:c.max.z,h.z=0<f.normal.z?c.max.z:c.min.z;var E=f.distanceToPoint(a),f=f.distanceToPoint(h);if(0>E&&0>f)return!1}return!0}}(),containsPoint:function(a){for(var h=this.planes,c=0;6>c;c++)if(0>h[c].distanceToPoint(a))return!1;return!0}},THREE.Plane=function(a,h){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0),this.constant=void 0!==h?h:0},THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,h){return this.normal.copy(a),this.constant=h,this},setComponents:function(a,h,c,d){return this.normal.set(a,h,c),this.constant=d,this},setFromNormalAndCoplanarPoint:function(a,h){return this.normal.copy(a),this.constant=-h.dot(this.normal),this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,h=new THREE.Vector3;return function(c,d,e){return d=a.subVectors(e,d).cross(h.subVectors(c,d)).normalize(),this.setFromNormalAndCoplanarPoint(d,c),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.normal.copy(a.normal),this.constant=a.constant,this
},normalize:function(){var a=1/this.normal.length();return this.normal.multiplyScalar(a),this.constant*=a,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,h){return this.orthoPoint(a,h).sub(a).negate()},orthoPoint:function(a,h){var c=this.distanceToPoint(a);return(h||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},intersectLine:function(){var a=new THREE.Vector3;return function(h,c){var d=c||new THREE.Vector3,e=h.delta(a),f=this.normal.dot(e);return 0!==f?(f=-(h.start.dot(this.normal)+this.constant)/f,0>f||f>1?void 0:d.copy(e).multiplyScalar(f).add(h.start)):0===this.distanceToPoint(h.start)?d.copy(h.start):void 0}}(),intersectsLine:function(a){var h=this.distanceToPoint(a.start);return a=this.distanceToPoint(a.end),0>h&&a>0||0>a&&h>0},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Matrix3;return function(d,e){var f=e||c.getNormalMatrix(d),f=a.copy(this.normal).applyMatrix3(f),E=this.coplanarPoint(h);return E.applyMatrix4(d),this.setFromNormalAndCoplanarPoint(f,E),this}}(),translate:function(a){return this.constant-=a.dot(this.normal),this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}},THREE.Spherical=function(a,h,c){return this.radius=void 0!==a?a:1,this.phi=void 0!==h?h:0,this.theta=void 0!==c?c:0,this},THREE.Spherical.prototype={constructor:THREE.Spherical,set:function(a,h,c){this.radius=a,this.phi=h,this.theta=c},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.radius.copy(a.radius),this.phi.copy(a.phi),this.theta.copy(a.theta),this},makeSafe:function(){this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi))},setFromVector3:function(a){return this.radius=a.length(),0===this.radius?this.phi=this.theta=0:(this.theta=Math.atan2(a.x,a.z),this.phi=Math.acos(THREE.Math.clamp(a.y/this.radius,-1,1))),this}},THREE.Math={generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),h=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8===e||13===e||18===e||23===e?h[e]="-":14===e?h[e]="4":(2>=c&&(c=33554432+16777216*Math.random()|0),d=15&c,c>>=4,h[e]=a[19===e?3&d|8:d]);return h.join("")}}(),clamp:function(a,h,c){return Math.max(h,Math.min(c,a))},euclideanModulo:function(a,h){return(a%h+h)%h},mapLinear:function(a,h,c,d,e){return d+(a-h)*(e-d)/(c-h)},smoothstep:function(a,h,c){return h>=a?0:a>=c?1:(a=(a-h)/(c-h),a*a*(3-2*a))},smootherstep:function(a,h,c){return h>=a?0:a>=c?1:(a=(a-h)/(c-h),a*a*a*(a*(6*a-15)+10))},random16:function(){return Math.random()},randInt:function(a,h){return a+Math.floor(Math.random()*(h-a+1))},randFloat:function(a,h){return a+Math.random()*(h-a)},randFloatSpread:function(a){return a*(.5-Math.random())},degToRad:function(){var a=Math.PI/180;return function(h){return h*a}}(),radToDeg:function(){var a=180/Math.PI;return function(h){return h*a}}(),isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},nearestPowerOfTwo:function(a){return Math.pow(2,Math.round(Math.log(a)/Math.LN2))},nextPowerOfTwo:function(a){return a--,a|=a>>1,a|=a>>2,a|=a>>4,a|=a>>8,a|=a>>16,a++,a}},THREE.Spline=function(a){function h(a,h,c,d,e,f,E){return a=.5*(c-a),d=.5*(d-h),(2*(h-c)+a+d)*E+(-3*(h-c)-2*a-d)*f+a*e+h}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,E,g,v,l,p,n,m;this.initFromArray=function(a){this.points=[];for(var h=0;h<a.length;h++)this.points[h]={x:a[h][0],y:a[h][1],z:a[h][2]}},this.getPoint=function(a){return e=(this.points.length-1)*a,f=Math.floor(e),E=e-f,c[0]=0===f?f:f-1,c[1]=f,c[2]=f>this.points.length-2?this.points.length-1:f+1,c[3]=f>this.points.length-3?this.points.length-1:f+2,l=this.points[c[0]],p=this.points[c[1]],n=this.points[c[2]],m=this.points[c[3]],g=E*E,v=E*g,d.x=h(l.x,p.x,n.x,m.x,E,g,v),d.y=h(l.y,p.y,n.y,m.y,E,g,v),d.z=h(l.z,p.z,n.z,m.z,E,g,v),d},this.getControlPointsArray=function(){var a,h,c=this.points.length,d=[];for(a=0;c>a;a++)h=this.points[a],d[a]=[h.x,h.y,h.z];return d},this.getLength=function(a){var h,c,d,e=h=h=0,f=new THREE.Vector3,E=new THREE.Vector3,g=[],v=0;for(g[0]=0,a||(a=100),c=this.points.length*a,f.copy(this.points[0]),a=1;c>a;a++)h=a/c,d=this.getPoint(h),E.copy(d),v+=E.distanceTo(f),f.copy(d),h*=this.points.length-1,h=Math.floor(h),h!==e&&(g[h]=v,e=h);return g[g.length]=v,{chunks:g,total:v}},this.reparametrizeByArcLength=function(a){var h,c,d,e,f,E,g=[],v=new THREE.Vector3,l=this.getLength();for(g.push(v.copy(this.points[0]).clone()),h=1;h<this.points.length;h++){for(c=l.chunks[h]-l.chunks[h-1],E=Math.ceil(a*c/l.total),e=(h-1)/(this.points.length-1),f=h/(this.points.length-1),c=1;E-1>c;c++)d=e+1/E*c*(f-e),d=this.getPoint(d),g.push(v.copy(d).clone());g.push(v.copy(this.points[h]).clone())}this.points=g}},THREE.Triangle=function(a,h,c){this.a=void 0!==a?a:new THREE.Vector3,this.b=void 0!==h?h:new THREE.Vector3,this.c=void 0!==c?c:new THREE.Vector3},THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(h,c,d,e){return e=e||new THREE.Vector3,e.subVectors(d,c),a.subVectors(h,c),e.cross(a),h=e.lengthSq(),h>0?e.multiplyScalar(1/Math.sqrt(h)):e.set(0,0,0)}}(),THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,E,g){a.subVectors(E,e),h.subVectors(f,e),c.subVectors(d,e),d=a.dot(a),e=a.dot(h),f=a.dot(c);var v=h.dot(h);E=h.dot(c);var l=d*v-e*e;return g=g||new THREE.Vector3,0===l?g.set(-2,-1,-1):(l=1/l,v=(v*f-e*E)*l,d=(d*E-e*f)*l,g.set(1-v-d,d,v))}}(),THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(h,c,d,e){return h=THREE.Triangle.barycoordFromPoint(h,c,d,e,a),0<=h.x&&0<=h.y&&1>=h.x+h.y}}(),THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,h,c){return this.a.copy(a),this.b.copy(h),this.c.copy(c),this},setFromPointsAndIndices:function(a,h,c,d){return this.a.copy(a[h]),this.b.copy(a[c]),this.c.copy(a[d]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.a.copy(a.a),this.b.copy(a.b),this.c.copy(a.c),this},area:function(){var a=new THREE.Vector3,h=new THREE.Vector3;return function(){return a.subVectors(this.c,this.b),h.subVectors(this.a,this.b),.5*a.cross(h).length()}}(),midpoint:function(a){return(a||new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,h){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,h)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}},THREE.Interpolant=function(a,h,c,d){this.parameterPositions=a,this._cachedIndex=0,this.resultBuffer=void 0!==d?d:new h.constructor(c),this.sampleValues=h,this.valueSize=c},THREE.Interpolant.prototype={constructor:THREE.Interpolant,evaluate:function(a){var h=this.parameterPositions,c=this._cachedIndex,d=h[c],e=h[c-1];e:{t:{i:{r:if(!(d>a)){for(var f=c+2;;){if(void 0===d){if(e>a)break r;return this._cachedIndex=c=h.length,this.afterEnd_(c-1,a,e)}if(c===f)break;if(e=d,d=h[++c],d>a)break t}d=h.length;break i}if(a>=e)break e;for(f=h[1],f>a&&(c=2,e=f),f=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===f)break;if(d=e,e=h[--c-1],a>=e)break t}d=c,c=0}for(;d>c;)e=c+d>>>1,a<h[e]?d=e:c=e+1;if(d=h[c],e=h[c-1],void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(void 0===d)return this._cachedIndex=c=h.length,this.afterEnd_(c-1,e,a)}this._cachedIndex=c,this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(a){var h=this.resultBuffer,c=this.sampleValues,d=this.valueSize;a*=d;for(var e=0;e!==d;++e)h[e]=c[a+e];return h},interpolate_:function(a,h,c,d){throw Error("call to abstract method")},intervalChanged_:function(a,h,c){}},Object.assign(THREE.Interpolant.prototype,{beforeStart_:THREE.Interpolant.prototype.copySampleValue_,afterEnd_:THREE.Interpolant.prototype.copySampleValue_}),THREE.CubicInterpolant=function(a,h,c,d){THREE.Interpolant.call(this,a,h,c,d),this._offsetNext=this._weightNext=this._offsetPrev=this._weightPrev=-0},THREE.CubicInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.CubicInterpolant,DefaultSettings_:{endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},intervalChanged_:function(a,h,c){var d=this.parameterPositions,e=a-2,f=a+1,E=d[e],g=d[f];if(void 0===E)switch(this.getSettings_().endingStart){case THREE.ZeroSlopeEnding:e=a,E=2*h-c;break;case THREE.WrapAroundEnding:e=d.length-2,E=h+d[e]-d[e+1];break;default:e=a,E=c}if(void 0===g)switch(this.getSettings_().endingEnd){case THREE.ZeroSlopeEnding:f=a,g=2*c-h;break;case THREE.WrapAroundEnding:f=1,g=c+d[1]-d[0];break;default:f=a-1,g=h}a=.5*(c-h),d=this.valueSize,this._weightPrev=a/(h-E),this._weightNext=a/(g-c),this._offsetPrev=e*d,this._offsetNext=f*d},interpolate_:function(a,h,c,d){var e=this.resultBuffer,f=this.sampleValues,E=this.valueSize;a*=E;var g=a-E,v=this._offsetPrev,l=this._offsetNext,p=this._weightPrev,n=this._weightNext,m=(c-h)/(d-h);for(c=m*m,d=c*m,h=-p*d+2*p*c-p*m,p=(1+p)*d+(-1.5-2*p)*c+(-.5+p)*m+1,m=(-1-n)*d+(1.5+n)*c+.5*m,n=n*d-n*c,c=0;c!==E;++c)e[c]=h*f[v+c]+p*f[g+c]+m*f[a+c]+n*f[l+c];return e}}),THREE.DiscreteInterpolant=function(a,h,c,d){THREE.Interpolant.call(this,a,h,c,d)},THREE.DiscreteInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.DiscreteInterpolant,interpolate_:function(a,h,c,d){return this.copySampleValue_(a-1)}}),THREE.LinearInterpolant=function(a,h,c,d){THREE.Interpolant.call(this,a,h,c,d)},THREE.LinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.LinearInterpolant,interpolate_:function(a,h,c,d){var e=this.resultBuffer,f=this.sampleValues,E=this.valueSize;a*=E;var g=a-E;for(h=(c-h)/(d-h),c=1-h,d=0;d!==E;++d)e[d]=f[g+d]*c+f[a+d]*h;return e}}),THREE.QuaternionLinearInterpolant=function(a,h,c,d){THREE.Interpolant.call(this,a,h,c,d)},THREE.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.QuaternionLinearInterpolant,interpolate_:function(a,h,c,d){var e=this.resultBuffer,f=this.sampleValues,E=this.valueSize;for(a*=E,h=(c-h)/(d-h),c=a+E;a!==c;a+=4)THREE.Quaternion.slerpFlat(e,0,f,a-E,f,a,h);return e}}),THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0,this.elapsedTime=this.oldTime=this.startTime=0,this.running=!1},THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=performance.now(),this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var a=0;if(this.autoStart&&!this.running&&this.start(),this.running){var h=performance.now(),a=.001*(h-this.oldTime);this.oldTime=h,this.elapsedTime+=a}return a}},THREE.EventDispatcher=function(){},THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(a){a.addEventListener=THREE.EventDispatcher.prototype.addEventListener,a.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener,a.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener,a.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(a,h){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]),-1===c[a].indexOf(h)&&c[a].push(h)},hasEventListener:function(a,h){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(h)?!0:!1},removeEventListener:function(a,h){if(void 0!==this._listeners){var c=this._listeners[a];if(void 0!==c){var d=c.indexOf(h);-1!==d&&c.splice(d,1)}}},dispatchEvent:function(a){if(void 0!==this._listeners){var h=this._listeners[a.type];if(void 0!==h){a.target=this;for(var c=[],d=h.length,e=0;d>e;e++)c[e]=h[e];for(e=0;d>e;e++)c[e].call(this,a)}}}},THREE.Layers=function(){this.mask=1},THREE.Layers.prototype={constructor:THREE.Layers,set:function(a){this.mask=1<<a},enable:function(a){this.mask|=1<<a},toggle:function(a){this.mask^=1<<a},disable:function(a){this.mask&=~(1<<a)},test:function(a){return 0!==(this.mask&a.mask)}},function(a){function h(a,h){return a.distance-h.distance}function c(a,h,f,E){if(!1!==a.visible&&(a.raycast(h,f),!0===E)){a=a.children,E=0;for(var g=a.length;g>E;E++)c(a[E],h,f,!0)}}a.Raycaster=function(h,c,f,E){this.ray=new a.Ray(h,c),this.near=f||0,this.far=E||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return this.Points}}})},a.Raycaster.prototype={constructor:a.Raycaster,linePrecision:1,set:function(a,h){this.ray.set(a,h)},setFromCamera:function(h,c){c instanceof a.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(c.matrixWorld),this.ray.direction.set(h.x,h.y,.5).unproject(c).sub(this.ray.origin).normalize()):c instanceof a.OrthographicCamera?(this.ray.origin.set(h.x,h.y,-1).unproject(c),this.ray.direction.set(0,0,-1).transformDirection(c.matrixWorld)):void 0},intersectObject:function(a,e){var f=[];return c(a,this,f,e),f.sort(h),f},intersectObjects:function(a,e){var f=[];if(!1===Array.isArray(a))return f;for(var E=0,g=a.length;g>E;E++)c(a[E],this,f,e);return f.sort(h),f}}}(THREE),THREE.Object3D=function(){Object.defineProperty(this,"id",{value:THREE.Object3DIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=THREE.Object3D.DefaultUp.clone();var a=new THREE.Vector3,h=new THREE.Euler,c=new THREE.Quaternion,d=new THREE.Vector3(1,1,1);h.onChange(function(){c.setFromEuler(h,!1)}),c.onChange(function(){h.setFromQuaternion(c,void 0,!1)}),Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,value:h},quaternion:{enumerable:!0,value:c},scale:{enumerable:!0,value:d},modelViewMatrix:{value:new THREE.Matrix4},normalMatrix:{value:new THREE.Matrix3}}),this.rotationAutoUpdate=!0,this.matrix=new THREE.Matrix4,this.matrixWorld=new THREE.Matrix4,this.matrixAutoUpdate=THREE.Object3D.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new THREE.Layers,this.visible=!0,this.receiveShadow=this.castShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}},THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0),THREE.Object3D.DefaultMatrixAutoUpdate=!0,THREE.Object3D.prototype={constructor:THREE.Object3D,applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,h){this.quaternion.setFromAxisAngle(a,h)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new THREE.Quaternion;return function(h,c){return a.setFromAxisAngle(h,c),this.quaternion.multiply(a),this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(h){return this.rotateOnAxis(a,h)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(h){return this.rotateOnAxis(a,h)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(h){return this.rotateOnAxis(a,h)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(h,c){return a.copy(h).applyQuaternion(this.quaternion),this.position.add(a.multiplyScalar(c)),this}}(),translateX:function(){var a=new THREE.Vector3(1,0,0);return function(h){return this.translateOnAxis(a,h)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(h){return this.translateOnAxis(a,h)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(h){return this.translateOnAxis(a,h)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(h){return h.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(h){a.lookAt(h,this.position,this.up),this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(1<arguments.length){for(var h=0;h<arguments.length;h++)this.add(arguments[h]);return this}return a===this?this:(a instanceof THREE.Object3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:"added"}),this.children.push(a)):void 0,this)},remove:function(a){if(1<arguments.length)for(var h=0;h<arguments.length;h++)this.remove(arguments[h]);h=this.children.indexOf(a),-1!==h&&(a.parent=null,a.dispatchEvent({type:"removed"}),this.children.splice(h,1))},getObjectById:function(a){return this.getObjectByProperty("id",a)},getObjectByName:function(a){return this.getObjectByProperty("name",a)},getObjectByProperty:function(a,h){if(this[a]===h)return this;for(var c=0,d=this.children.length;d>c;c++){var e=this.children[c].getObjectByProperty(a,h);if(void 0!==e)return e}},getWorldPosition:function(a){return a=a||new THREE.Vector3,this.updateMatrixWorld(!0),a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=new THREE.Vector3,h=new THREE.Vector3;return function(c){return c=c||new THREE.Quaternion,this.updateMatrixWorld(!0),this.matrixWorld.decompose(a,c,h),c}}(),getWorldRotation:function(){var a=new THREE.Quaternion;return function(h){return h=h||new THREE.Euler,this.getWorldQuaternion(a),h.setFromQuaternion(a,this.rotation.order,!1)}}(),getWorldScale:function(){var a=new THREE.Vector3,h=new THREE.Quaternion;return function(c){return c=c||new THREE.Vector3,this.updateMatrixWorld(!0),this.matrixWorld.decompose(a,h,c),c}}(),getWorldDirection:function(){var a=new THREE.Quaternion;return function(h){return h=h||new THREE.Vector3,this.getWorldQuaternion(a),h.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var h=this.children,c=0,d=h.length;d>c;c++)h[c].traverse(a)},traverseVisible:function(a){if(!1!==this.visible){a(this);for(var h=this.children,c=0,d=h.length;d>c;c++)h[c].traverseVisible(a)}},traverseAncestors:function(a){var h=this.parent;null!==h&&(a(h),h.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix(),(!0===this.matrixWorldNeedsUpdate||!0===a)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0);for(var h=0,c=this.children.length;c>h;h++)this.children[h].updateMatrixWorld(a)},toJSON:function(a){function h(a){var h=[],c;for(c in a){var d=a[c];delete d.metadata,h.push(d)}return h}var c=void 0===a,d={};c&&(a={geometries:{},materials:{},textures:{},images:{}},d.metadata={version:4.4,type:"Object",generator:"Object3D.toJSON"});var e={};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),"{}"!==JSON.stringify(this.userData)&&(e.userData=this.userData),!0===this.castShadow&&(e.castShadow=!0),!0===this.receiveShadow&&(e.receiveShadow=!0),!1===this.visible&&(e.visible=!1),e.matrix=this.matrix.toArray(),void 0!==this.geometry&&(void 0===a.geometries[this.geometry.uuid]&&(a.geometries[this.geometry.uuid]=this.geometry.toJSON(a)),e.geometry=this.geometry.uuid),void 0!==this.material&&(void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON(a)),e.material=this.material.uuid),0<this.children.length){e.children=[];for(var f=0;f<this.children.length;f++)e.children.push(this.children[f].toJSON(a).object)}if(c){var c=h(a.geometries),f=h(a.materials),E=h(a.textures);a=h(a.images),0<c.length&&(d.geometries=c),0<f.length&&(d.materials=f),0<E.length&&(d.textures=E),0<a.length&&(d.images=a)}return d.object=e,d},clone:function(a){return(new this.constructor).copy(this,a)},copy:function(a,h){if(void 0===h&&(h=!0),this.name=a.name,this.up.copy(a.up),this.position.copy(a.position),this.quaternion.copy(a.quaternion),this.scale.copy(a.scale),this.rotationAutoUpdate=a.rotationAutoUpdate,this.matrix.copy(a.matrix),this.matrixWorld.copy(a.matrixWorld),this.matrixAutoUpdate=a.matrixAutoUpdate,this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate,this.visible=a.visible,this.castShadow=a.castShadow,this.receiveShadow=a.receiveShadow,this.frustumCulled=a.frustumCulled,this.renderOrder=a.renderOrder,this.userData=JSON.parse(JSON.stringify(a.userData)),!0===h)for(var c=0;c<a.children.length;c++)this.add(a.children[c].clone());return this}},THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype),THREE.Object3DIdCount=0,THREE.Face3=function(a,h,c,d,e,f){this.a=a,this.b=h,this.c=c,this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3,this.vertexNormals=Array.isArray(d)?d:[],this.color=e instanceof THREE.Color?e:new THREE.Color,this.vertexColors=Array.isArray(e)?e:[],this.materialIndex=void 0!==f?f:0},THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a=a.a,this.b=a.b,this.c=a.c,this.normal.copy(a.normal),this.color.copy(a.color),this.materialIndex=a.materialIndex;for(var h=0,c=a.vertexNormals.length;c>h;h++)this.vertexNormals[h]=a.vertexNormals[h].clone();for(h=0,c=a.vertexColors.length;c>h;h++)this.vertexColors[h]=a.vertexColors[h].clone();return this}},THREE.BufferAttribute=function(a,h){this.uuid=THREE.Math.generateUUID(),this.array=a,this.itemSize=h,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0},THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(a){!0===a&&this.version++},setDynamic:function(a){return this.dynamic=a,this},copy:function(a){return this.array=new a.array.constructor(a.array),this.itemSize=a.itemSize,this.dynamic=a.dynamic,this},copyAt:function(a,h,c){a*=this.itemSize,c*=h.itemSize;for(var d=0,e=this.itemSize;e>d;d++)this.array[a+d]=h.array[c+d];return this},copyArray:function(a){return this.array.set(a),this},copyColorsArray:function(a){for(var h=this.array,c=0,d=0,e=a.length;e>d;d++){var f=a[d];void 0===f&&(f=new THREE.Color),h[c++]=f.r,h[c++]=f.g,h[c++]=f.b}return this},copyIndicesArray:function(a){for(var h=this.array,c=0,d=0,e=a.length;e>d;d++){var f=a[d];h[c++]=f.a,h[c++]=f.b,h[c++]=f.c}return this},copyVector2sArray:function(a){for(var h=this.array,c=0,d=0,e=a.length;e>d;d++){var f=a[d];void 0===f&&(f=new THREE.Vector2),h[c++]=f.x,h[c++]=f.y}return this},copyVector3sArray:function(a){for(var h=this.array,c=0,d=0,e=a.length;e>d;d++){var f=a[d];void 0===f&&(f=new THREE.Vector3),h[c++]=f.x,h[c++]=f.y,h[c++]=f.z}return this},copyVector4sArray:function(a){for(var h=this.array,c=0,d=0,e=a.length;e>d;d++){var f=a[d];void 0===f&&(f=new THREE.Vector4),h[c++]=f.x,h[c++]=f.y,h[c++]=f.z,h[c++]=f.w}return this},set:function(a,h){return void 0===h&&(h=0),this.array.set(a,h),this},getX:function(a){return this.array[a*this.itemSize]},setX:function(a,h){return this.array[a*this.itemSize]=h,this},getY:function(a){return this.array[a*this.itemSize+1]},setY:function(a,h){return this.array[a*this.itemSize+1]=h,this},getZ:function(a){return this.array[a*this.itemSize+2]},setZ:function(a,h){return this.array[a*this.itemSize+2]=h,this},getW:function(a){return this.array[a*this.itemSize+3]},setW:function(a,h){return this.array[a*this.itemSize+3]=h,this},setXY:function(a,h,c){return a*=this.itemSize,this.array[a+0]=h,this.array[a+1]=c,this},setXYZ:function(a,h,c,d){return a*=this.itemSize,this.array[a+0]=h,this.array[a+1]=c,this.array[a+2]=d,this},setXYZW:function(a,h,c,d,e){return a*=this.itemSize,this.array[a+0]=h,this.array[a+1]=c,this.array[a+2]=d,this.array[a+3]=e,this},clone:function(){return(new this.constructor).copy(this)}},THREE.Int8Attribute=function(a,h){return new THREE.BufferAttribute(new Int8Array(a),h)},THREE.Uint8Attribute=function(a,h){return new THREE.BufferAttribute(new Uint8Array(a),h)},THREE.Uint8ClampedAttribute=function(a,h){return new THREE.BufferAttribute(new Uint8ClampedArray(a),h)},THREE.Int16Attribute=function(a,h){return new THREE.BufferAttribute(new Int16Array(a),h)},THREE.Uint16Attribute=function(a,h){return new THREE.BufferAttribute(new Uint16Array(a),h)},THREE.Int32Attribute=function(a,h){return new THREE.BufferAttribute(new Int32Array(a),h)},THREE.Uint32Attribute=function(a,h){return new THREE.BufferAttribute(new Uint32Array(a),h)},THREE.Float32Attribute=function(a,h){return new THREE.BufferAttribute(new Float32Array(a),h)},THREE.Float64Attribute=function(a,h){return new THREE.BufferAttribute(new Float64Array(a),h)},THREE.DynamicBufferAttribute=function(a,h){return new THREE.BufferAttribute(a,h).setDynamic(!0)},THREE.InstancedBufferAttribute=function(a,h,c){THREE.BufferAttribute.call(this,a,h),this.meshPerAttribute=c||1},THREE.InstancedBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype),THREE.InstancedBufferAttribute.prototype.constructor=THREE.InstancedBufferAttribute,THREE.InstancedBufferAttribute.prototype.copy=function(a){return THREE.BufferAttribute.prototype.copy.call(this,a),this.meshPerAttribute=a.meshPerAttribute,this},THREE.InterleavedBuffer=function(a,h){this.uuid=THREE.Math.generateUUID(),this.array=a,this.stride=h,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0},THREE.InterleavedBuffer.prototype={constructor:THREE.InterleavedBuffer,get length(){return this.array.length},get count(){return this.array.length/this.stride},set needsUpdate(a){!0===a&&this.version++},setDynamic:function(a){return this.dynamic=a,this},copy:function(a){return this.array=new a.array.constructor(a.array),this.stride=a.stride,this.dynamic=a.dynamic,this},copyAt:function(a,h,c){a*=this.stride,c*=h.stride;for(var d=0,e=this.stride;e>d;d++)this.array[a+d]=h.array[c+d];return this},set:function(a,h){return void 0===h&&(h=0),this.array.set(a,h),this},clone:function(){return(new this.constructor).copy(this)}},THREE.InstancedInterleavedBuffer=function(a,h,c){THREE.InterleavedBuffer.call(this,a,h),this.meshPerAttribute=c||1},THREE.InstancedInterleavedBuffer.prototype=Object.create(THREE.InterleavedBuffer.prototype),THREE.InstancedInterleavedBuffer.prototype.constructor=THREE.InstancedInterleavedBuffer,THREE.InstancedInterleavedBuffer.prototype.copy=function(a){return THREE.InterleavedBuffer.prototype.copy.call(this,a),this.meshPerAttribute=a.meshPerAttribute,this},THREE.InterleavedBufferAttribute=function(a,h,c){this.uuid=THREE.Math.generateUUID(),this.data=a,this.itemSize=h,this.offset=c},THREE.InterleavedBufferAttribute.prototype={constructor:THREE.InterleavedBufferAttribute,get length(){return this.array.length},get count(){return this.data.count},setX:function(a,h){return this.data.array[a*this.data.stride+this.offset]=h,this},setY:function(a,h){return this.data.array[a*this.data.stride+this.offset+1]=h,this},setZ:function(a,h){return this.data.array[a*this.data.stride+this.offset+2]=h,this},setW:function(a,h){return this.data.array[a*this.data.stride+this.offset+3]=h,this},getX:function(a){return this.data.array[a*this.data.stride+this.offset]},getY:function(a){return this.data.array[a*this.data.stride+this.offset+1]},getZ:function(a){return this.data.array[a*this.data.stride+this.offset+2]},getW:function(a){return this.data.array[a*this.data.stride+this.offset+3]},setXY:function(a,h,c){return a=a*this.data.stride+this.offset,this.data.array[a+0]=h,this.data.array[a+1]=c,this},setXYZ:function(a,h,c,d){return a=a*this.data.stride+this.offset,this.data.array[a+0]=h,this.data.array[a+1]=c,this.data.array[a+2]=d,this},setXYZW:function(a,h,c,d,e){return a=a*this.data.stride+this.offset,this.data.array[a+0]=h,this.data.array[a+1]=c,this.data.array[a+2]=d,this.data.array[a+3]=e,this}},THREE.Geometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingSphere=this.boundingBox=null,this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1},THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var h=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;d>c;c++)this.vertices[c].applyMatrix4(a);for(c=0,d=this.faces.length;d>c;c++){a=this.faces[c],a.normal.applyMatrix3(h).normalize();for(var e=0,f=a.vertexNormals.length;f>e;e++)a.vertexNormals[e].applyMatrix3(h).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.normalsNeedUpdate=this.verticesNeedUpdate=!0,this},rotateX:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.makeRotationX(h),this.applyMatrix(a),this}}(),rotateY:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.makeRotationY(h),this.applyMatrix(a),this}}(),rotateZ:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.makeRotationZ(h),this.applyMatrix(a),this}}(),translate:function(){var a;return function(h,c,d){return void 0===a&&(a=new THREE.Matrix4),a.makeTranslation(h,c,d),this.applyMatrix(a),this}}(),scale:function(){var a;return function(h,c,d){return void 0===a&&(a=new THREE.Matrix4),a.makeScale(h,c,d),this.applyMatrix(a),this}}(),lookAt:function(){var a;return function(h){void 0===a&&(a=new THREE.Object3D),a.lookAt(h),a.updateMatrix(),this.applyMatrix(a.matrix)}}(),fromBufferGeometry:function(a){function h(a,h,d,e){var f=void 0!==E?[p[a].clone(),p[h].clone(),p[d].clone()]:[],q=void 0!==g?[c.colors[a].clone(),c.colors[h].clone(),c.colors[d].clone()]:[];e=new THREE.Face3(a,h,d,f,q,e),c.faces.push(e),void 0!==v&&c.faceVertexUvs[0].push([n[a].clone(),n[h].clone(),n[d].clone()]),void 0!==l&&c.faceVertexUvs[1].push([m[a].clone(),m[h].clone(),m[d].clone()])}var c=this,d=null!==a.index?a.index.array:void 0,e=a.attributes,f=e.position.array,E=void 0!==e.normal?e.normal.array:void 0,g=void 0!==e.color?e.color.array:void 0,v=void 0!==e.uv?e.uv.array:void 0,l=void 0!==e.uv2?e.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=[]);for(var p=[],n=[],m=[],q=e=0;e<f.length;e+=3,q+=2)c.vertices.push(new THREE.Vector3(f[e],f[e+1],f[e+2])),void 0!==E&&p.push(new THREE.Vector3(E[e],E[e+1],E[e+2])),void 0!==g&&c.colors.push(new THREE.Color(g[e],g[e+1],g[e+2])),void 0!==v&&n.push(new THREE.Vector2(v[q],v[q+1])),void 0!==l&&m.push(new THREE.Vector2(l[q],l[q+1]));if(void 0!==d)if(f=a.groups,0<f.length)for(e=0;e<f.length;e++)for(var u=f[e],T=u.start,t=u.count,q=T,T=T+t;T>q;q+=3)h(d[q],d[q+1],d[q+2],u.materialIndex);else for(e=0;e<d.length;e+=3)h(d[e],d[e+1],d[e+2]);else for(e=0;e<f.length/3;e+=3)h(e,e+1,e+2);return this.computeFaceNormals(),null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone()),null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();return this.translate(a.x,a.y,a.z),a},normalize:function(){this.computeBoundingSphere();var a=this.boundingSphere.center,h=this.boundingSphere.radius,h=0===h?1:1/h,c=new THREE.Matrix4;
return c.set(h,0,0,-h*a.x,0,h,0,-h*a.y,0,0,h,-h*a.z,0,0,0,1),this.applyMatrix(c),this},computeFaceNormals:function(){for(var a=new THREE.Vector3,h=new THREE.Vector3,c=0,d=this.faces.length;d>c;c++){var e=this.faces[c],f=this.vertices[e.a],E=this.vertices[e.b];a.subVectors(this.vertices[e.c],E),h.subVectors(f,E),a.cross(h),a.normalize(),e.normal.copy(a)}},computeVertexNormals:function(a){void 0===a&&(a=!0);var h,c,d;for(d=Array(this.vertices.length),h=0,c=this.vertices.length;c>h;h++)d[h]=new THREE.Vector3;if(a){var e,f,E,g=new THREE.Vector3,v=new THREE.Vector3;for(a=0,h=this.faces.length;h>a;a++)c=this.faces[a],e=this.vertices[c.a],f=this.vertices[c.b],E=this.vertices[c.c],g.subVectors(E,f),v.subVectors(e,f),g.cross(v),d[c.a].add(g),d[c.b].add(g),d[c.c].add(g)}else for(a=0,h=this.faces.length;h>a;a++)c=this.faces[a],d[c.a].add(c.normal),d[c.b].add(c.normal),d[c.c].add(c.normal);for(h=0,c=this.vertices.length;c>h;h++)d[h].normalize();for(a=0,h=this.faces.length;h>a;a++)c=this.faces[a],e=c.vertexNormals,3===e.length?(e[0].copy(d[c.a]),e[1].copy(d[c.b]),e[2].copy(d[c.c])):(e[0]=d[c.a].clone(),e[1]=d[c.b].clone(),e[2]=d[c.c].clone());0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var a,h,c,d,e;for(c=0,d=this.faces.length;d>c;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone(),e.__originalVertexNormals||(e.__originalVertexNormals=[]),a=0,h=e.vertexNormals.length;h>a;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;for(f.faces=this.faces,a=0,h=this.morphTargets.length;h>a;a++){if(!this.morphNormals[a]){this.morphNormals[a]={},this.morphNormals[a].faceNormals=[],this.morphNormals[a].vertexNormals=[],e=this.morphNormals[a].faceNormals;var E=this.morphNormals[a].vertexNormals,g,v;for(c=0,d=this.faces.length;d>c;c++)g=new THREE.Vector3,v={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},e.push(g),E.push(v)}for(E=this.morphNormals[a],f.vertices=this.morphTargets[a].vertices,f.computeFaceNormals(),f.computeVertexNormals(),c=0,d=this.faces.length;d>c;c++)e=this.faces[c],g=E.faceNormals[c],v=E.vertexNormals[c],g.copy(e.normal),v.a.copy(e.vertexNormals[0]),v.b.copy(e.vertexNormals[1]),v.c.copy(e.vertexNormals[2])}for(c=0,d=this.faces.length;d>c;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){},computeLineDistances:function(){for(var a=0,h=this.vertices,c=0,d=h.length;d>c;c++)c>0&&(a+=h[c].distanceTo(h[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere),this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,h,c){if(!1==a instanceof THREE.Geometry);else{var d,e=this.vertices.length,f=this.vertices,E=a.vertices,g=this.faces,v=a.faces,l=this.faceVertexUvs[0];a=a.faceVertexUvs[0],void 0===c&&(c=0),void 0!==h&&(d=(new THREE.Matrix3).getNormalMatrix(h));for(var p=0,n=E.length;n>p;p++){var m=E[p].clone();void 0!==h&&m.applyMatrix4(h),f.push(m)}for(p=0,n=v.length;n>p;p++){var E=v[p],q,u=E.vertexNormals,T=E.vertexColors,m=new THREE.Face3(E.a+e,E.b+e,E.c+e);for(m.normal.copy(E.normal),void 0!==d&&m.normal.applyMatrix3(d).normalize(),h=0,f=u.length;f>h;h++)q=u[h].clone(),void 0!==d&&q.applyMatrix3(d).normalize(),m.vertexNormals.push(q);for(m.color.copy(E.color),h=0,f=T.length;f>h;h++)q=T[h],m.vertexColors.push(q.clone());m.materialIndex=E.materialIndex+c,g.push(m)}for(p=0,n=a.length;n>p;p++)if(c=a[p],d=[],void 0!==c){for(h=0,f=c.length;f>h;h++)d.push(c[h].clone());l.push(d)}}},mergeMesh:function(a){!1==a instanceof THREE.Mesh?void 0:(a.matrixAutoUpdate&&a.updateMatrix(),this.merge(a.geometry,a.matrix))},mergeVertices:function(){var a={},h=[],c=[],d,e=Math.pow(10,4),f,E;for(f=0,E=this.vertices.length;E>f;f++)d=this.vertices[f],d=Math.round(d.x*e)+"_"+Math.round(d.y*e)+"_"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,h.push(this.vertices[f]),c[f]=h.length-1):c[f]=c[a[d]];for(a=[],f=0,E=this.faces.length;E>f;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]===e[(d+1)%3]){a.push(f);break}for(f=a.length-1;f>=0;f--)for(e=a[f],this.faces.splice(e,1),c=0,E=this.faceVertexUvs.length;E>c;c++)this.faceVertexUvs[c].splice(e,1);return f=this.vertices.length-h.length,this.vertices=h,f},sortFacesByMaterialIndex:function(){for(var a=this.faces,h=a.length,c=0;h>c;c++)a[c]._id=c;a.sort(function(a,h){return a.materialIndex-h.materialIndex});var d=this.faceVertexUvs[0],e=this.faceVertexUvs[1],f,E;for(d&&d.length===h&&(f=[]),e&&e.length===h&&(E=[]),c=0;h>c;c++){var g=a[c]._id;f&&f.push(d[g]),E&&E.push(e[g])}f&&(this.faceVertexUvs[0]=f),E&&(this.faceVertexUvs[1]=E)},toJSON:function(){function a(a,h,c){return c?a|1<<h:a&~(1<<h)}function h(a){var h=a.x.toString()+a.y.toString()+a.z.toString();return void 0!==l[h]?l[h]:(l[h]=v.length/3,v.push(a.x,a.y,a.z),l[h])}function c(a){var h=a.r.toString()+a.g.toString()+a.b.toString();return void 0!==n[h]?n[h]:(n[h]=p.length,p.push(a.getHex()),n[h])}function d(a){var h=a.x.toString()+a.y.toString();return void 0!==q[h]?q[h]:(q[h]=m.length/2,m.push(a.x,a.y),q[h])}var e={metadata:{version:4.4,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var f=this.parameters,E;for(E in f)void 0!==f[E]&&(e[E]=f[E]);return e}for(f=[],E=0;E<this.vertices.length;E++){var g=this.vertices[E];f.push(g.x,g.y,g.z)}var g=[],v=[],l={},p=[],n={},m=[],q={};for(E=0;E<this.faces.length;E++){var u=this.faces[E],T=void 0!==this.faceVertexUvs[0][E],t=0<u.normal.length(),s=0<u.vertexNormals.length,y=1!==u.color.r||1!==u.color.g||1!==u.color.b,R=0<u.vertexColors.length,x=0,x=a(x,0,0),x=a(x,1,!0),x=a(x,2,!1),x=a(x,3,T),x=a(x,4,t),x=a(x,5,s),x=a(x,6,y),x=a(x,7,R);g.push(x),g.push(u.a,u.b,u.c),g.push(u.materialIndex),T&&(T=this.faceVertexUvs[0][E],g.push(d(T[0]),d(T[1]),d(T[2]))),t&&g.push(h(u.normal)),s&&(t=u.vertexNormals,g.push(h(t[0]),h(t[1]),h(t[2]))),y&&g.push(c(u.color)),R&&(u=u.vertexColors,g.push(c(u[0]),c(u[1]),c(u[2])))}return e.data={},e.data.vertices=f,e.data.normals=v,0<p.length&&(e.data.colors=p),0<m.length&&(e.data.uvs=[m]),e.data.faces=g,e},clone:function(){return(new THREE.Geometry).copy(this)},copy:function(a){this.vertices=[],this.faces=[],this.faceVertexUvs=[[]];for(var h=a.vertices,c=0,d=h.length;d>c;c++)this.vertices.push(h[c].clone());for(h=a.faces,c=0,d=h.length;d>c;c++)this.faces.push(h[c].clone());for(c=0,d=a.faceVertexUvs.length;d>c;c++){h=a.faceVertexUvs[c],void 0===this.faceVertexUvs[c]&&(this.faceVertexUvs[c]=[]);for(var e=0,f=h.length;f>e;e++){for(var E=h[e],g=[],v=0,l=E.length;l>v;v++)g.push(E[v].clone());this.faceVertexUvs[c].push(g)}}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype),THREE.GeometryIdCount=0,THREE.DirectGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="DirectGeometry",this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingSphere=this.boundingBox=null,this.groupsNeedUpdate=this.uvsNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.verticesNeedUpdate=!1},THREE.DirectGeometry.prototype={constructor:THREE.DirectGeometry,computeBoundingBox:THREE.Geometry.prototype.computeBoundingBox,computeBoundingSphere:THREE.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){},computeVertexNormals:function(){},computeGroups:function(a){var h,c=[],d;a=a.faces;for(var e=0;e<a.length;e++){var f=a[e];f.materialIndex!==d&&(d=f.materialIndex,void 0!==h&&(h.count=3*e-h.start,c.push(h)),h={start:3*e,materialIndex:d})}void 0!==h&&(h.count=3*e-h.start,c.push(h)),this.groups=c},fromGeometry:function(a){var h=a.faces,c=a.vertices,d=a.faceVertexUvs,e=d[0]&&0<d[0].length,f=d[1]&&0<d[1].length,E=a.morphTargets,g=E.length,v;if(g>0){v=[];for(var l=0;g>l;l++)v[l]=[];this.morphTargets.position=v}var p=a.morphNormals,n=p.length,m;if(n>0){for(m=[],l=0;n>l;l++)m[l]=[];this.morphTargets.normal=m}for(var q=a.skinIndices,u=a.skinWeights,T=q.length===c.length,t=u.length===c.length,l=0;l<h.length;l++){var s=h[l];this.vertices.push(c[s.a],c[s.b],c[s.c]);var y=s.vertexNormals;for(3===y.length?this.normals.push(y[0],y[1],y[2]):(y=s.normal,this.normals.push(y,y,y)),y=s.vertexColors,3===y.length?this.colors.push(y[0],y[1],y[2]):(y=s.color,this.colors.push(y,y,y)),!0===e&&(y=d[0][l],void 0!==y?this.uvs.push(y[0],y[1],y[2]):this.uvs.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)),!0===f&&(y=d[1][l],void 0!==y?this.uvs2.push(y[0],y[1],y[2]):this.uvs2.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)),y=0;g>y;y++){var R=E[y].vertices;v[y].push(R[s.a],R[s.b],R[s.c])}for(y=0;n>y;y++)R=p[y].vertexNormals[l],m[y].push(R.a,R.b,R.c);T&&this.skinIndices.push(q[s.a],q[s.b],q[s.c]),t&&this.skinWeights.push(u[s.a],u[s.b],u[s.c])}return this.computeGroups(a),this.verticesNeedUpdate=a.verticesNeedUpdate,this.normalsNeedUpdate=a.normalsNeedUpdate,this.colorsNeedUpdate=a.colorsNeedUpdate,this.uvsNeedUpdate=a.uvsNeedUpdate,this.groupsNeedUpdate=a.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.DirectGeometry.prototype),THREE.BufferGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingSphere=this.boundingBox=null,this.drawRange={start:0,count:1/0}},THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,getIndex:function(){return this.index},setIndex:function(a){this.index=a},addAttribute:function(a,h,c){if(!1==h instanceof THREE.BufferAttribute&&!1==h instanceof THREE.InterleavedBufferAttribute)this.addAttribute(a,new THREE.BufferAttribute(h,c));else{if("index"!==a)return this.attributes[a]=h,this;this.setIndex(h)}},getAttribute:function(a){return this.attributes[a]},removeAttribute:function(a){return delete this.attributes[a],this},addGroup:function(a,h,c){this.groups.push({start:a,count:h,materialIndex:void 0!==c?c:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(a,h){this.drawRange.start=a,this.drawRange.count=h},applyMatrix:function(a){var h=this.attributes.position;return void 0!==h&&(a.applyToVector3Array(h.array),h.needsUpdate=!0),h=this.attributes.normal,void 0!==h&&((new THREE.Matrix3).getNormalMatrix(a).applyToVector3Array(h.array),h.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.makeRotationX(h),this.applyMatrix(a),this}}(),rotateY:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.makeRotationY(h),this.applyMatrix(a),this}}(),rotateZ:function(){var a;return function(h){return void 0===a&&(a=new THREE.Matrix4),a.makeRotationZ(h),this.applyMatrix(a),this}}(),translate:function(){var a;return function(h,c,d){return void 0===a&&(a=new THREE.Matrix4),a.makeTranslation(h,c,d),this.applyMatrix(a),this}}(),scale:function(){var a;return function(h,c,d){return void 0===a&&(a=new THREE.Matrix4),a.makeScale(h,c,d),this.applyMatrix(a),this}}(),lookAt:function(){var a;return function(h){void 0===a&&(a=new THREE.Object3D),a.lookAt(h),a.updateMatrix(),this.applyMatrix(a.matrix)}}(),center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();return this.translate(a.x,a.y,a.z),a},setFromObject:function(a){var h=a.geometry;if(a instanceof THREE.Points||a instanceof THREE.Line){a=new THREE.Float32Attribute(3*h.vertices.length,3);var c=new THREE.Float32Attribute(3*h.colors.length,3);this.addAttribute("position",a.copyVector3sArray(h.vertices)),this.addAttribute("color",c.copyColorsArray(h.colors)),h.lineDistances&&h.lineDistances.length===h.vertices.length&&(a=new THREE.Float32Attribute(h.lineDistances.length,1),this.addAttribute("lineDistance",a.copyArray(h.lineDistances))),null!==h.boundingSphere&&(this.boundingSphere=h.boundingSphere.clone()),null!==h.boundingBox&&(this.boundingBox=h.boundingBox.clone())}else a instanceof THREE.Mesh&&h instanceof THREE.Geometry&&this.fromGeometry(h);return this},updateFromObject:function(a){var h=a.geometry;if(a instanceof THREE.Mesh){var c=h.__directGeometry;if(void 0===c)return this.fromGeometry(h);c.verticesNeedUpdate=h.verticesNeedUpdate,c.normalsNeedUpdate=h.normalsNeedUpdate,c.colorsNeedUpdate=h.colorsNeedUpdate,c.uvsNeedUpdate=h.uvsNeedUpdate,c.groupsNeedUpdate=h.groupsNeedUpdate,h.verticesNeedUpdate=!1,h.normalsNeedUpdate=!1,h.colorsNeedUpdate=!1,h.uvsNeedUpdate=!1,h.groupsNeedUpdate=!1,h=c}return!0===h.verticesNeedUpdate&&(c=this.attributes.position,void 0!==c&&(c.copyVector3sArray(h.vertices),c.needsUpdate=!0),h.verticesNeedUpdate=!1),!0===h.normalsNeedUpdate&&(c=this.attributes.normal,void 0!==c&&(c.copyVector3sArray(h.normals),c.needsUpdate=!0),h.normalsNeedUpdate=!1),!0===h.colorsNeedUpdate&&(c=this.attributes.color,void 0!==c&&(c.copyColorsArray(h.colors),c.needsUpdate=!0),h.colorsNeedUpdate=!1),h.uvsNeedUpdate&&(c=this.attributes.uv,void 0!==c&&(c.copyVector2sArray(h.uvs),c.needsUpdate=!0),h.uvsNeedUpdate=!1),h.lineDistancesNeedUpdate&&(c=this.attributes.lineDistance,void 0!==c&&(c.copyArray(h.lineDistances),c.needsUpdate=!0),h.lineDistancesNeedUpdate=!1),h.groupsNeedUpdate&&(h.computeGroups(a.geometry),this.groups=h.groups,h.groupsNeedUpdate=!1),this},fromGeometry:function(a){return a.__directGeometry=(new THREE.DirectGeometry).fromGeometry(a),this.fromDirectGeometry(a.__directGeometry)},fromDirectGeometry:function(a){var h=new Float32Array(3*a.vertices.length);this.addAttribute("position",new THREE.BufferAttribute(h,3).copyVector3sArray(a.vertices)),0<a.normals.length&&(h=new Float32Array(3*a.normals.length),this.addAttribute("normal",new THREE.BufferAttribute(h,3).copyVector3sArray(a.normals))),0<a.colors.length&&(h=new Float32Array(3*a.colors.length),this.addAttribute("color",new THREE.BufferAttribute(h,3).copyColorsArray(a.colors))),0<a.uvs.length&&(h=new Float32Array(2*a.uvs.length),this.addAttribute("uv",new THREE.BufferAttribute(h,2).copyVector2sArray(a.uvs))),0<a.uvs2.length&&(h=new Float32Array(2*a.uvs2.length),this.addAttribute("uv2",new THREE.BufferAttribute(h,2).copyVector2sArray(a.uvs2))),0<a.indices.length&&(h=new(65535<a.vertices.length?Uint32Array:Uint16Array)(3*a.indices.length),this.setIndex(new THREE.BufferAttribute(h,1).copyIndicesArray(a.indices))),this.groups=a.groups;for(var c in a.morphTargets){for(var h=[],d=a.morphTargets[c],e=0,f=d.length;f>e;e++){var E=d[e],g=new THREE.Float32Attribute(3*E.length,3);h.push(g.copyVector3sArray(E))}this.morphAttributes[c]=h}return 0<a.skinIndices.length&&(c=new THREE.Float32Attribute(4*a.skinIndices.length,4),this.addAttribute("skinIndex",c.copyVector4sArray(a.skinIndices))),0<a.skinWeights.length&&(c=new THREE.Float32Attribute(4*a.skinWeights.length,4),this.addAttribute("skinWeight",c.copyVector4sArray(a.skinWeights))),null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone()),null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone()),this},computeBoundingBox:function(){return new THREE.Vector3,function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var a=this.attributes.position.array;a&&this.boundingBox.setFromArray(a),(void 0===a||0===a.length)&&(this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&void 0}}(),computeBoundingSphere:function(){var a=new THREE.Box3,h=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){var d=this.boundingSphere.center;a.setFromArray(c),a.center(d);for(var e=0,f=0,E=c.length;E>f;f+=3)h.fromArray(c,f),e=Math.max(e,d.distanceToSquared(h));this.boundingSphere.radius=Math.sqrt(e),isNaN(this.boundingSphere.radius)&&void 0}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.index,h=this.attributes,c=this.groups;if(h.position){var d=h.position.array;if(void 0===h.normal)this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(d.length),3));else for(var e=h.normal.array,f=0,E=e.length;E>f;f++)e[f]=0;var e=h.normal.array,g,v,l,p=new THREE.Vector3,n=new THREE.Vector3,m=new THREE.Vector3,q=new THREE.Vector3,u=new THREE.Vector3;if(a){a=a.array,0===c.length&&this.addGroup(0,a.length);for(var T=0,t=c.length;t>T;++T)for(f=c[T],E=f.start,g=f.count,f=E,E+=g;E>f;f+=3)g=3*a[f+0],v=3*a[f+1],l=3*a[f+2],p.fromArray(d,g),n.fromArray(d,v),m.fromArray(d,l),q.subVectors(m,n),u.subVectors(p,n),q.cross(u),e[g]+=q.x,e[g+1]+=q.y,e[g+2]+=q.z,e[v]+=q.x,e[v+1]+=q.y,e[v+2]+=q.z,e[l]+=q.x,e[l+1]+=q.y,e[l+2]+=q.z}else for(f=0,E=d.length;E>f;f+=9)p.fromArray(d,f),n.fromArray(d,f+3),m.fromArray(d,f+6),q.subVectors(m,n),u.subVectors(p,n),q.cross(u),e[f]=q.x,e[f+1]=q.y,e[f+2]=q.z,e[f+3]=q.x,e[f+4]=q.y,e[f+5]=q.z,e[f+6]=q.x,e[f+7]=q.y,e[f+8]=q.z;this.normalizeNormals(),h.normal.needsUpdate=!0}},merge:function(a,h){if(!1!=a instanceof THREE.BufferGeometry){void 0===h&&(h=0);var c=this.attributes,d;for(d in c)if(void 0!==a.attributes[d])for(var e=c[d].array,f=a.attributes[d],E=f.array,g=0,f=f.itemSize*h;g<E.length;g++,f++)e[f]=E[g];return this}},normalizeNormals:function(){for(var a=this.attributes.normal.array,h,c,d,e=0,f=a.length;f>e;e+=3)h=a[e],c=a[e+1],d=a[e+2],h=1/Math.sqrt(h*h+c*c+d*d),a[e]*=h,a[e+1]*=h,a[e+2]*=h},toNonIndexed:function(){if(null===this.index)return this;var a=new THREE.BufferGeometry,h=this.index.array,c=this.attributes,d;for(d in c){for(var e=c[d],f=e.array,e=e.itemSize,E=new f.constructor(h.length*e),g=0,v=0,l=0,p=h.length;p>l;l++)for(var g=h[l]*e,n=0;e>n;n++)E[v++]=f[g++];a.addAttribute(d,new THREE.BufferAttribute(E,e))}return a},toJSON:function(){var a={metadata:{version:4.4,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(a.uuid=this.uuid,a.type=this.type,""!==this.name&&(a.name=this.name),void 0!==this.parameters){var h=this.parameters,c;for(c in h)void 0!==h[c]&&(a[c]=h[c]);return a}a.data={attributes:{}};var d=this.index;null!==d&&(h=Array.prototype.slice.call(d.array),a.data.index={type:d.array.constructor.name,array:h}),d=this.attributes;for(c in d){var e=d[c],h=Array.prototype.slice.call(e.array);a.data.attributes[c]={itemSize:e.itemSize,type:e.array.constructor.name,array:h}}return c=this.groups,0<c.length&&(a.data.groups=JSON.parse(JSON.stringify(c))),c=this.boundingSphere,null!==c&&(a.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),a},clone:function(){return(new THREE.BufferGeometry).copy(this)},copy:function(a){var h=a.index;null!==h&&this.setIndex(h.clone());var h=a.attributes,c;for(c in h)this.addAttribute(c,h[c].clone());for(a=a.groups,c=0,h=a.length;h>c;c++){var d=a[c];this.addGroup(d.start,d.count)}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype),THREE.BufferGeometry.MaxIndex=65535,THREE.InstancedBufferGeometry=function(){THREE.BufferGeometry.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0},THREE.InstancedBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.InstancedBufferGeometry.prototype.constructor=THREE.InstancedBufferGeometry,THREE.InstancedBufferGeometry.prototype.addGroup=function(a,h,c){this.groups.push({start:a,count:h,instances:c})},THREE.InstancedBufferGeometry.prototype.copy=function(a){var h=a.index;null!==h&&this.setIndex(h.clone());var h=a.attributes,c;for(c in h)this.addAttribute(c,h[c].clone());for(a=a.groups,c=0,h=a.length;h>c;c++){var d=a[c];this.addGroup(d.start,d.count,d.instances)}return this},THREE.EventDispatcher.prototype.apply(THREE.InstancedBufferGeometry.prototype),THREE.Uniform=function(a,h){this.type=a,this.value=h,this.dynamic=!1},THREE.Uniform.prototype={constructor:THREE.Uniform,onUpdate:function(a){return this.dynamic=!0,this.onUpdateCallback=a,this}},THREE.AnimationClip=function(a,h,c){this.name=a||THREE.Math.generateUUID(),this.tracks=c,this.duration=void 0!==h?h:-1,0>this.duration&&this.resetDuration(),this.trim(),this.optimize()},THREE.AnimationClip.prototype={constructor:THREE.AnimationClip,resetDuration:function(){for(var a=0,h=0,c=this.tracks.length;h!==c;++h)var d=this.tracks[h],a=Math.max(a,d.times[d.times.length-1]);this.duration=a},trim:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this},optimize:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this}},Object.assign(THREE.AnimationClip,{parse:function(a){for(var h=[],c=a.tracks,d=1/(a.fps||1),e=0,f=c.length;e!==f;++e)h.push(THREE.KeyframeTrack.parse(c[e]).scale(d));return new THREE.AnimationClip(a.name,a.duration,h)},toJSON:function(a){var h=[],c=a.tracks;a={name:a.name,duration:a.duration,tracks:h};for(var d=0,e=c.length;d!==e;++d)h.push(THREE.KeyframeTrack.toJSON(c[d]));return a},CreateFromMorphTargetSequence:function(a,h,c){for(var d=h.length,e=[],f=0;d>f;f++){var E=[],g=[];E.push((f+d-1)%d,f,(f+1)%d),g.push(0,1,0);var v=THREE.AnimationUtils.getKeyframeOrder(E),E=THREE.AnimationUtils.sortedArray(E,1,v),g=THREE.AnimationUtils.sortedArray(g,1,v);0===E[0]&&(E.push(d),g.push(g[0])),e.push(new THREE.NumberKeyframeTrack(".morphTargetInfluences["+h[f].name+"]",E,g).scale(1/c))}return new THREE.AnimationClip(a,-1,e)},findByName:function(a,h){for(var c=0;c<a.length;c++)if(a[c].name===h)return a[c];return null},CreateClipsFromMorphTargetSequences:function(a,h){for(var c={},d=/^([\w-]*?)([\d]+)$/,e=0,f=a.length;f>e;e++){var E=a[e],g=E.name.match(d);if(g&&1<g.length){var v=g[1];(g=c[v])||(c[v]=g=[]),g.push(E)}}d=[];for(v in c)d.push(THREE.AnimationClip.CreateFromMorphTargetSequence(v,c[v],h));return d},parseAnimation:function(a,h,c){if(!a)return null;c=function(a,h,c,d,e){if(0!==c.length){var f=[],E=[];THREE.AnimationUtils.flattenJSON(c,f,E,d),0!==f.length&&e.push(new a(h,f,E))}};var d=[],e=a.name||"default",f=a.length||-1,E=a.fps||30;a=a.hierarchy||[];for(var g=0;g<a.length;g++){var v=a[g].keys;if(v&&0!=v.length)if(v[0].morphTargets){for(var f={},l=0;l<v.length;l++)if(v[l].morphTargets)for(var p=0;p<v[l].morphTargets.length;p++)f[v[l].morphTargets[p]]=-1;for(var n in f){for(var m=[],q=[],p=0;p!==v[l].morphTargets.length;++p){var u=v[l];m.push(u.time),q.push(u.morphTarget===n?1:0)}d.push(new THREE.NumberKeyframeTrack(".morphTargetInfluence["+n+"]",m,q))}f=f.length*(E||1)}else l=".bones["+h[g].name+"]",c(THREE.VectorKeyframeTrack,l+".position",v,"pos",d),c(THREE.QuaternionKeyframeTrack,l+".quaternion",v,"rot",d),c(THREE.VectorKeyframeTrack,l+".scale",v,"scl",d)}return 0===d.length?null:new THREE.AnimationClip(e,f,d)}}),THREE.AnimationMixer=function(a){this._root=a,this._initMemoryManager(),this.time=this._accuIndex=0,this.timeScale=1},THREE.AnimationMixer.prototype={constructor:THREE.AnimationMixer,clipAction:function(a,h){var c=(h||this._root).uuid,d="string"==typeof a?a:a.name,e=a!==d?a:null,f=this._actionsByClip[d],E;if(void 0!==f){if(E=f.actionByRoot[c],void 0!==E)return E;if(E=f.knownActions[0],e=E._clip,a!==d&&a!==e)throw Error("Different clips with the same name detected!")}return null===e?null:(f=new THREE.AnimationMixer._Action(this,e,h),this._bindAction(f,E),this._addInactiveAction(f,d,c),f)},existingAction:function(a,h){var c=(h||this._root).uuid,d=this._actionsByClip["string"==typeof a?a:a.name];return void 0!==d?d.actionByRoot[c]||null:null},stopAllAction:function(){for(var a=this._actions,h=this._nActiveActions,c=this._bindings,d=this._nActiveBindings,e=this._nActiveBindings=this._nActiveActions=0;e!==h;++e)a[e].reset();for(e=0;e!==d;++e)c[e].useCount=0;return this},update:function(a){a*=this.timeScale;for(var h=this._actions,c=this._nActiveActions,d=this.time+=a,e=Math.sign(a),f=this._accuIndex^=1,E=0;E!==c;++E){var g=h[E];g.enabled&&g._update(d,a,e,f)}for(a=this._bindings,h=this._nActiveBindings,E=0;E!==h;++E)a[E].apply(f);return this},getRoot:function(){return this._root},uncacheClip:function(a){var h=this._actions;a=a.name;var c=this._actionsByClip,d=c[a];if(void 0!==d){for(var d=d.knownActions,e=0,f=d.length;e!==f;++e){var E=d[e];this._deactivateAction(E);var g=E._cacheIndex,v=h[h.length-1];E._cacheIndex=null,E._byClipCacheIndex=null,v._cacheIndex=g,h[g]=v,h.pop(),this._removeInactiveBindingsForAction(E)}delete c[a]}},uncacheRoot:function(a){a=a.uuid;var h=this._actionsByClip,c;for(c in h){var d=h[c].actionByRoot[a];void 0!==d&&(this._deactivateAction(d),this._removeInactiveAction(d))}if(c=this._bindingsByRootAndName[a],void 0!==c)for(var e in c)a=c[e],a.restoreOriginalState(),this._removeInactiveBinding(a)},uncacheAction:function(a,h){var c=this.existingAction(a,h);null!==c&&(this._deactivateAction(c),this._removeInactiveAction(c))}},THREE.EventDispatcher.prototype.apply(THREE.AnimationMixer.prototype),THREE.AnimationMixer._Action=function(a,h,c){this._mixer=a,this._clip=h,this._localRoot=c||null,a=h.tracks,h=a.length,c=Array(h);for(var d={endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},e=0;e!==h;++e){var f=a[e].createInterpolant(null);c[e]=f,f.settings=d}this._interpolantSettings=d,this._interpolants=c,this._propertyBindings=Array(h),this._weightInterpolant=this._timeScaleInterpolant=this._byClipCacheIndex=this._cacheIndex=null,this.loop=THREE.LoopRepeat,this._loopCount=-1,this._startTime=null,this.time=0,this._effectiveWeight=this.weight=this._effectiveTimeScale=this.timeScale=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtEnd=this.zeroSlopeAtStart=!0},THREE.AnimationMixer._Action.prototype={constructor:THREE.AnimationMixer._Action,play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(a){return this._startTime=a,this},setLoop:function(a,h){return this.loop=a,this.repetitions=h,this},setEffectiveWeight:function(a){return this.weight=a,this._effectiveWeight=this.enabled?a:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(a){return this._scheduleFading(a,0,1)},fadeOut:function(a){return this._scheduleFading(a,1,0)},crossFadeFrom:function(a,h,c){if(a.fadeOut(h),this.fadeIn(h),c){c=this._clip.duration;var d=a._clip.duration,e=c/d;a.warp(1,d/c,h),this.warp(e,1,h)}return this},crossFadeTo:function(a,h,c){return a.crossFadeFrom(this,h,c)},stopFading:function(){var a=this._weightInterpolant;return null!==a&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(a)),this},setEffectiveTimeScale:function(a){return this.timeScale=a,this._effectiveTimeScale=this.paused?0:a,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(a){return this.timeScale=this._clip.duration/a,this.stopWarping()},syncWith:function(a){return this.time=a.time,this.timeScale=a.timeScale,this.stopWarping()},halt:function(a){return this.warp(this._currentTimeScale,0,a)},warp:function(a,h,c){var d=this._mixer,e=d.time,f=this._timeScaleInterpolant,E=this.timeScale;return null===f&&(this._timeScaleInterpolant=f=d._lendControlInterpolant()),d=f.parameterPositions,f=f.sampleValues,d[0]=e,d[1]=e+c,f[0]=a/E,f[1]=h/E,this},stopWarping:function(){var a=this._timeScaleInterpolant;return null!==a&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(a,h,c,d){var e=this._startTime;if(null!==e){if(h=(a-e)*c,0>h||0===c)return;this._startTime=null,h*=c}if(h*=this._updateTimeScale(a),c=this._updateTime(h),a=this._updateWeight(a),a>0){h=this._interpolants;for(var e=this._propertyBindings,f=0,E=h.length;f!==E;++f)h[f].evaluate(c),e[f].accumulate(d,a)}},_updateWeight:function(a){var h=0;if(this.enabled){var h=this.weight,c=this._weightInterpolant;if(null!==c){var d=c.evaluate(a)[0],h=h*d;a>c.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=h},_updateTimeScale:function(a){var h=0;if(!this.paused){var h=this.timeScale,c=this._timeScaleInterpolant;if(null!==c){var d=c.evaluate(a)[0],h=h*d;a>c.parameterPositions[1]&&(this.stopWarping(),0===h?this.pause=!0:this.timeScale=h)}}return this._effectiveTimeScale=h},_updateTime:function(a){var h=this.time+a;if(0===a)return h;var c=this._clip.duration,d=this.loop,e=this._loopCount,f=!1;switch(d){case THREE.LoopOnce:if(-1===e&&(this.loopCount=0,this._setEndings(!0,!0,!1)),h>=c)h=c;else{if(!(0>h))break;h=0}this.clampWhenFinished?this.pause=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:0>a?-1:1});break;case THREE.LoopPingPong:f=!0;case THREE.LoopRepeat:if(-1===e&&(a>0?(e=0,this._setEndings(!0,0===this.repetitions,f)):this._setEndings(0===this.repetitions,!0,f)),h>=c||0>h){var E=Math.floor(h/c),h=h-c*E,e=e+Math.abs(E),g=this.repetitions-e;if(0>g){this.clampWhenFinished?this.paused=!0:this.enabled=!1,h=a>0?c:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:a>0?1:-1});break}0===g?(a=0>a,this._setEndings(a,!a,f)):this._setEndings(!1,!1,f),this._loopCount=e,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:E})}if(d===THREE.LoopPingPong&&1===(1&e))return this.time=h,c-h}return this.time=h},_setEndings:function(a,h,c){var d=this._interpolantSettings;c?(d.endingStart=THREE.ZeroSlopeEnding,d.endingEnd=THREE.ZeroSlopeEnding):(d.endingStart=a?this.zeroSlopeAtStart?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding,d.endingEnd=h?this.zeroSlopeAtEnd?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding)},_scheduleFading:function(a,h,c){var d=this._mixer,e=d.time,f=this._weightInterpolant;return null===f&&(this._weightInterpolant=f=d._lendControlInterpolant()),d=f.parameterPositions,f=f.sampleValues,d[0]=e,f[0]=h,d[1]=e+a,f[1]=c,this}},Object.assign(THREE.AnimationMixer.prototype,{_bindAction:function(a,h){var c=a._localRoot||this._root,d=a._clip.tracks,e=d.length,f=a._propertyBindings,E=a._interpolants,g=c.uuid,v=this._bindingsByRootAndName,l=v[g];for(void 0===l&&(l={},v[g]=l),v=0;v!==e;++v){var p=d[v],n=p.name,m=l[n];if(void 0===m){if(m=f[v],void 0!==m){null===m._cacheIndex&&(++m.referenceCount,this._addInactiveBinding(m,g,n));continue}m=new THREE.PropertyMixer(THREE.PropertyBinding.create(c,n,h&&h._propertyBindings[v].binding.parsedPath),p.ValueTypeName,p.getValueSize()),++m.referenceCount,this._addInactiveBinding(m,g,n)}f[v]=m,E[v].resultBuffer=m.buffer}},_activateAction:function(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){var h=(a._localRoot||this._root).uuid,c=a._clip.name,d=this._actionsByClip[c];this._bindAction(a,d&&d.knownActions[0]),this._addInactiveAction(a,c,h)}for(h=a._propertyBindings,c=0,d=h.length;c!==d;++c){var e=h[c];0===e.useCount++&&(this._lendBinding(e),e.saveOriginalState())}this._lendAction(a)}},_deactivateAction:function(a){if(this._isActiveAction(a)){for(var h=a._propertyBindings,c=0,d=h.length;c!==d;++c){var e=h[c];
0===--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(a)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var a=this;this.stats={actions:{get total(){return a._actions.length},get inUse(){return a._nActiveActions}},bindings:{get total(){return a._bindings.length},get inUse(){return a._nActiveBindings}},controlInterpolants:{get total(){return a._controlInterpolants.length},get inUse(){return a._nActiveControlInterpolants}}}},_isActiveAction:function(a){return a=a._cacheIndex,null!==a&&a<this._nActiveActions},_addInactiveAction:function(a,h,c){var d=this._actions,e=this._actionsByClip,f=e[h];void 0===f?(f={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[h]=f):(h=f.knownActions,a._byClipCacheIndex=h.length,h.push(a)),a._cacheIndex=d.length,d.push(a),f.actionByRoot[c]=a},_removeInactiveAction:function(a){var h=this._actions,c=h[h.length-1],d=a._cacheIndex;c._cacheIndex=d,h[d]=c,h.pop(),a._cacheIndex=null;var c=a._clip.name,d=this._actionsByClip,e=d[c],f=e.knownActions,E=f[f.length-1],g=a._byClipCacheIndex;E._byClipCacheIndex=g,f[g]=E,f.pop(),a._byClipCacheIndex=null,delete e.actionByRoot[(h._localRoot||this._root).uuid],0===f.length&&delete d[c],this._removeInactiveBindingsForAction(a)},_removeInactiveBindingsForAction:function(a){a=a._propertyBindings;for(var h=0,c=a.length;h!==c;++h){var d=a[h];0===--d.referenceCount&&this._removeInactiveBinding(d)}},_lendAction:function(a){var h=this._actions,c=a._cacheIndex,d=this._nActiveActions++,e=h[d];a._cacheIndex=d,h[d]=a,e._cacheIndex=c,h[c]=e},_takeBackAction:function(a){var h=this._actions,c=a._cacheIndex,d=--this._nActiveActions,e=h[d];a._cacheIndex=d,h[d]=a,e._cacheIndex=c,h[c]=e},_addInactiveBinding:function(a,h,c){var d=this._bindingsByRootAndName,e=d[h],f=this._bindings;void 0===e&&(e={},d[h]=e),e[c]=a,a._cacheIndex=f.length,f.push(a)},_removeInactiveBinding:function(a){var h=this._bindings,c=a.binding,d=c.rootNode.uuid,c=c.path,e=this._bindingsByRootAndName,f=e[d],E=h[h.length-1];a=a._cacheIndex,E._cacheIndex=a,h[a]=E,h.pop(),delete f[c];e:{for(var g in f)break e;delete e[d]}},_lendBinding:function(a){var h=this._bindings,c=a._cacheIndex,d=this._nActiveBindings++,e=h[d];a._cacheIndex=d,h[d]=a,e._cacheIndex=c,h[c]=e},_takeBackBinding:function(a){var h=this._bindings,c=a._cacheIndex,d=--this._nActiveBindings,e=h[d];a._cacheIndex=d,h[d]=a,e._cacheIndex=c,h[c]=e},_lendControlInterpolant:function(){var a=this._controlInterpolants,h=this._nActiveControlInterpolants++,c=a[h];return void 0===c&&(c=new THREE.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),c.__cacheIndex=h,a[h]=c),c},_takeBackControlInterpolant:function(a){var h=this._controlInterpolants,c=a.__cacheIndex,d=--this._nActiveControlInterpolants,e=h[d];a.__cacheIndex=d,h[d]=a,e.__cacheIndex=c,h[c]=e},_controlInterpolantsResultBuffer:new Float32Array(1)}),THREE.AnimationObjectGroup=function(a){this.uuid=THREE.Math.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var h={};this._indicesByUUID=h;for(var c=0,d=arguments.length;c!==d;++c)h[arguments[c].uuid]=c;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}},THREE.AnimationObjectGroup.prototype={constructor:THREE.AnimationObjectGroup,add:function(a){for(var h=this._objects,c=h.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._paths,E=this._parsedPaths,g=this._bindings,v=g.length,l=0,p=arguments.length;l!==p;++l){var n=arguments[l],m=n.uuid,q=e[m];if(void 0===q){q=c++,e[m]=q,h.push(n);for(var m=0,u=v;m!==u;++m)g[m].push(new THREE.PropertyBinding(n,f[m],E[m]))}else if(d>q){var T=h[q],t=--d,u=h[t];for(e[u.uuid]=q,h[q]=u,e[m]=t,h[t]=n,m=0,u=v;m!==u;++m){var s=g[m],y=s[q];s[q]=s[t],void 0===y&&(y=new THREE.PropertyBinding(n,f[m],E[m])),s[t]=y}}else h[q]!==T&&void 0}this.nCachedObjects_=d},remove:function(a){for(var h=this._objects,c=this.nCachedObjects_,d=this._indicesByUUID,e=this._bindings,f=e.length,E=0,g=arguments.length;E!==g;++E){var v=arguments[E],l=v.uuid,p=d[l];if(void 0!==p&&p>=c){var n=c++,m=h[n];for(d[m.uuid]=p,h[p]=m,d[l]=n,h[n]=v,v=0,l=f;v!==l;++v){var m=e[v],q=m[p];m[p]=m[n],m[n]=q}}}this.nCachedObjects_=c},uncache:function(a){for(var h=this._objects,c=h.length,d=this.nCachedObjects_,e=this._indicesByUUID,f=this._bindings,E=f.length,g=0,v=arguments.length;g!==v;++g){var l=arguments[g].uuid,p=e[l];if(void 0!==p)if(delete e[l],d>p){var l=--d,n=h[l],m=--c,q=h[m];for(e[n.uuid]=p,h[p]=n,e[q.uuid]=l,h[l]=q,h.pop(),n=0,q=E;n!==q;++n){var u=f[n],T=u[m];u[p]=u[l],u[l]=T,u.pop()}}else for(m=--c,q=h[m],e[q.uuid]=p,h[p]=q,h.pop(),n=0,q=E;n!==q;++n)u=f[n],u[p]=u[m],u.pop()}this.nCachedObjects_=d},subscribe_:function(a,h){var c=this._bindingsIndicesByPath,d=c[a],e=this._bindings;if(void 0!==d)return e[d];var f=this._paths,E=this._parsedPaths,g=this._objects,v=this.nCachedObjects_,l=Array(g.length),d=e.length;for(c[a]=d,f.push(a),E.push(h),e.push(l),c=v,d=g.length;c!==d;++c)l[c]=new THREE.PropertyBinding(g[c],a,h);return l},unsubscribe_:function(a){var h=this._bindingsIndicesByPath,c=h[a];if(void 0!==c){var d=this._paths,e=this._parsedPaths,f=this._bindings,E=f.length-1,g=f[E];h[a[E]]=c,f[c]=g,f.pop(),e[c]=e[E],e.pop(),d[c]=d[E],d.pop()}}},THREE.AnimationUtils={arraySlice:function(a,h,c){return THREE.AnimationUtils.isTypedArray(a)?new a.constructor(a.subarray(h,c)):a.slice(h,c)},convertArray:function(a,h,c){return!a||!c&&a.constructor===h?a:"number"==typeof h.BYTES_PER_ELEMENT?new h(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){for(var h=a.length,c=Array(h),d=0;d!==h;++d)c[d]=d;return c.sort(function(h,c){return a[h]-a[c]}),c},sortedArray:function(a,h,c){for(var d=a.length,e=new a.constructor(d),f=0,E=0;E!==d;++f)for(var g=c[f]*h,v=0;v!==h;++v)e[E++]=a[g+v];return e},flattenJSON:function(a,h,c,d){for(var e=1,f=a[0];void 0!==f&&void 0===f[d];)f=a[e++];if(void 0!==f){var E=f[d];if(void 0!==E)if(Array.isArray(E)){do E=f[d],void 0!==E&&(h.push(f.time),c.push.apply(c,E)),f=a[e++];while(void 0!==f)}else if(void 0!==E.toArray){do E=f[d],void 0!==E&&(h.push(f.time),E.toArray(c,c.length)),f=a[e++];while(void 0!==f)}else do E=f[d],void 0!==E&&(h.push(f.time),c.push(E)),f=a[e++];while(void 0!==f)}}},THREE.KeyframeTrack=function(a,h,c,d){if(void 0===a)throw Error("track name is undefined");if(void 0===h||0===h.length)throw Error("no keyframes in track named "+a);this.name=a,this.times=THREE.AnimationUtils.convertArray(h,this.TimeBufferType),this.values=THREE.AnimationUtils.convertArray(c,this.ValueBufferType),this.setInterpolation(d||this.DefaultInterpolation),this.validate(),this.optimize()},THREE.KeyframeTrack.prototype={constructor:THREE.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(a){return new THREE.DiscreteInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodLinear:function(a){return new THREE.LinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:function(a){return new THREE.CubicInterpolant(this.times,this.values,this.getValueSize(),a)},setInterpolation:function(a){var h=void 0;switch(a){case THREE.InterpolateDiscrete:h=this.InterpolantFactoryMethodDiscrete;break;case THREE.InterpolateLinear:h=this.InterpolantFactoryMethodLinear;break;case THREE.InterpolateSmooth:h=this.InterpolantFactoryMethodSmooth}if(void 0===h){if(h="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name,void 0===this.createInterpolant){if(a===this.DefaultInterpolation)throw Error(h);this.setInterpolation(this.DefaultInterpolation)}}else this.createInterpolant=h},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return THREE.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return THREE.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return THREE.InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(a){if(0!==a)for(var h=this.times,c=0,d=h.length;c!==d;++c)h[c]+=a;return this},scale:function(a){if(1!==a)for(var h=this.times,c=0,d=h.length;c!==d;++c)h[c]*=a;return this},trim:function(a,h){for(var c=this.times,d=c.length,e=0,f=d-1;e!==d&&c[e]<a;)++e;for(;-1!==f&&c[f]>h;)--f;return++f,(0!==e||f!==d)&&(e>=f&&(f=Math.max(f,1),e=f-1),d=this.getValueSize(),this.times=THREE.AnimationUtils.arraySlice(c,e,f),this.values=THREE.AnimationUtils.arraySlice(this.values,e*d,f*d)),this},validate:function(){var a=!0,h=this.getValueSize();0!==h-Math.floor(h)&&(a=!1);var c=this.times,h=this.values,d=c.length;0===d&&(a=!1);for(var e=null,f=0;f!==d;f++){var E=c[f];if("number"==typeof E&&isNaN(E)){a=!1;break}if(null!==e&&e>E){a=!1;break}e=E}if(void 0!==h&&THREE.AnimationUtils.isTypedArray(h))for(f=0,c=h.length;f!==c;++f)if(d=h[f],isNaN(d)){a=!1;break}return a},optimize:function(){for(var a=this.times,h=this.values,c=this.getValueSize(),d=1,e=1,f=a.length-1;f>=e;++e){var E=!1,g=a[e];if(g!==a[e+1]&&(1!==e||g!==g[0]))for(var v=e*c,l=v-c,p=v+c,g=0;g!==c;++g){var n=h[v+g];if(n!==h[l+g]||n!==h[p+g]){E=!0;break}}if(E){if(e!==d)for(a[d]=a[e],E=e*c,v=d*c,g=0;g!==c;++g)h[v+g]=h[E+g];++d}}return d!==a.length&&(this.times=THREE.AnimationUtils.arraySlice(a,0,d),this.values=THREE.AnimationUtils.arraySlice(h,0,d*c)),this}},Object.assign(THREE.KeyframeTrack,{parse:function(a){if(void 0===a.type)throw Error("track type undefined, can not parse");var h=THREE.KeyframeTrack._getTrackTypeForValueTypeName(a.type);if(void 0===a.times){var c=[],d=[];THREE.AnimationUtils.flattenJSON(a.keys,c,d,"value"),a.times=c,a.values=d}return void 0!==h.parse?h.parse(a):new h(a.name,a.times,a.values,a.interpolation)},toJSON:function(a){var h=a.constructor;if(void 0!==h.toJSON)h=h.toJSON(a);else{var h={name:a.name,times:THREE.AnimationUtils.convertArray(a.times,Array),values:THREE.AnimationUtils.convertArray(a.values,Array)},c=a.getInterpolation();c!==a.DefaultInterpolation&&(h.interpolation=c)}return h.type=a.ValueTypeName,h},_getTrackTypeForValueTypeName:function(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return THREE.NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return THREE.VectorKeyframeTrack;case"color":return THREE.ColorKeyframeTrack;case"quaternion":return THREE.QuaternionKeyframeTrack;case"bool":case"boolean":return THREE.BooleanKeyframeTrack;case"string":return THREE.StringKeyframeTrack}throw Error("Unsupported typeName: "+a)}}),THREE.PropertyBinding=function(a,h,c){this.path=h,this.parsedPath=c||THREE.PropertyBinding.parseTrackName(h),this.node=THREE.PropertyBinding.findNode(a,this.parsedPath.nodeName)||a,this.rootNode=a},THREE.PropertyBinding.prototype={constructor:THREE.PropertyBinding,getValue:function(a,h){this.bind(),this.getValue(a,h)},setValue:function(a,h){this.bind(),this.setValue(a,h)},bind:function(){var a=this.node,h=this.parsedPath,c=h.objectName,d=h.propertyName,e=h.propertyIndex;if(a||(this.node=a=THREE.PropertyBinding.findNode(this.rootNode,h.nodeName)||this.rootNode),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,a){if(c){var f=h.objectIndex;switch(c){case"materials":if(!a.material)return;if(!a.material.materials)return;a=a.material.materials;break;case"bones":if(!a.skeleton)return;for(a=a.skeleton.bones,c=0;c<a.length;c++)if(a[c].name===f){f=c;break}break;default:if(void 0===a[c])return;a=a[c]}if(void 0!==f){if(void 0===a[f])return;a=a[f]}}if(f=a[d]){if(h=this.Versioning.None,void 0!==a.needsUpdate?(h=this.Versioning.NeedsUpdate,this.targetObject=a):void 0!==a.matrixWorldNeedsUpdate&&(h=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=a),c=this.BindingType.Direct,void 0!==e){if("morphTargetInfluences"===d){if(!a.geometry)return;if(!a.geometry.morphTargets)return;for(c=0;c<this.node.geometry.morphTargets.length;c++)if(a.geometry.morphTargets[c].name===e){e=c;break}}c=this.BindingType.ArrayElement,this.resolvedProperty=f,this.propertyIndex=e}else void 0!==f.fromArray&&void 0!==f.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=f):void 0!==f.length?(c=this.BindingType.EntireArray,this.resolvedProperty=f):this.propertyName=d;this.getValue=this.GetterByBindingType[c],this.setValue=this.SetterByBindingTypeAndVersioning[c][h]}}},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}},Object.assign(THREE.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:THREE.PropertyBinding.prototype.getValue,_setValue_unbound:THREE.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(a,h){a[h]=this.node[this.propertyName]},function(a,h){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)a[h++]=c[d]},function(a,h){a[h]=this.resolvedProperty[this.propertyIndex]},function(a,h){this.resolvedProperty.toArray(a,h)}],SetterByBindingTypeAndVersioning:[[function(a,h){this.node[this.propertyName]=a[h]},function(a,h){this.node[this.propertyName]=a[h],this.targetObject.needsUpdate=!0},function(a,h){this.node[this.propertyName]=a[h],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,h){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[h++]},function(a,h){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[h++];this.targetObject.needsUpdate=!0},function(a,h){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[h++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,h){this.resolvedProperty[this.propertyIndex]=a[h]},function(a,h){this.resolvedProperty[this.propertyIndex]=a[h],this.targetObject.needsUpdate=!0},function(a,h){this.resolvedProperty[this.propertyIndex]=a[h],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,h){this.resolvedProperty.fromArray(a,h)},function(a,h){this.resolvedProperty.fromArray(a,h),this.targetObject.needsUpdate=!0},function(a,h){this.resolvedProperty.fromArray(a,h),this.targetObject.matrixWorldNeedsUpdate=!0}]]}),THREE.PropertyBinding.Composite=function(a,h,c){c=c||THREE.PropertyBinding.parseTrackName(h),this._targetGroup=a,this._bindings=a.subscribe_(h,c)},THREE.PropertyBinding.Composite.prototype={constructor:THREE.PropertyBinding.Composite,getValue:function(a,h){this.bind();var c=this._bindings[this._targetGroup.nCachedObjects_];void 0!==c&&c.getValue(a,h)},setValue:function(a,h){for(var c=this._bindings,d=this._targetGroup.nCachedObjects_,e=c.length;d!==e;++d)c[d].setValue(a,h)},bind:function(){for(var a=this._bindings,h=this._targetGroup.nCachedObjects_,c=a.length;h!==c;++h)a[h].bind()},unbind:function(){for(var a=this._bindings,h=this._targetGroup.nCachedObjects_,c=a.length;h!==c;++h)a[h].unbind()}},THREE.PropertyBinding.create=function(a,h,c){return a instanceof THREE.AnimationObjectGroup?new THREE.PropertyBinding.Composite(a,h,c):new THREE.PropertyBinding(a,h,c)},THREE.PropertyBinding.parseTrackName=function(a){var h=/^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,c=h.exec(a);if(!c)throw Error("cannot parse trackName at all: "+a);if(c.index===h.lastIndex&&h.lastIndex++,h={nodeName:c[3],objectName:c[5],objectIndex:c[7],propertyName:c[9],propertyIndex:c[11]},null===h.propertyName||0===h.propertyName.length)throw Error("can not parse propertyName from trackName: "+a);return h},THREE.PropertyBinding.findNode=function(a,h){if(!h||""===h||"root"===h||"."===h||-1===h||h===a.name||h===a.uuid)return a;if(a.skeleton){var c=function(a){for(var c=0;c<a.bones.length;c++){var d=a.bones[c];if(d.name===h)return d}return null}(a.skeleton);if(c)return c}if(a.children){var d=function(a){for(var c=0;c<a.length;c++){var E=a[c];if(E.name===h||E.uuid===h||(E=d(E.children)))return E}return null};if(c=d(a.children))return c}return null},THREE.PropertyMixer=function(a,h,c){switch(this.binding=a,this.valueSize=c,a=Float64Array,h){case"quaternion":h=this._slerp;break;case"string":case"bool":a=Array,h=this._select;break;default:h=this._lerp}this.buffer=new a(4*c),this._mixBufferRegion=h,this.referenceCount=this.useCount=this.cumulativeWeight=0},THREE.PropertyMixer.prototype={constructor:THREE.PropertyMixer,accumulate:function(a,h){var c=this.buffer,d=this.valueSize,e=a*d+d,f=this.cumulativeWeight;if(0===f){for(f=0;f!==d;++f)c[e+f]=c[f];f=h}else f+=h,this._mixBufferRegion(c,e,0,h/f,d);this.cumulativeWeight=f},apply:function(a){var h=this.valueSize,c=this.buffer;a=a*h+h;var d=this.cumulativeWeight,e=this.binding;this.cumulativeWeight=0,1>d&&this._mixBufferRegion(c,a,3*h,1-d,h);for(var d=h,f=h+h;d!==f;++d)if(c[d]!==c[d+h]){e.setValue(c,a);break}},saveOriginalState:function(){var a=this.buffer,h=this.valueSize,c=3*h;this.binding.getValue(a,c);for(var d=h;d!==c;++d)a[d]=a[c+d%h];this.cumulativeWeight=0},restoreOriginalState:function(){this.binding.setValue(this.buffer,3*this.valueSize)},_select:function(a,h,c,d,e){if(d>=.5)for(d=0;d!==e;++d)a[h+d]=a[c+d]},_slerp:function(a,h,c,d,e){THREE.Quaternion.slerpFlat(a,h,a,h,a,c,d)},_lerp:function(a,h,c,d,e){for(var f=1-d,E=0;E!==e;++E){var g=h+E;a[g]=a[g]*f+a[c+E]*d}}},THREE.BooleanKeyframeTrack=function(a,h,c){THREE.KeyframeTrack.call(this,a,h,c)},THREE.BooleanKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:THREE.IntepolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),THREE.NumberKeyframeTrack=function(a,h,c,d){THREE.KeyframeTrack.call(this,a,h,c,d)},THREE.NumberKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.NumberKeyframeTrack,ValueTypeName:"number"}),THREE.QuaternionKeyframeTrack=function(a,h,c,d){THREE.KeyframeTrack.call(this,a,h,c,d)},THREE.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodLinear:function(a){return new THREE.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:void 0}),THREE.StringKeyframeTrack=function(a,h,c,d){THREE.KeyframeTrack.call(this,a,h,c,d)},THREE.StringKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:THREE.IntepolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),THREE.VectorKeyframeTrack=function(a,h,c,d){THREE.KeyframeTrack.call(this,a,h,c,d)},THREE.VectorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.VectorKeyframeTrack,ValueTypeName:"vector"}),THREE.Audio=function(a){THREE.Object3D.call(this),this.type="Audio",this.context=a.context,this.source=this.context.createBufferSource(),this.source.onended=this.onEnded.bind(this),this.gain=this.context.createGain(),this.gain.connect(a.getInput()),this.autoplay=!1,this.startTime=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filter=null},THREE.Audio.prototype=Object.create(THREE.Object3D.prototype),THREE.Audio.prototype.constructor=THREE.Audio,THREE.Audio.prototype.getOutput=function(){return this.gain},THREE.Audio.prototype.load=function(a){var h=new THREE.AudioBuffer(this.context);return h.load(a),this.setBuffer(h),this},THREE.Audio.prototype.setNodeSource=function(a){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=a,this.connect(),this},THREE.Audio.prototype.setBuffer=function(a){var h=this;return a.onReady(function(a){h.source.buffer=a,h.sourceType="buffer",h.autoplay&&h.play()}),this},THREE.Audio.prototype.play=function(){if(!0===this.isPlaying);else if(!1===this.hasPlaybackControl);else{var a=this.context.createBufferSource();a.buffer=this.source.buffer,a.loop=this.source.loop,a.onended=this.source.onended,a.start(0,this.startTime),a.playbackRate.value=this.playbackRate,this.isPlaying=!0,this.source=a,this.connect()}},THREE.Audio.prototype.pause=function(){!1===this.hasPlaybackControl?void 0:(this.source.stop(),this.startTime=this.context.currentTime)},THREE.Audio.prototype.stop=function(){!1===this.hasPlaybackControl?void 0:(this.source.stop(),this.startTime=0)},THREE.Audio.prototype.connect=function(){null!==this.filter?(this.source.connect(this.filter),this.filter.connect(this.getOutput())):this.source.connect(this.getOutput())},THREE.Audio.prototype.disconnect=function(){null!==this.filter?(this.source.disconnect(this.filter),this.filter.disconnect(this.getOutput())):this.source.disconnect(this.getOutput())},THREE.Audio.prototype.getFilter=function(){return this.filter},THREE.Audio.prototype.setFilter=function(a){void 0===a&&(a=null),!0===this.isPlaying?(this.disconnect(),this.filter=a,this.connect()):this.filter=a},THREE.Audio.prototype.setPlaybackRate=function(a){!1===this.hasPlaybackControl?void 0:(this.playbackRate=a,!0===this.isPlaying&&(this.source.playbackRate.value=this.playbackRate))},THREE.Audio.prototype.getPlaybackRate=function(){return this.playbackRate},THREE.Audio.prototype.onEnded=function(){this.isPlaying=!1},THREE.Audio.prototype.setLoop=function(a){!1===this.hasPlaybackControl?void 0:this.source.loop=a},THREE.Audio.prototype.getLoop=function(){return!1===this.hasPlaybackControl?!1:this.source.loop},THREE.Audio.prototype.setVolume=function(a){this.gain.gain.value=a},THREE.Audio.prototype.getVolume=function(){return this.gain.gain.value},THREE.AudioAnalyser=function(a,h){this.analyser=a.context.createAnalyser(),this.analyser.fftSize=void 0!==h?h:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),a.getOutput().connect(this.analyser)},THREE.AudioAnalyser.prototype={constructor:THREE.AudioAnalyser,getData:function(){return this.analyser.getByteFrequencyData(this.data),this.data}},THREE.AudioBuffer=function(a){this.context=a,this.ready=!1,this.readyCallbacks=[]},THREE.AudioBuffer.prototype.load=function(a){var h=this,c=new XMLHttpRequest;return c.open("GET",a,!0),c.responseType="arraybuffer",c.onload=function(a){h.context.decodeAudioData(this.response,function(a){for(h.buffer=a,h.ready=!0,a=0;a<h.readyCallbacks.length;a++)h.readyCallbacks[a](h.buffer);h.readyCallbacks=[]})},c.send(),this},THREE.AudioBuffer.prototype.onReady=function(a){this.ready?a(this.buffer):this.readyCallbacks.push(a)},THREE.PositionalAudio=function(a){THREE.Audio.call(this,a),this.panner=this.context.createPanner(),this.panner.connect(this.gain)},THREE.PositionalAudio.prototype=Object.create(THREE.Audio.prototype),THREE.PositionalAudio.prototype.constructor=THREE.PositionalAudio,THREE.PositionalAudio.prototype.getOutput=function(){return this.panner},THREE.PositionalAudio.prototype.setRefDistance=function(a){this.panner.refDistance=a},THREE.PositionalAudio.prototype.getRefDistance=function(){return this.panner.refDistance},THREE.PositionalAudio.prototype.setRolloffFactor=function(a){this.panner.rolloffFactor=a},THREE.PositionalAudio.prototype.getRolloffFactor=function(){return this.panner.rolloffFactor},THREE.PositionalAudio.prototype.setDistanceModel=function(a){this.panner.distanceModel=a},THREE.PositionalAudio.prototype.getDistanceModel=function(){return this.panner.distanceModel},THREE.PositionalAudio.prototype.setMaxDistance=function(a){this.panner.maxDistance=a},THREE.PositionalAudio.prototype.getMaxDistance=function(){return this.panner.maxDistance},THREE.PositionalAudio.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3;return function(h){THREE.Object3D.prototype.updateMatrixWorld.call(this,h),a.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(a.x,a.y,a.z)}}(),THREE.AudioListener=function(){THREE.Object3D.call(this),this.type="AudioListener",this.context=new(window.AudioContext||window.webkitAudioContext),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null},THREE.AudioListener.prototype=Object.create(THREE.Object3D.prototype),THREE.AudioListener.prototype.constructor=THREE.AudioListener,THREE.AudioListener.prototype.getInput=function(){return this.gain},THREE.AudioListener.prototype.removeFilter=function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},THREE.AudioListener.prototype.setFilter=function(a){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=a,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},THREE.AudioListener.prototype.getFilter=function(){return this.filter},THREE.AudioListener.prototype.setMasterVolume=function(a){this.gain.gain.value=a},THREE.AudioListener.prototype.getMasterVolume=function(){return this.gain.gain.value},THREE.AudioListener.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3,h=new THREE.Quaternion,c=new THREE.Vector3,d=new THREE.Vector3;return function(e){THREE.Object3D.prototype.updateMatrixWorld.call(this,e),e=this.context.listener;var f=this.up;this.matrixWorld.decompose(a,h,c),d.set(0,0,-1).applyQuaternion(h),e.setPosition(a.x,a.y,a.z),e.setOrientation(d.x,d.y,d.z,f.x,f.y,f.z)}}(),THREE.Camera=function(){THREE.Object3D.call(this),this.type="Camera",this.matrixWorldInverse=new THREE.Matrix4,this.projectionMatrix=new THREE.Matrix4},THREE.Camera.prototype=Object.create(THREE.Object3D.prototype),THREE.Camera.prototype.constructor=THREE.Camera,THREE.Camera.prototype.getWorldDirection=function(){var a=new THREE.Quaternion;return function(h){return h=h||new THREE.Vector3,this.getWorldQuaternion(a),h.set(0,0,-1).applyQuaternion(a)}}(),THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(h){a.lookAt(this.position,h,this.up),this.quaternion.setFromRotationMatrix(a)}}(),THREE.Camera.prototype.clone=function(){return(new this.constructor).copy(this)},THREE.Camera.prototype.copy=function(a){return THREE.Object3D.prototype.copy.call(this,a),this.matrixWorldInverse.copy(a.matrixWorldInverse),this.projectionMatrix.copy(a.projectionMatrix),this},THREE.CubeCamera=function(a,h,c){THREE.Object3D.call(this),this.type="CubeCamera";var d=new THREE.PerspectiveCamera(90,1,a,h);d.up.set(0,-1,0),d.lookAt(new THREE.Vector3(1,0,0)),this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,h);e.up.set(0,-1,0),e.lookAt(new THREE.Vector3(-1,0,0)),this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,h);f.up.set(0,0,1),f.lookAt(new THREE.Vector3(0,1,0)),this.add(f);var E=new THREE.PerspectiveCamera(90,1,a,h);E.up.set(0,0,-1),E.lookAt(new THREE.Vector3(0,-1,0)),this.add(E);var g=new THREE.PerspectiveCamera(90,1,a,h);g.up.set(0,-1,0),g.lookAt(new THREE.Vector3(0,0,1)),this.add(g);var v=new THREE.PerspectiveCamera(90,1,a,h);v.up.set(0,-1,0),v.lookAt(new THREE.Vector3(0,0,-1)),this.add(v),this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter}),this.updateCubeMap=function(a,h){null===this.parent&&this.updateMatrixWorld();var c=this.renderTarget,m=c.texture.generateMipmaps;c.texture.generateMipmaps=!1,c.activeCubeFace=0,a.render(h,d,c),c.activeCubeFace=1,a.render(h,e,c),c.activeCubeFace=2,a.render(h,f,c),c.activeCubeFace=3,a.render(h,E,c),c.activeCubeFace=4,a.render(h,g,c),c.texture.generateMipmaps=m,c.activeCubeFace=5,a.render(h,v,c),a.setRenderTarget(null)}},THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype),THREE.CubeCamera.prototype.constructor=THREE.CubeCamera,THREE.OrthographicCamera=function(a,h,c,d,e,f){THREE.Camera.call(this),this.type="OrthographicCamera",this.zoom=1,this.left=a,this.right=h,this.top=c,this.bottom=d,this.near=void 0!==e?e:.1,this.far=void 0!==f?f:2e3,this.updateProjectionMatrix()},THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype),THREE.OrthographicCamera.prototype.constructor=THREE.OrthographicCamera,THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){var a=(this.right-this.left)/(2*this.zoom),h=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(c-a,c+a,d+h,d-h,this.near,this.far)},THREE.OrthographicCamera.prototype.copy=function(a){return THREE.Camera.prototype.copy.call(this,a),this.left=a.left,this.right=a.right,this.top=a.top,this.bottom=a.bottom,this.near=a.near,this.far=a.far,this.zoom=a.zoom,this},THREE.OrthographicCamera.prototype.toJSON=function(a){return a=THREE.Object3D.prototype.toJSON.call(this,a),a.object.zoom=this.zoom,a.object.left=this.left,a.object.right=this.right,a.object.top=this.top,a.object.bottom=this.bottom,a.object.near=this.near,a.object.far=this.far,a},THREE.PerspectiveCamera=function(a,h,c,d){THREE.Camera.call(this),this.type="PerspectiveCamera",this.focalLength=10,this.zoom=1,this.fov=void 0!==a?a:50,this.aspect=void 0!==h?h:1,this.near=void 0!==c?c:.1,this.far=void 0!==d?d:2e3,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype),THREE.PerspectiveCamera.prototype.constructor=THREE.PerspectiveCamera,THREE.PerspectiveCamera.prototype.setLens=function(a,h){void 0===h&&(h=24),this.fov=2*THREE.Math.radToDeg(Math.atan(h/(2*a))),this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype.setViewOffset=function(a,h,c,d,e,f){this.fullWidth=a,this.fullHeight=h,this.x=c,this.y=d,this.width=e,this.height=f,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){var a=THREE.Math.radToDeg(2*Math.atan(Math.tan(.5*THREE.Math.degToRad(this.fov))/this.zoom));if(this.fullWidth){var h=this.fullWidth/this.fullHeight,a=Math.tan(THREE.Math.degToRad(.5*a))*this.near,c=-a,d=h*c,h=Math.abs(h*a-d),c=Math.abs(a-c);this.projectionMatrix.makeFrustum(d+this.x*h/this.fullWidth,d+(this.x+this.width)*h/this.fullWidth,a-(this.y+this.height)*c/this.fullHeight,a-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(a,this.aspect,this.near,this.far)},THREE.PerspectiveCamera.prototype.copy=function(a){return THREE.Camera.prototype.copy.call(this,a),this.focalLength=a.focalLength,this.zoom=a.zoom,this.fov=a.fov,this.aspect=a.aspect,this.near=a.near,this.far=a.far,this},THREE.PerspectiveCamera.prototype.toJSON=function(a){return a=THREE.Object3D.prototype.toJSON.call(this,a),a.object.focalLength=this.focalLength,a.object.zoom=this.zoom,a.object.fov=this.fov,a.object.aspect=this.aspect,a.object.near=this.near,a.object.far=this.far,a},THREE.StereoCamera=function(){this.type="StereoCamera",this.aspect=1,this.cameraL=new THREE.PerspectiveCamera,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new THREE.PerspectiveCamera,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1},THREE.StereoCamera.prototype={constructor:THREE.StereoCamera,update:function(){var a,h,c,d,e,f=new THREE.Matrix4,E=new THREE.Matrix4;return function(g){if(a!==g.focalLength||h!==g.fov||c!==g.aspect*this.aspect||d!==g.near||e!==g.far){a=g.focalLength,h=g.fov,c=g.aspect*this.aspect,d=g.near,e=g.far;var v=g.projectionMatrix.clone(),l=.032*d/a,p=d*Math.tan(THREE.Math.degToRad(.5*h)),n,m;
E.elements[12]=-.032,f.elements[12]=.032,n=-p*c+l,m=p*c+l,v.elements[0]=2*d/(m-n),v.elements[8]=(m+n)/(m-n),this.cameraL.projectionMatrix.copy(v),n=-p*c-l,m=p*c-l,v.elements[0]=2*d/(m-n),v.elements[8]=(m+n)/(m-n),this.cameraR.projectionMatrix.copy(v)}this.cameraL.matrixWorld.copy(g.matrixWorld).multiply(E),this.cameraR.matrixWorld.copy(g.matrixWorld).multiply(f)}}()},THREE.Light=function(a,h){THREE.Object3D.call(this),this.type="Light",this.color=new THREE.Color(a),this.intensity=void 0!==h?h:1,this.receiveShadow=void 0},THREE.Light.prototype=Object.create(THREE.Object3D.prototype),THREE.Light.prototype.constructor=THREE.Light,THREE.Light.prototype.copy=function(a){return THREE.Object3D.prototype.copy.call(this,a),this.color.copy(a.color),this.intensity=a.intensity,this},THREE.Light.prototype.toJSON=function(a){return a=THREE.Object3D.prototype.toJSON.call(this,a),a.object.color=this.color.getHex(),a.object.intensity=this.intensity,void 0!==this.groundColor&&(a.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(a.object.distance=this.distance),void 0!==this.angle&&(a.object.angle=this.angle),void 0!==this.decay&&(a.object.decay=this.decay),void 0!==this.penumbra&&(a.object.penumbra=this.penumbra),a},THREE.LightShadow=function(a){this.camera=a,this.bias=0,this.radius=1,this.mapSize=new THREE.Vector2(512,512),this.map=null,this.matrix=new THREE.Matrix4},THREE.LightShadow.prototype={constructor:THREE.LightShadow,copy:function(a){return this.camera=a.camera.clone(),this.bias=a.bias,this.radius=a.radius,this.mapSize.copy(a.mapSize),this},clone:function(){return(new this.constructor).copy(this)}},THREE.AmbientLight=function(a,h){THREE.Light.call(this,a,h),this.type="AmbientLight",this.castShadow=void 0},THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype),THREE.AmbientLight.prototype.constructor=THREE.AmbientLight,THREE.DirectionalLight=function(a,h){THREE.Light.call(this,a,h),this.type="DirectionalLight",this.position.set(0,1,0),this.updateMatrix(),this.target=new THREE.Object3D,this.shadow=new THREE.LightShadow(new THREE.OrthographicCamera(-5,5,5,-5,.5,500))},THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype),THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight,THREE.DirectionalLight.prototype.copy=function(a){return THREE.Light.prototype.copy.call(this,a),this.target=a.target.clone(),this.shadow=a.shadow.clone(),this},THREE.HemisphereLight=function(a,h,c){THREE.Light.call(this,a,c),this.type="HemisphereLight",this.castShadow=void 0,this.position.set(0,1,0),this.updateMatrix(),this.groundColor=new THREE.Color(h)},THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype),THREE.HemisphereLight.prototype.constructor=THREE.HemisphereLight,THREE.HemisphereLight.prototype.copy=function(a){return THREE.Light.prototype.copy.call(this,a),this.groundColor.copy(a.groundColor),this},THREE.PointLight=function(a,h,c,d){THREE.Light.call(this,a,h),this.type="PointLight",this.distance=void 0!==c?c:0,this.decay=void 0!==d?d:1,this.shadow=new THREE.LightShadow(new THREE.PerspectiveCamera(90,1,.5,500))},THREE.PointLight.prototype=Object.create(THREE.Light.prototype),THREE.PointLight.prototype.constructor=THREE.PointLight,Object.defineProperty(THREE.PointLight.prototype,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(a){this.intensity=a/(4*Math.PI)}}),THREE.PointLight.prototype.copy=function(a){return THREE.Light.prototype.copy.call(this,a),this.distance=a.distance,this.decay=a.decay,this.shadow=a.shadow.clone(),this},THREE.SpotLight=function(a,h,c,d,e,f){THREE.Light.call(this,a,h),this.type="SpotLight",this.position.set(0,1,0),this.updateMatrix(),this.target=new THREE.Object3D,this.distance=void 0!==c?c:0,this.angle=void 0!==d?d:Math.PI/3,this.penumbra=void 0!==e?e:0,this.decay=void 0!==f?f:1,this.shadow=new THREE.LightShadow(new THREE.PerspectiveCamera(50,1,.5,500))},THREE.SpotLight.prototype=Object.create(THREE.Light.prototype),THREE.SpotLight.prototype.constructor=THREE.SpotLight,Object.defineProperty(THREE.SpotLight.prototype,"power",{get:function(){return this.intensity*Math.PI},set:function(a){this.intensity=a/Math.PI}}),THREE.SpotLight.prototype.copy=function(a){return THREE.Light.prototype.copy.call(this,a),this.distance=a.distance,this.angle=a.angle,this.penumbra=a.penumbra,this.decay=a.decay,this.target=a.target.clone(),this.shadow=a.shadow.clone(),this},THREE.Cache={enabled:!1,files:{},add:function(a,h){!1!==this.enabled&&(this.files[a]=h)},get:function(a){return!1!==this.enabled?this.files[a]:void 0},remove:function(a){delete this.files[a]},clear:function(){this.files={}}},THREE.Loader=function(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}},THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,extractUrlBase:function(a){return a=a.split("/"),1===a.length?"./":(a.pop(),a.join("/")+"/")},initMaterials:function(a,h,c){for(var d=[],e=0;e<a.length;++e)d[e]=this.createMaterial(a[e],h,c);return d},createMaterial:function(){var a,h,c;return function(d,e,f){function E(a,c,d,E,v){a=e+a;var l=THREE.Loader.Handlers.get(a);return null!==l?a=l.load(a):(h.setCrossOrigin(f),a=h.load(a)),void 0!==c&&(a.repeat.fromArray(c),1!==c[0]&&(a.wrapS=THREE.RepeatWrapping),1!==c[1]&&(a.wrapT=THREE.RepeatWrapping)),void 0!==d&&a.offset.fromArray(d),void 0!==E&&("repeat"===E[0]&&(a.wrapS=THREE.RepeatWrapping),"mirror"===E[0]&&(a.wrapS=THREE.MirroredRepeatWrapping),"repeat"===E[1]&&(a.wrapT=THREE.RepeatWrapping),"mirror"===E[1]&&(a.wrapT=THREE.MirroredRepeatWrapping)),void 0!==v&&(a.anisotropy=v),c=THREE.Math.generateUUID(),g[c]=a,c}void 0===a&&(a=new THREE.Color),void 0===h&&(h=new THREE.TextureLoader),void 0===c&&(c=new THREE.MaterialLoader);var g={},v={uuid:THREE.Math.generateUUID(),type:"MeshLambertMaterial"},l;for(l in d){var p=d[l];switch(l){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":v.name=p;break;case"blending":v.blending=THREE[p];break;case"colorAmbient":case"mapAmbient":break;case"colorDiffuse":v.color=a.fromArray(p).getHex();break;case"colorSpecular":v.specular=a.fromArray(p).getHex();break;case"colorEmissive":v.emissive=a.fromArray(p).getHex();break;case"specularCoef":v.shininess=p;break;case"shading":"basic"===p.toLowerCase()&&(v.type="MeshBasicMaterial"),"phong"===p.toLowerCase()&&(v.type="MeshPhongMaterial");break;case"mapDiffuse":v.map=E(p,d.mapDiffuseRepeat,d.mapDiffuseOffset,d.mapDiffuseWrap,d.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapLight":v.lightMap=E(p,d.mapLightRepeat,d.mapLightOffset,d.mapLightWrap,d.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":v.aoMap=E(p,d.mapAORepeat,d.mapAOOffset,d.mapAOWrap,d.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":v.bumpMap=E(p,d.mapBumpRepeat,d.mapBumpOffset,d.mapBumpWrap,d.mapBumpAnisotropy);break;case"mapBumpScale":v.bumpScale=p;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":v.normalMap=E(p,d.mapNormalRepeat,d.mapNormalOffset,d.mapNormalWrap,d.mapNormalAnisotropy);break;case"mapNormalFactor":v.normalScale=[p,p];break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":v.specularMap=E(p,d.mapSpecularRepeat,d.mapSpecularOffset,d.mapSpecularWrap,d.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapAlpha":v.alphaMap=E(p,d.mapAlphaRepeat,d.mapAlphaOffset,d.mapAlphaWrap,d.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":v.side=THREE.BackSide;break;case"doubleSided":v.side=THREE.DoubleSide;break;case"transparency":v.opacity=p;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":v[l]=p;break;case"vertexColors":!0===p&&(v.vertexColors=THREE.VertexColors),"face"===p&&(v.vertexColors=THREE.FaceColors)}}return"MeshBasicMaterial"===v.type&&delete v.emissive,"MeshPhongMaterial"!==v.type&&delete v.specular,1>v.opacity&&(v.transparent=!0),c.setTextures(g),c.parse(v)}}()},THREE.Loader.Handlers={handlers:[],add:function(a,h){this.handlers.push(a,h)},get:function(a){for(var h=this.handlers,c=0,d=h.length;d>c;c+=2){var e=h[c+1];if(h[c].test(a))return e}return null}},THREE.XHRLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager},THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,h,c,d){void 0!==this.path&&(a=this.path+a);var e=this,f=THREE.Cache.get(a);if(void 0!==f)return h&&setTimeout(function(){h(f)},0),f;var E=new XMLHttpRequest;return E.overrideMimeType("text/plain"),E.open("GET",a,!0),E.addEventListener("load",function(c){var f=c.target.response;THREE.Cache.add(a,f),200===this.status?(h&&h(f),e.manager.itemEnd(a)):0===this.status?(h&&h(f),e.manager.itemEnd(a)):(d&&d(c),e.manager.itemError(a))},!1),void 0!==c&&E.addEventListener("progress",function(a){c(a)},!1),E.addEventListener("error",function(h){d&&d(h),e.manager.itemError(a)},!1),void 0!==this.responseType&&(E.responseType=this.responseType),void 0!==this.withCredentials&&(E.withCredentials=this.withCredentials),E.send(null),e.manager.itemStart(a),E},setPath:function(a){this.path=a},setResponseType:function(a){this.responseType=a},setWithCredentials:function(a){this.withCredentials=a}},THREE.FontLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager},THREE.FontLoader.prototype={constructor:THREE.FontLoader,load:function(a,h,c,d){new THREE.XHRLoader(this.manager).load(a,function(a){h(new THREE.Font(JSON.parse(a.substring(65,a.length-2))))},c,d)}},THREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager},THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,h,c,d){void 0!==this.path&&(a=this.path+a);var e=this,f=THREE.Cache.get(a);if(void 0!==f)return e.manager.itemStart(a),h?setTimeout(function(){h(f),e.manager.itemEnd(a)},0):e.manager.itemEnd(a),f;var E=document.createElement("img");return E.addEventListener("load",function(c){THREE.Cache.add(a,this),h&&h(this),e.manager.itemEnd(a)},!1),void 0!==c&&E.addEventListener("progress",function(a){c(a)},!1),E.addEventListener("error",function(h){d&&d(h),e.manager.itemError(a)},!1),void 0!==this.crossOrigin&&(E.crossOrigin=this.crossOrigin),e.manager.itemStart(a),E.src=a,E},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}},THREE.JSONLoader=function(a){"boolean"==typeof a&&(a=void 0),this.manager=void 0!==a?a:THREE.DefaultLoadingManager,this.withCredentials=!1},THREE.JSONLoader.prototype={constructor:THREE.JSONLoader,get statusDomElement(){return void 0===this._statusDomElement&&(this._statusDomElement=document.createElement("div")),this._statusDomElement},load:function(a,h,c,d){var e=this,f=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:THREE.Loader.prototype.extractUrlBase(a),E=new THREE.XHRLoader(this.manager);E.setWithCredentials(this.withCredentials),E.load(a,function(a){a=JSON.parse(a);var d=a.metadata;if(void 0!==d&&(d=d.type,void 0!==d)){if("object"===d.toLowerCase())return;if("scene"===d.toLowerCase())return}a=e.parse(a,f),h(a.geometry,a.materials)},c,d)},setTexturePath:function(a){this.texturePath=a},parse:function(a,h){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1;return function(h){var d,E,g,v,l,p,n,m,q,u,T,t,s,y=a.faces;p=a.vertices;var R=a.normals,x=a.colors,H=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&H++;for(d=0;H>d;d++)c.faceVertexUvs[d]=[]}for(v=0,l=p.length;l>v;)d=new THREE.Vector3,d.x=p[v++]*h,d.y=p[v++]*h,d.z=p[v++]*h,c.vertices.push(d);for(v=0,l=y.length;l>v;)if(h=y[v++],q=1&h,g=2&h,d=8&h,n=16&h,u=32&h,p=64&h,h&=128,q){if(q=new THREE.Face3,q.a=y[v],q.b=y[v+1],q.c=y[v+3],T=new THREE.Face3,T.a=y[v+1],T.b=y[v+2],T.c=y[v+3],v+=4,g&&(g=y[v++],q.materialIndex=g,T.materialIndex=g),g=c.faces.length,d)for(d=0;H>d;d++)for(t=a.uvs[d],c.faceVertexUvs[d][g]=[],c.faceVertexUvs[d][g+1]=[],E=0;4>E;E++)m=y[v++],s=t[2*m],m=t[2*m+1],s=new THREE.Vector2(s,m),2!==E&&c.faceVertexUvs[d][g].push(s),0!==E&&c.faceVertexUvs[d][g+1].push(s);if(n&&(n=3*y[v++],q.normal.set(R[n++],R[n++],R[n]),T.normal.copy(q.normal)),u)for(d=0;4>d;d++)n=3*y[v++],u=new THREE.Vector3(R[n++],R[n++],R[n]),2!==d&&q.vertexNormals.push(u),0!==d&&T.vertexNormals.push(u);if(p&&(p=y[v++],p=x[p],q.color.setHex(p),T.color.setHex(p)),h)for(d=0;4>d;d++)p=y[v++],p=x[p],2!==d&&q.vertexColors.push(new THREE.Color(p)),0!==d&&T.vertexColors.push(new THREE.Color(p));c.faces.push(q),c.faces.push(T)}else{if(q=new THREE.Face3,q.a=y[v++],q.b=y[v++],q.c=y[v++],g&&(g=y[v++],q.materialIndex=g),g=c.faces.length,d)for(d=0;H>d;d++)for(t=a.uvs[d],c.faceVertexUvs[d][g]=[],E=0;3>E;E++)m=y[v++],s=t[2*m],m=t[2*m+1],s=new THREE.Vector2(s,m),c.faceVertexUvs[d][g].push(s);if(n&&(n=3*y[v++],q.normal.set(R[n++],R[n++],R[n])),u)for(d=0;3>d;d++)n=3*y[v++],u=new THREE.Vector3(R[n++],R[n++],R[n]),q.vertexNormals.push(u);if(p&&(p=y[v++],q.color.setHex(x[p])),h)for(d=0;3>d;d++)p=y[v++],q.vertexColors.push(new THREE.Color(x[p]));c.faces.push(q)}}(d),function(){var h=void 0!==a.influencesPerVertex?a.influencesPerVertex:2;if(a.skinWeights)for(var d=0,E=a.skinWeights.length;E>d;d+=h)c.skinWeights.push(new THREE.Vector4(a.skinWeights[d],h>1?a.skinWeights[d+1]:0,h>2?a.skinWeights[d+2]:0,h>3?a.skinWeights[d+3]:0));if(a.skinIndices)for(d=0,E=a.skinIndices.length;E>d;d+=h)c.skinIndices.push(new THREE.Vector4(a.skinIndices[d],h>1?a.skinIndices[d+1]:0,h>2?a.skinIndices[d+2]:0,h>3?a.skinIndices[d+3]:0));c.bones=a.bones,c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&void 0}(),function(h){if(void 0!==a.morphTargets)for(var d=0,E=a.morphTargets.length;E>d;d++){c.morphTargets[d]={},c.morphTargets[d].name=a.morphTargets[d].name,c.morphTargets[d].vertices=[];for(var g=c.morphTargets[d].vertices,v=a.morphTargets[d].vertices,l=0,p=v.length;p>l;l+=3){var n=new THREE.Vector3;n.x=v[l]*h,n.y=v[l+1]*h,n.z=v[l+2]*h,g.push(n)}}if(void 0!==a.morphColors&&0<a.morphColors.length)for(h=c.faces,g=a.morphColors[0].colors,d=0,E=h.length;E>d;d++)h[d].color.fromArray(g,3*d)}(d),function(){var h=[],d=[];void 0!==a.animation&&d.push(a.animation),void 0!==a.animations&&(a.animations.length?d=d.concat(a.animations):d.push(a.animations));for(var E=0;E<d.length;E++){var g=THREE.AnimationClip.parseAnimation(d[E],c.bones);g&&h.push(g)}c.morphTargets&&(d=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(c.morphTargets,10),h=h.concat(d)),0<h.length&&(c.animations=h)}(),c.computeFaceNormals(),c.computeBoundingSphere(),void 0===a.materials||0===a.materials.length?{geometry:c}:(d=THREE.Loader.prototype.initMaterials(a.materials,h,this.crossOrigin),{geometry:c,materials:d})}},THREE.LoadingManager=function(a,h,c){var d=this,e=!1,f=0,E=0;this.onStart=void 0,this.onLoad=a,this.onProgress=h,this.onError=c,this.itemStart=function(a){E++,!1===e&&void 0!==d.onStart&&d.onStart(a,f,E),e=!0},this.itemEnd=function(a){f++,void 0!==d.onProgress&&d.onProgress(a,f,E),f===E&&(e=!1,void 0!==d.onLoad)&&d.onLoad()},this.itemError=function(a){void 0!==d.onError&&d.onError(a)}},THREE.DefaultLoadingManager=new THREE.LoadingManager,THREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager},THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,h,c,d){var e=this;new THREE.XHRLoader(e.manager).load(a,function(a){h(e.parse(JSON.parse(a)))},c,d)},parse:function(a){var h=new THREE.BufferGeometry,c=a.data.index,d={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};void 0!==c&&(c=new d[c.type](c.array),h.setIndex(new THREE.BufferAttribute(c,1)));var e=a.data.attributes,f;for(f in e){var E=e[f],c=new d[E.type](E.array);h.addAttribute(f,new THREE.BufferAttribute(c,E.itemSize))}if(d=a.data.groups||a.data.drawcalls||a.data.offsets,void 0!==d)for(f=0,c=d.length;f!==c;++f)e=d[f],h.addGroup(e.start,e.count,e.materialIndex);return a=a.data.boundingSphere,void 0!==a&&(d=new THREE.Vector3,void 0!==a.center&&d.fromArray(a.center),h.boundingSphere=new THREE.Sphere(d,a.radius)),h}},THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager,this.textures={}},THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,h,c,d){var e=this;new THREE.XHRLoader(e.manager).load(a,function(a){h(e.parse(JSON.parse(a)))},c,d)},setTextures:function(a){this.textures=a},getTexture:function(a){var h=this.textures;return void 0===h[a]&&void 0,h[a]},parse:function(a){var h=new THREE[a.type];if(void 0!==a.uuid&&(h.uuid=a.uuid),void 0!==a.name&&(h.name=a.name),void 0!==a.color&&h.color.setHex(a.color),void 0!==a.roughness&&(h.roughness=a.roughness),void 0!==a.metalness&&(h.metalness=a.metalness),void 0!==a.emissive&&h.emissive.setHex(a.emissive),void 0!==a.specular&&h.specular.setHex(a.specular),void 0!==a.shininess&&(h.shininess=a.shininess),void 0!==a.uniforms&&(h.uniforms=a.uniforms),void 0!==a.vertexShader&&(h.vertexShader=a.vertexShader),void 0!==a.fragmentShader&&(h.fragmentShader=a.fragmentShader),void 0!==a.vertexColors&&(h.vertexColors=a.vertexColors),void 0!==a.shading&&(h.shading=a.shading),void 0!==a.blending&&(h.blending=a.blending),void 0!==a.side&&(h.side=a.side),void 0!==a.opacity&&(h.opacity=a.opacity),void 0!==a.transparent&&(h.transparent=a.transparent),void 0!==a.alphaTest&&(h.alphaTest=a.alphaTest),void 0!==a.depthTest&&(h.depthTest=a.depthTest),void 0!==a.depthWrite&&(h.depthWrite=a.depthWrite),void 0!==a.colorWrite&&(h.colorWrite=a.colorWrite),void 0!==a.wireframe&&(h.wireframe=a.wireframe),void 0!==a.wireframeLinewidth&&(h.wireframeLinewidth=a.wireframeLinewidth),void 0!==a.size&&(h.size=a.size),void 0!==a.sizeAttenuation&&(h.sizeAttenuation=a.sizeAttenuation),void 0!==a.map&&(h.map=this.getTexture(a.map)),void 0!==a.alphaMap&&(h.alphaMap=this.getTexture(a.alphaMap),h.transparent=!0),void 0!==a.bumpMap&&(h.bumpMap=this.getTexture(a.bumpMap)),void 0!==a.bumpScale&&(h.bumpScale=a.bumpScale),void 0!==a.normalMap&&(h.normalMap=this.getTexture(a.normalMap)),void 0!==a.normalScale){var c=a.normalScale;!1===Array.isArray(c)&&(c=[c,c]),h.normalScale=(new THREE.Vector2).fromArray(c)}if(void 0!==a.displacementMap&&(h.displacementMap=this.getTexture(a.displacementMap)),void 0!==a.displacementScale&&(h.displacementScale=a.displacementScale),void 0!==a.displacementBias&&(h.displacementBias=a.displacementBias),void 0!==a.roughnessMap&&(h.roughnessMap=this.getTexture(a.roughnessMap)),void 0!==a.metalnessMap&&(h.metalnessMap=this.getTexture(a.metalnessMap)),void 0!==a.emissiveMap&&(h.emissiveMap=this.getTexture(a.emissiveMap)),void 0!==a.emissiveIntensity&&(h.emissiveIntensity=a.emissiveIntensity),void 0!==a.specularMap&&(h.specularMap=this.getTexture(a.specularMap)),void 0!==a.envMap&&(h.envMap=this.getTexture(a.envMap),h.combine=THREE.MultiplyOperation),a.reflectivity&&(h.reflectivity=a.reflectivity),void 0!==a.lightMap&&(h.lightMap=this.getTexture(a.lightMap)),void 0!==a.lightMapIntensity&&(h.lightMapIntensity=a.lightMapIntensity),void 0!==a.aoMap&&(h.aoMap=this.getTexture(a.aoMap)),void 0!==a.aoMapIntensity&&(h.aoMapIntensity=a.aoMapIntensity),void 0!==a.materials)for(var c=0,d=a.materials.length;d>c;c++)h.materials.push(this.parse(a.materials[c]));return h}},THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager,this.texturePath=""},THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,h,c,d){""===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf("/")+1));var e=this;new THREE.XHRLoader(e.manager).load(a,function(a){e.parse(JSON.parse(a),h)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,h){var c=this.parseGeometries(a.geometries),d=this.parseImages(a.images,function(){void 0!==h&&h(e)}),d=this.parseTextures(a.textures,d),d=this.parseMaterials(a.materials,d),e=this.parseObject(a.object,c,d);return a.animations&&(e.animations=this.parseAnimations(a.animations)),void 0!==a.images&&0!==a.images.length||void 0===h||h(e),e},parseGeometries:function(a){var h={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,e=0,f=a.length;f>e;e++){var E,g=a[e];switch(g.type){case"PlaneGeometry":case"PlaneBufferGeometry":E=new THREE[g.type](g.width,g.height,g.widthSegments,g.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":E=new THREE[g.type](g.width,g.height,g.depth,g.widthSegments,g.heightSegments,g.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":E=new THREE[g.type](g.radius,g.segments,g.thetaStart,g.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":E=new THREE[g.type](g.radiusTop,g.radiusBottom,g.height,g.radialSegments,g.heightSegments,g.openEnded,g.thetaStart,g.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":E=new THREE[g.type](g.radius,g.widthSegments,g.heightSegments,g.phiStart,g.phiLength,g.thetaStart,g.thetaLength);break;case"DodecahedronGeometry":E=new THREE.DodecahedronGeometry(g.radius,g.detail);break;case"IcosahedronGeometry":E=new THREE.IcosahedronGeometry(g.radius,g.detail);break;case"OctahedronGeometry":E=new THREE.OctahedronGeometry(g.radius,g.detail);break;case"TetrahedronGeometry":E=new THREE.TetrahedronGeometry(g.radius,g.detail);break;case"RingGeometry":case"RingBufferGeometry":E=new THREE[g.type](g.innerRadius,g.outerRadius,g.thetaSegments,g.phiSegments,g.thetaStart,g.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":E=new THREE[g.type](g.radius,g.tube,g.radialSegments,g.tubularSegments,g.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":E=new THREE[g.type](g.radius,g.tube,g.tubularSegments,g.radialSegments,g.p,g.q);break;case"LatheGeometry":E=new THREE.LatheGeometry(g.points,g.segments,g.phiStart,g.phiLength);break;case"BufferGeometry":E=d.parse(g);break;case"Geometry":E=c.parse(g.data,this.texturePath).geometry;break;default:continue}E.uuid=g.uuid,void 0!==g.name&&(E.name=g.name),h[g.uuid]=E}return h},parseMaterials:function(a,h){var c={};if(void 0!==a){var d=new THREE.MaterialLoader;d.setTextures(h);for(var e=0,f=a.length;f>e;e++){var E=d.parse(a[e]);c[E.uuid]=E}}return c},parseAnimations:function(a){for(var h=[],c=0;c<a.length;c++){var d=THREE.AnimationClip.parse(a[c]);h.push(d)}return h},parseImages:function(a,h){function c(a){return d.manager.itemStart(a),E.load(a,function(){d.manager.itemEnd(a)})}var d=this,e={};if(void 0!==a&&0<a.length){var f=new THREE.LoadingManager(h),E=new THREE.ImageLoader(f);E.setCrossOrigin(this.crossOrigin);for(var f=0,g=a.length;g>f;f++){var v=a[f],l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(v.url)?v.url:d.texturePath+v.url;e[v.uuid]=c(l)}}return e},parseTextures:function(a,h){function c(a){return"number"==typeof a?a:THREE[a]}var d={};if(void 0!==a)for(var e=0,f=a.length;f>e;e++){var E=a[e];void 0===E.image&&void 0,void 0===h[E.image]&&void 0;var g=new THREE.Texture(h[E.image]);g.needsUpdate=!0,g.uuid=E.uuid,void 0!==E.name&&(g.name=E.name),void 0!==E.mapping&&(g.mapping=c(E.mapping)),void 0!==E.offset&&(g.offset=new THREE.Vector2(E.offset[0],E.offset[1])),void 0!==E.repeat&&(g.repeat=new THREE.Vector2(E.repeat[0],E.repeat[1])),void 0!==E.minFilter&&(g.minFilter=c(E.minFilter)),void 0!==E.magFilter&&(g.magFilter=c(E.magFilter)),void 0!==E.anisotropy&&(g.anisotropy=E.anisotropy),Array.isArray(E.wrap)&&(g.wrapS=c(E.wrap[0]),g.wrapT=c(E.wrap[1])),d[E.uuid]=g}return d},parseObject:function(){var a=new THREE.Matrix4;return function(h,c,d){function e(a){return void 0===c[a]&&void 0,c[a]}function f(a){return void 0!==a?(void 0===d[a]&&void 0,d[a]):void 0}var E;switch(h.type){case"Scene":E=new THREE.Scene;break;case"PerspectiveCamera":E=new THREE.PerspectiveCamera(h.fov,h.aspect,h.near,h.far);break;case"OrthographicCamera":E=new THREE.OrthographicCamera(h.left,h.right,h.top,h.bottom,h.near,h.far);break;case"AmbientLight":E=new THREE.AmbientLight(h.color,h.intensity);break;case"DirectionalLight":E=new THREE.DirectionalLight(h.color,h.intensity);break;case"PointLight":E=new THREE.PointLight(h.color,h.intensity,h.distance,h.decay);break;case"SpotLight":E=new THREE.SpotLight(h.color,h.intensity,h.distance,h.angle,h.penumbra,h.decay);break;case"HemisphereLight":E=new THREE.HemisphereLight(h.color,h.groundColor,h.intensity);break;case"Mesh":E=e(h.geometry);var g=f(h.material);E=E.bones&&0<E.bones.length?new THREE.SkinnedMesh(E,g):new THREE.Mesh(E,g);break;case"LOD":E=new THREE.LOD;break;case"Line":E=new THREE.Line(e(h.geometry),f(h.material),h.mode);break;case"PointCloud":case"Points":E=new THREE.Points(e(h.geometry),f(h.material));break;case"Sprite":E=new THREE.Sprite(f(h.material));break;case"Group":E=new THREE.Group;break;default:E=new THREE.Object3D}if(E.uuid=h.uuid,void 0!==h.name&&(E.name=h.name),void 0!==h.matrix?(a.fromArray(h.matrix),a.decompose(E.position,E.quaternion,E.scale)):(void 0!==h.position&&E.position.fromArray(h.position),void 0!==h.rotation&&E.rotation.fromArray(h.rotation),void 0!==h.scale&&E.scale.fromArray(h.scale)),void 0!==h.castShadow&&(E.castShadow=h.castShadow),void 0!==h.receiveShadow&&(E.receiveShadow=h.receiveShadow),void 0!==h.visible&&(E.visible=h.visible),void 0!==h.userData&&(E.userData=h.userData),void 0!==h.children)for(var v in h.children)E.add(this.parseObject(h.children[v],c,d));if("LOD"===h.type)for(h=h.levels,g=0;g<h.length;g++){var l=h[g];v=E.getObjectByProperty("uuid",l.object),void 0!==v&&E.addLevel(v,l.distance)}return E}}()},THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager},THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,h,c,d){var e=new THREE.Texture,f=new THREE.ImageLoader(this.manager);return f.setCrossOrigin(this.crossOrigin),f.setPath(this.path),f.load(a,function(a){e.image=a,e.needsUpdate=!0,void 0!==h&&h(e)},c,d),e},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}},THREE.CubeTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager},THREE.CubeTextureLoader.prototype={constructor:THREE.CubeTextureLoader,load:function(a,h,c,d){function e(c){E.load(a[c],function(a){f.images[c]=a,g++,6===g&&(f.needsUpdate=!0,h&&h(f))},void 0,d)}var f=new THREE.CubeTexture,E=new THREE.ImageLoader(this.manager);E.setCrossOrigin(this.crossOrigin),E.setPath(this.path);var g=0;for(c=0;c<a.length;++c)e(c);return f},setCrossOrigin:function(a){this.crossOrigin=a},setPath:function(a){this.path=a}},THREE.DataTextureLoader=THREE.BinaryTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager,this._parser=null},THREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(a,h,c,d){var e=this,f=new THREE.DataTexture,E=new THREE.XHRLoader(this.manager);return E.setResponseType("arraybuffer"),E.load(a,function(a){(a=e._parser(a))&&(void 0!==a.image?f.image=a.image:void 0!==a.data&&(f.image.width=a.width,f.image.height=a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:THREE.ClampToEdgeWrapping,f.wrapT=void 0!==a.wrapT?a.wrapT:THREE.ClampToEdgeWrapping,f.magFilter=void 0!==a.magFilter?a.magFilter:THREE.LinearFilter,f.minFilter=void 0!==a.minFilter?a.minFilter:THREE.LinearMipMapLinearFilter,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps),1===a.mipmapCount&&(f.minFilter=THREE.LinearFilter),f.needsUpdate=!0,h&&h(f,a))},c,d),f}},THREE.CompressedTextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager,this._parser=null},THREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(a,h,c,d){function e(e){v.load(a[e],function(a){a=f._parser(a,!0),E[e]={width:a.width,height:a.height,format:a.format,mipmaps:a.mipmaps},l+=1,6===l&&(1===a.mipmapCount&&(g.minFilter=THREE.LinearFilter),g.format=a.format,g.needsUpdate=!0,h&&h(g))},c,d)}var f=this,E=[],g=new THREE.CompressedTexture;g.image=E;var v=new THREE.XHRLoader(this.manager);if(v.setPath(this.path),v.setResponseType("arraybuffer"),Array.isArray(a))for(var l=0,p=0,n=a.length;n>p;++p)e(p);else v.load(a,function(a){if(a=f._parser(a,!0),a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,d=0;c>d;d++){E[d]={mipmaps:[]};for(var e=0;e<a.mipmapCount;e++)E[d].mipmaps.push(a.mipmaps[d*a.mipmapCount+e]),E[d].format=a.format,E[d].width=a.width,E[d].height=a.height}else g.image.width=a.width,g.image.height=a.height,g.mipmaps=a.mipmaps;1===a.mipmapCount&&(g.minFilter=THREE.LinearFilter),g.format=a.format,g.needsUpdate=!0,h&&h(g)},c,d);return g},setPath:function(a){this.path=a}},THREE.Material=function(){Object.defineProperty(this,"id",{value:THREE.MaterialIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Material",this.side=THREE.FrontSide,this.opacity=1,this.transparent=!1,this.blending=THREE.NormalBlending,this.blendSrc=THREE.SrcAlphaFactor,this.blendDst=THREE.OneMinusSrcAlphaFactor,this.blendEquation=THREE.AddEquation,this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=null,this.depthFunc=THREE.LessEqualDepth,this.colorWrite=this.depthWrite=this.depthTest=!0,this.precision=null,this.polygonOffset=!1,this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0,this.premultipliedAlpha=!1,this.overdraw=0,this._needsUpdate=this.visible=!0},THREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update(),this._needsUpdate=a},setValues:function(a){if(void 0!==a)for(var h in a){var c=a[h];if(void 0===c);else{var d=this[h];void 0===d?void 0:d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[h]="overdraw"===h?Number(c):c}}},toJSON:function(a){function h(a){var h=[],c;for(c in a){var d=a[c];delete d.metadata,h.push(d)}return h}var c=void 0===a;c&&(a={textures:{},images:{}});var d={metadata:{version:4.4,type:"Material",generator:"Material.toJSON"}};return d.uuid=this.uuid,d.type=this.type,""!==this.name&&(d.name=this.name),this.color instanceof THREE.Color&&(d.color=this.color.getHex()),.5!==this.roughness&&(d.roughness=this.roughness),.5!==this.metalness&&(d.metalness=this.metalness),this.emissive instanceof THREE.Color&&(d.emissive=this.emissive.getHex()),this.specular instanceof THREE.Color&&(d.specular=this.specular.getHex()),void 0!==this.shininess&&(d.shininess=this.shininess),this.map instanceof THREE.Texture&&(d.map=this.map.toJSON(a).uuid),this.alphaMap instanceof THREE.Texture&&(d.alphaMap=this.alphaMap.toJSON(a).uuid),this.lightMap instanceof THREE.Texture&&(d.lightMap=this.lightMap.toJSON(a).uuid),this.bumpMap instanceof THREE.Texture&&(d.bumpMap=this.bumpMap.toJSON(a).uuid,d.bumpScale=this.bumpScale),this.normalMap instanceof THREE.Texture&&(d.normalMap=this.normalMap.toJSON(a).uuid,d.normalScale=this.normalScale.toArray()),this.displacementMap instanceof THREE.Texture&&(d.displacementMap=this.displacementMap.toJSON(a).uuid,d.displacementScale=this.displacementScale,d.displacementBias=this.displacementBias),this.roughnessMap instanceof THREE.Texture&&(d.roughnessMap=this.roughnessMap.toJSON(a).uuid),this.metalnessMap instanceof THREE.Texture&&(d.metalnessMap=this.metalnessMap.toJSON(a).uuid),this.emissiveMap instanceof THREE.Texture&&(d.emissiveMap=this.emissiveMap.toJSON(a).uuid),this.specularMap instanceof THREE.Texture&&(d.specularMap=this.specularMap.toJSON(a).uuid),this.envMap instanceof THREE.Texture&&(d.envMap=this.envMap.toJSON(a).uuid,d.reflectivity=this.reflectivity),void 0!==this.size&&(d.size=this.size),void 0!==this.sizeAttenuation&&(d.sizeAttenuation=this.sizeAttenuation),void 0!==this.vertexColors&&this.vertexColors!==THREE.NoColors&&(d.vertexColors=this.vertexColors),void 0!==this.shading&&this.shading!==THREE.SmoothShading&&(d.shading=this.shading),void 0!==this.blending&&this.blending!==THREE.NormalBlending&&(d.blending=this.blending),void 0!==this.side&&this.side!==THREE.FrontSide&&(d.side=this.side),1>this.opacity&&(d.opacity=this.opacity),!0===this.transparent&&(d.transparent=this.transparent),0<this.alphaTest&&(d.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(d.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(d.wireframe=this.wireframe),1<this.wireframeLinewidth&&(d.wireframeLinewidth=this.wireframeLinewidth),c&&(c=h(a.textures),a=h(a.images),0<c.length&&(d.textures=c),0<a.length&&(d.images=a)),d
},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.name=a.name,this.side=a.side,this.opacity=a.opacity,this.transparent=a.transparent,this.blending=a.blending,this.blendSrc=a.blendSrc,this.blendDst=a.blendDst,this.blendEquation=a.blendEquation,this.blendSrcAlpha=a.blendSrcAlpha,this.blendDstAlpha=a.blendDstAlpha,this.blendEquationAlpha=a.blendEquationAlpha,this.depthFunc=a.depthFunc,this.depthTest=a.depthTest,this.depthWrite=a.depthWrite,this.colorWrite=a.colorWrite,this.precision=a.precision,this.polygonOffset=a.polygonOffset,this.polygonOffsetFactor=a.polygonOffsetFactor,this.polygonOffsetUnits=a.polygonOffsetUnits,this.alphaTest=a.alphaTest,this.premultipliedAlpha=a.premultipliedAlpha,this.overdraw=a.overdraw,this.visible=a.visible,this},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.Material.prototype),THREE.MaterialIdCount=0,THREE.LineBasicMaterial=function(a){THREE.Material.call(this),this.type="LineBasicMaterial",this.color=new THREE.Color(16777215),this.linewidth=1,this.linejoin=this.linecap="round",this.blending=THREE.NormalBlending,this.vertexColors=THREE.NoColors,this.fog=!0,this.setValues(a)},THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial,THREE.LineBasicMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.linewidth=a.linewidth,this.linecap=a.linecap,this.linejoin=a.linejoin,this.vertexColors=a.vertexColors,this.fog=a.fog,this},THREE.LineDashedMaterial=function(a){THREE.Material.call(this),this.type="LineDashedMaterial",this.color=new THREE.Color(16777215),this.scale=this.linewidth=1,this.dashSize=3,this.gapSize=1,this.blending=THREE.NormalBlending,this.vertexColors=THREE.NoColors,this.fog=!0,this.setValues(a)},THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial,THREE.LineDashedMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.linewidth=a.linewidth,this.scale=a.scale,this.dashSize=a.dashSize,this.gapSize=a.gapSize,this.vertexColors=a.vertexColors,this.fog=a.fog,this},THREE.MeshBasicMaterial=function(a){THREE.Material.call(this),this.type="MeshBasicMaterial",this.color=new THREE.Color(16777215),this.aoMap=this.map=null,this.aoMapIntensity=1,this.envMap=this.alphaMap=this.specularMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.shading=THREE.SmoothShading,this.blending=THREE.NormalBlending,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinejoin=this.wireframeLinecap="round",this.vertexColors=THREE.NoColors,this.morphTargets=this.skinning=!1,this.setValues(a)},THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial,THREE.MeshBasicMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.fog=a.fog,this.shading=a.shading,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.vertexColors=a.vertexColors,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this},THREE.MeshLambertMaterial=function(a){THREE.Material.call(this),this.type="MeshLambertMaterial",this.color=new THREE.Color(16777215),this.lightMap=this.map=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.envMap=this.alphaMap=this.specularMap=this.emissiveMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.blending=THREE.NormalBlending,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinejoin=this.wireframeLinecap="round",this.vertexColors=THREE.NoColors,this.morphNormals=this.morphTargets=this.skinning=!1,this.setValues(a)},THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial,THREE.MeshLambertMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.fog=a.fog,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.vertexColors=a.vertexColors,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this},THREE.MeshPhongMaterial=function(a){THREE.Material.call(this),this.type="MeshPhongMaterial",this.color=new THREE.Color(16777215),this.specular=new THREE.Color(1118481),this.shininess=30,this.lightMap=this.map=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.bumpMap=this.emissiveMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new THREE.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.envMap=this.alphaMap=this.specularMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.fog=!0,this.shading=THREE.SmoothShading,this.blending=THREE.NormalBlending,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinejoin=this.wireframeLinecap="round",this.vertexColors=THREE.NoColors,this.morphNormals=this.morphTargets=this.skinning=!1,this.setValues(a)},THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial,THREE.MeshPhongMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.specular.copy(a.specular),this.shininess=a.shininess,this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.fog=a.fog,this.shading=a.shading,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.vertexColors=a.vertexColors,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this},THREE.MeshStandardMaterial=function(a){THREE.Material.call(this),this.type="MeshStandardMaterial",this.color=new THREE.Color(16777215),this.metalness=this.roughness=.5,this.lightMap=this.map=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.bumpMap=this.emissiveMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new THREE.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.envMap=this.alphaMap=this.metalnessMap=this.roughnessMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.fog=!0,this.shading=THREE.SmoothShading,this.blending=THREE.NormalBlending,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinejoin=this.wireframeLinecap="round",this.vertexColors=THREE.NoColors,this.morphNormals=this.morphTargets=this.skinning=!1,this.setValues(a)},THREE.MeshStandardMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshStandardMaterial.prototype.constructor=THREE.MeshStandardMaterial,THREE.MeshStandardMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.roughness=a.roughness,this.metalness=a.metalness,this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.roughnessMap=a.roughnessMap,this.metalnessMap=a.metalnessMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.envMapIntensity=a.envMapIntensity,this.refractionRatio=a.refractionRatio,this.fog=a.fog,this.shading=a.shading,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.vertexColors=a.vertexColors,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this},THREE.MeshDepthMaterial=function(a){THREE.Material.call(this),this.type="MeshDepthMaterial",this.wireframe=this.morphTargets=!1,this.wireframeLinewidth=1,this.setValues(a)},THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial,THREE.MeshDepthMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this},THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a),this.type="MeshNormalMaterial",this.wireframe=!1,this.wireframeLinewidth=1,this.morphTargets=!1,this.setValues(a)},THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial,THREE.MeshNormalMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this},THREE.MultiMaterial=function(a){this.uuid=THREE.Math.generateUUID(),this.type="MultiMaterial",this.materials=a instanceof Array?a:[],this.visible=!0},THREE.MultiMaterial.prototype={constructor:THREE.MultiMaterial,toJSON:function(a){for(var h={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},c=this.materials,d=0,e=c.length;e>d;d++){var f=c[d].toJSON(a);delete f.metadata,h.materials.push(f)}return h.visible=this.visible,h},clone:function(){for(var a=new this.constructor,h=0;h<this.materials.length;h++)a.materials.push(this.materials[h].clone());return a.visible=this.visible,a}},THREE.PointsMaterial=function(a){THREE.Material.call(this),this.type="PointsMaterial",this.color=new THREE.Color(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.blending=THREE.NormalBlending,this.vertexColors=THREE.NoColors,this.fog=!0,this.setValues(a)},THREE.PointsMaterial.prototype=Object.create(THREE.Material.prototype),THREE.PointsMaterial.prototype.constructor=THREE.PointsMaterial,THREE.PointsMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.size=a.size,this.sizeAttenuation=a.sizeAttenuation,this.vertexColors=a.vertexColors,this.fog=a.fog,this},THREE.ShaderMaterial=function(a){THREE.Material.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.shading=THREE.SmoothShading,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.lights=this.fog=!1,this.vertexColors=THREE.NoColors,this.morphNormals=this.morphTargets=this.skinning=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==a&&(void 0!==a.attributes&&void 0,this.setValues(a))},THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype),THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial,THREE.ShaderMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.fragmentShader=a.fragmentShader,this.vertexShader=a.vertexShader,this.uniforms=THREE.UniformsUtils.clone(a.uniforms),this.defines=a.defines,this.shading=a.shading,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.fog=a.fog,this.lights=a.lights,this.vertexColors=a.vertexColors,this.skinning=a.skinning,this.morphTargets=a.morphTargets,this.morphNormals=a.morphNormals,this.extensions=a.extensions,this},THREE.ShaderMaterial.prototype.toJSON=function(a){return a=THREE.Material.prototype.toJSON.call(this,a),a.uniforms=this.uniforms,a.vertexShader=this.vertexShader,a.fragmentShader=this.fragmentShader,a},THREE.RawShaderMaterial=function(a){THREE.ShaderMaterial.call(this,a),this.type="RawShaderMaterial"},THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial,THREE.SpriteMaterial=function(a){THREE.Material.call(this),this.type="SpriteMaterial",this.color=new THREE.Color(16777215),this.map=null,this.rotation=0,this.fog=!1,this.setValues(a)},THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial,THREE.SpriteMaterial.prototype.copy=function(a){return THREE.Material.prototype.copy.call(this,a),this.color.copy(a.color),this.map=a.map,this.rotation=a.rotation,this.fog=a.fog,this},THREE.Texture=function(a,h,c,d,e,f,E,g,v){Object.defineProperty(this,"id",{value:THREE.TextureIdCount++}),this.uuid=THREE.Math.generateUUID(),this.sourceFile=this.name="",this.image=void 0!==a?a:THREE.Texture.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==h?h:THREE.Texture.DEFAULT_MAPPING,this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping,this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping,this.magFilter=void 0!==e?e:THREE.LinearFilter,this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter,this.anisotropy=void 0!==v?v:1,this.format=void 0!==E?E:THREE.RGBAFormat,this.type=void 0!==g?g:THREE.UnsignedByteType,this.offset=new THREE.Vector2(0,0),this.repeat=new THREE.Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=THREE.LinearEncoding,this.version=0,this.onUpdate=null},THREE.Texture.DEFAULT_IMAGE=void 0,THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping,THREE.Texture.prototype={constructor:THREE.Texture,set needsUpdate(a){!0===a&&this.version++},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.image=a.image,this.mipmaps=a.mipmaps.slice(0),this.mapping=a.mapping,this.wrapS=a.wrapS,this.wrapT=a.wrapT,this.magFilter=a.magFilter,this.minFilter=a.minFilter,this.anisotropy=a.anisotropy,this.format=a.format,this.type=a.type,this.offset.copy(a.offset),this.repeat.copy(a.repeat),this.generateMipmaps=a.generateMipmaps,this.premultiplyAlpha=a.premultiplyAlpha,this.flipY=a.flipY,this.unpackAlignment=a.unpackAlignment,this.encoding=a.encoding,this},toJSON:function(a){if(void 0!==a.textures[this.uuid])return a.textures[this.uuid];var h={metadata:{version:4.4,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy};if(void 0!==this.image){var c=this.image;if(void 0===c.uuid&&(c.uuid=THREE.Math.generateUUID()),void 0===a.images[c.uuid]){var d=a.images,e=c.uuid,f=c.uuid,E;void 0!==c.toDataURL?E=c:(E=document.createElement("canvas"),E.width=c.width,E.height=c.height,E.getContext("2d").drawImage(c,0,0,c.width,c.height)),E=2048<E.width||2048<E.height?E.toDataURL("image/jpeg",.6):E.toDataURL("image/png"),d[e]={uuid:f,url:E}}h.image=c.uuid}return a.textures[this.uuid]=h},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(a){if(this.mapping===THREE.UVMapping){if(a.multiply(this.repeat),a.add(this.offset),0>a.x||1<a.x)switch(this.wrapS){case THREE.RepeatWrapping:a.x-=Math.floor(a.x);break;case THREE.ClampToEdgeWrapping:a.x=0>a.x?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(a.x)%2)?a.x=Math.ceil(a.x)-a.x:a.x-=Math.floor(a.x)}if(0>a.y||1<a.y)switch(this.wrapT){case THREE.RepeatWrapping:a.y-=Math.floor(a.y);break;case THREE.ClampToEdgeWrapping:a.y=0>a.y?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(a.y)%2)?a.y=Math.ceil(a.y)-a.y:a.y-=Math.floor(a.y)}this.flipY&&(a.y=1-a.y)}}},THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype),THREE.TextureIdCount=0,THREE.CanvasTexture=function(a,h,c,d,e,f,E,g,v){THREE.Texture.call(this,a,h,c,d,e,f,E,g,v),this.needsUpdate=!0},THREE.CanvasTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CanvasTexture.prototype.constructor=THREE.CanvasTexture,THREE.CubeTexture=function(a,h,c,d,e,f,E,g,v){a=void 0!==a?a:[],h=void 0!==h?h:THREE.CubeReflectionMapping,THREE.Texture.call(this,a,h,c,d,e,f,E,g,v),this.flipY=!1},THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CubeTexture.prototype.constructor=THREE.CubeTexture,Object.defineProperty(THREE.CubeTexture.prototype,"images",{get:function(){return this.image},set:function(a){this.image=a}}),THREE.CompressedTexture=function(a,h,c,d,e,f,E,g,v,l,p){THREE.Texture.call(this,null,f,E,g,v,l,d,e,p),this.image={width:h,height:c},this.mipmaps=a,this.generateMipmaps=this.flipY=!1},THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture,THREE.DataTexture=function(a,h,c,d,e,f,E,g,v,l,p){THREE.Texture.call(this,null,f,E,g,v,l,d,e,p),this.image={data:a,width:h,height:c},this.magFilter=void 0!==v?v:THREE.NearestFilter,this.minFilter=void 0!==l?l:THREE.NearestFilter,this.generateMipmaps=this.flipY=!1},THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype),THREE.DataTexture.prototype.constructor=THREE.DataTexture,THREE.VideoTexture=function(a,h,c,d,e,f,E,g,v){function l(){requestAnimationFrame(l),a.readyState===a.HAVE_ENOUGH_DATA&&(p.needsUpdate=!0)}THREE.Texture.call(this,a,h,c,d,e,f,E,g,v),this.generateMipmaps=!1;var p=this;l()},THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype),THREE.VideoTexture.prototype.constructor=THREE.VideoTexture,THREE.Group=function(){THREE.Object3D.call(this),this.type="Group"},THREE.Group.prototype=Object.create(THREE.Object3D.prototype),THREE.Group.prototype.constructor=THREE.Group,THREE.Points=function(a,h){THREE.Object3D.call(this),this.type="Points",this.geometry=void 0!==a?a:new THREE.Geometry,this.material=void 0!==h?h:new THREE.PointsMaterial({color:16777215*Math.random()})},THREE.Points.prototype=Object.create(THREE.Object3D.prototype),THREE.Points.prototype.constructor=THREE.Points,THREE.Points.prototype.raycast=function(){var a=new THREE.Matrix4,h=new THREE.Ray,c=new THREE.Sphere;return function(d,e){function f(a,c){var f=h.distanceSqToPoint(a);if(p>f){var g=h.closestPointToPoint(a);g.applyMatrix4(v);var l=d.ray.origin.distanceTo(g);l<d.near||l>d.far||e.push({distance:l,distanceToRay:Math.sqrt(f),point:g.clone(),index:c,face:null,object:E})}}var E=this,g=this.geometry,v=this.matrixWorld,l=d.params.Points.threshold;if(null===g.boundingSphere&&g.computeBoundingSphere(),c.copy(g.boundingSphere),c.applyMatrix4(v),!1!==d.ray.intersectsSphere(c)){a.getInverse(v),h.copy(d.ray).applyMatrix4(a);var l=l/((this.scale.x+this.scale.y+this.scale.z)/3),p=l*l,l=new THREE.Vector3;if(g instanceof THREE.BufferGeometry){var n=g.index,g=g.attributes.position.array;if(null!==n)for(var m=n.array,n=0,q=m.length;q>n;n++){var u=m[n];l.fromArray(g,3*u),f(l,u)}else for(n=0,m=g.length/3;m>n;n++)l.fromArray(g,3*n),f(l,n)}else for(l=g.vertices,n=0,m=l.length;m>n;n++)f(l[n],n)}}}(),THREE.Points.prototype.clone=function(){return new this.constructor(this.geometry,this.material).copy(this)},THREE.Line=function(a,h,c){return 1===c?new THREE.LineSegments(a,h):(THREE.Object3D.call(this),this.type="Line",this.geometry=void 0!==a?a:new THREE.Geometry,void(this.material=void 0!==h?h:new THREE.LineBasicMaterial({color:16777215*Math.random()})))},THREE.Line.prototype=Object.create(THREE.Object3D.prototype),THREE.Line.prototype.constructor=THREE.Line,THREE.Line.prototype.raycast=function(){var a=new THREE.Matrix4,h=new THREE.Ray,c=new THREE.Sphere;return function(d,e){var f=d.linePrecision,f=f*f,E=this.geometry,g=this.matrixWorld;if(null===E.boundingSphere&&E.computeBoundingSphere(),c.copy(E.boundingSphere),c.applyMatrix4(g),!1!==d.ray.intersectsSphere(c)){a.getInverse(g),h.copy(d.ray).applyMatrix4(a);var v=new THREE.Vector3,l=new THREE.Vector3,g=new THREE.Vector3,p=new THREE.Vector3,n=this instanceof THREE.LineSegments?2:1;if(E instanceof THREE.BufferGeometry){var m=E.index,q=E.attributes.position.array;if(null!==m)for(var m=m.array,E=0,u=m.length-1;u>E;E+=n){var T=m[E+1];v.fromArray(q,3*m[E]),l.fromArray(q,3*T),T=h.distanceSqToSegment(v,l,p,g),T>f||(p.applyMatrix4(this.matrixWorld),T=d.ray.origin.distanceTo(p),T<d.near||T>d.far||e.push({distance:T,point:g.clone().applyMatrix4(this.matrixWorld),index:E,face:null,faceIndex:null,object:this}))}else for(E=0,u=q.length/3-1;u>E;E+=n)v.fromArray(q,3*E),l.fromArray(q,3*E+3),T=h.distanceSqToSegment(v,l,p,g),T>f||(p.applyMatrix4(this.matrixWorld),T=d.ray.origin.distanceTo(p),T<d.near||T>d.far||e.push({distance:T,point:g.clone().applyMatrix4(this.matrixWorld),index:E,face:null,faceIndex:null,object:this}))}else if(E instanceof THREE.Geometry)for(v=E.vertices,l=v.length,E=0;l-1>E;E+=n)T=h.distanceSqToSegment(v[E],v[E+1],p,g),T>f||(p.applyMatrix4(this.matrixWorld),T=d.ray.origin.distanceTo(p),T<d.near||T>d.far||e.push({distance:T,point:g.clone().applyMatrix4(this.matrixWorld),index:E,face:null,faceIndex:null,object:this}))}}}(),THREE.Line.prototype.clone=function(){return new this.constructor(this.geometry,this.material).copy(this)},THREE.LineStrip=0,THREE.LinePieces=1,THREE.LineSegments=function(a,h){THREE.Line.call(this,a,h),this.type="LineSegments"},THREE.LineSegments.prototype=Object.create(THREE.Line.prototype),THREE.LineSegments.prototype.constructor=THREE.LineSegments,THREE.Mesh=function(a,h){THREE.Object3D.call(this),this.type="Mesh",this.geometry=void 0!==a?a:new THREE.Geometry,this.material=void 0!==h?h:new THREE.MeshBasicMaterial({color:16777215*Math.random()}),this.drawMode=THREE.TrianglesDrawMode,this.updateMorphTargets()},THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype),THREE.Mesh.prototype.constructor=THREE.Mesh,THREE.Mesh.prototype.setDrawMode=function(a){this.drawMode=a},THREE.Mesh.prototype.updateMorphTargets=function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1,this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var a=0,h=this.geometry.morphTargets.length;h>a;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}},THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){return void 0!==this.morphTargetDictionary[a]?this.morphTargetDictionary[a]:0},THREE.Mesh.prototype.raycast=function(){function a(a,h,c,d,e,f,E){return THREE.Triangle.barycoordFromPoint(a,h,c,d,T),e.multiplyScalar(T.x),f.multiplyScalar(T.y),E.multiplyScalar(T.z),e.add(f).add(E),e.clone()}function h(a,h,c,d,e,f,E){var g=a.material;return null===(g.side===THREE.BackSide?c.intersectTriangle(f,e,d,!0,E):c.intersectTriangle(d,e,f,g.side!==THREE.DoubleSide,E))?null:(s.copy(E),s.applyMatrix4(a.matrixWorld),c=h.ray.origin.distanceTo(s),c<h.near||c>h.far?null:{distance:c,point:s.clone(),object:a})}function c(c,d,e,f,l,p,n,s){return E.fromArray(f,3*p),g.fromArray(f,3*n),v.fromArray(f,3*s),(c=h(c,d,e,E,g,v,t))&&(l&&(m.fromArray(l,2*p),q.fromArray(l,2*n),u.fromArray(l,2*s),c.uv=a(t,E,g,v,m,q,u)),c.face=new THREE.Face3(p,n,s,THREE.Triangle.normal(E,g,v)),c.faceIndex=p),c}var d=new THREE.Matrix4,e=new THREE.Ray,f=new THREE.Sphere,E=new THREE.Vector3,g=new THREE.Vector3,v=new THREE.Vector3,l=new THREE.Vector3,p=new THREE.Vector3,n=new THREE.Vector3,m=new THREE.Vector2,q=new THREE.Vector2,u=new THREE.Vector2,T=new THREE.Vector3,t=new THREE.Vector3,s=new THREE.Vector3;return function(s,T){var x=this.geometry,y=this.material,R=this.matrixWorld;if(void 0!==y&&(null===x.boundingSphere&&x.computeBoundingSphere(),f.copy(x.boundingSphere),f.applyMatrix4(R),!1!==s.ray.intersectsSphere(f)&&(d.getInverse(R),e.copy(s.ray).applyMatrix4(d),null===x.boundingBox||!1!==e.intersectsBox(x.boundingBox)))){var H,_;if(x instanceof THREE.BufferGeometry){var b,M,y=x.index,R=x.attributes,x=R.position.array;if(void 0!==R.uv&&(H=R.uv.array),null!==y)for(var R=y.array,S=0,w=R.length;w>S;S+=3)y=R[S],b=R[S+1],M=R[S+2],(_=c(this,s,e,x,H,y,b,M))&&(_.faceIndex=Math.floor(S/3),T.push(_));else for(S=0,w=x.length;w>S;S+=9)y=S/3,b=y+1,M=y+2,(_=c(this,s,e,x,H,y,b,M))&&(_.index=y,T.push(_))}else if(x instanceof THREE.Geometry){var A,L,R=y instanceof THREE.MultiMaterial,S=!0===R?y.materials:null,w=x.vertices;b=x.faces,M=x.faceVertexUvs[0],0<M.length&&(H=M);for(var C=0,P=b.length;P>C;C++){var B=b[C];if(_=!0===R?S[B.materialIndex]:y,void 0!==_){if(M=w[B.a],A=w[B.b],L=w[B.c],!0===_.morphTargets){_=x.morphTargets;var I=this.morphTargetInfluences;E.set(0,0,0),g.set(0,0,0),v.set(0,0,0);for(var D=0,U=_.length;U>D;D++){var F=I[D];if(0!==F){var N=_[D].vertices;E.addScaledVector(l.subVectors(N[B.a],M),F),g.addScaledVector(p.subVectors(N[B.b],A),F),v.addScaledVector(n.subVectors(N[B.c],L),F)}}E.add(M),g.add(A),v.add(L),M=E,A=g,L=v}(_=h(this,s,e,M,A,L,t))&&(H&&(I=H[C],m.copy(I[0]),q.copy(I[1]),u.copy(I[2]),_.uv=a(t,M,A,L,m,q,u)),_.face=B,_.faceIndex=C,T.push(_))}}}}}}(),THREE.Mesh.prototype.clone=function(){return new this.constructor(this.geometry,this.material).copy(this)},THREE.Bone=function(a){THREE.Object3D.call(this),this.type="Bone",this.skin=a},THREE.Bone.prototype=Object.create(THREE.Object3D.prototype),THREE.Bone.prototype.constructor=THREE.Bone,THREE.Bone.prototype.copy=function(a){return THREE.Object3D.prototype.copy.call(this,a),this.skin=a.skin,this},THREE.Skeleton=function(a,h,c){if(this.useVertexTexture=void 0!==c?c:!0,this.identityMatrix=new THREE.Matrix4,a=a||[],this.bones=a.slice(0),this.useVertexTexture?(a=Math.sqrt(4*this.bones.length),a=THREE.Math.nextPowerOfTwo(Math.ceil(a)),this.boneTextureHeight=this.boneTextureWidth=a=Math.max(a,4),this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType)):this.boneMatrices=new Float32Array(16*this.bones.length),void 0===h)this.calculateInverses();else if(this.bones.length===h.length)this.boneInverses=h.slice(0);else for(this.boneInverses=[],h=0,a=this.bones.length;a>h;h++)this.boneInverses.push(new THREE.Matrix4)},THREE.Skeleton.prototype.calculateInverses=function(){this.boneInverses=[];for(var a=0,h=this.bones.length;h>a;a++){var c=new THREE.Matrix4;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld),this.boneInverses.push(c)}},THREE.Skeleton.prototype.pose=function(){for(var a,h=0,c=this.bones.length;c>h;h++)(a=this.bones[h])&&a.matrixWorld.getInverse(this.boneInverses[h]);for(h=0,c=this.bones.length;c>h;h++)(a=this.bones[h])&&(a.parent?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale))},THREE.Skeleton.prototype.update=function(){var a=new THREE.Matrix4;return function(){for(var h=0,c=this.bones.length;c>h;h++)a.multiplyMatrices(this.bones[h]?this.bones[h].matrixWorld:this.identityMatrix,this.boneInverses[h]),a.flattenToArrayOffset(this.boneMatrices,16*h);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),THREE.Skeleton.prototype.clone=function(){return new THREE.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)},THREE.SkinnedMesh=function(a,h,c){if(THREE.Mesh.call(this,a,h),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new THREE.Matrix4,this.bindMatrixInverse=new THREE.Matrix4,a=[],this.geometry&&void 0!==this.geometry.bones){for(var d,e=0,f=this.geometry.bones.length;f>e;++e)d=this.geometry.bones[e],h=new THREE.Bone(this),a.push(h),h.name=d.name,h.position.fromArray(d.pos),h.quaternion.fromArray(d.rotq),void 0!==d.scl&&h.scale.fromArray(d.scl);for(e=0,f=this.geometry.bones.length;f>e;++e)d=this.geometry.bones[e],-1!==d.parent&&null!==d.parent?a[d.parent].add(a[e]):this.add(a[e])}this.normalizeSkinWeights(),this.updateMatrixWorld(!0),this.bind(new THREE.Skeleton(a,void 0,c),this.matrixWorld)},THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype),THREE.SkinnedMesh.prototype.constructor=THREE.SkinnedMesh,THREE.SkinnedMesh.prototype.bind=function(a,h){this.skeleton=a,void 0===h&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),h=this.matrixWorld),this.bindMatrix.copy(h),this.bindMatrixInverse.getInverse(h)},THREE.SkinnedMesh.prototype.pose=function(){this.skeleton.pose()},THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinWeights.length;a++){var h=this.geometry.skinWeights[a],c=1/h.lengthManhattan();1/0!==c?h.multiplyScalar(c):h.set(1,0,0,0)}else if(this.geometry instanceof THREE.BufferGeometry)for(var h=new THREE.Vector4,d=this.geometry.attributes.skinWeight,a=0;a<d.count;a++)h.x=d.getX(a),h.y=d.getY(a),h.z=d.getZ(a),h.w=d.getW(a),c=1/h.lengthManhattan(),1/0!==c?h.multiplyScalar(c):h.set(1,0,0,0),d.setXYZW(a,h.x,h.y,h.z,h.w)},THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):void 0},THREE.SkinnedMesh.prototype.clone=function(){return new this.constructor(this.geometry,this.material,this.useVertexTexture).copy(this)},THREE.LOD=function(){THREE.Object3D.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},objects:{get:function(){return this.levels}}})},THREE.LOD.prototype=Object.create(THREE.Object3D.prototype),THREE.LOD.prototype.constructor=THREE.LOD,THREE.LOD.prototype.addLevel=function(a,h){void 0===h&&(h=0),h=Math.abs(h);for(var c=this.levels,d=0;d<c.length&&!(h<c[d].distance);d++);c.splice(d,0,{distance:h,object:a}),this.add(a)},THREE.LOD.prototype.getObjectForDistance=function(a){for(var h=this.levels,c=1,d=h.length;d>c&&!(a<h[c].distance);c++);return h[c-1].object},THREE.LOD.prototype.raycast=function(){var a=new THREE.Vector3;return function(h,c){a.setFromMatrixPosition(this.matrixWorld);var d=h.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(h,c)}}(),THREE.LOD.prototype.update=function(){var a=new THREE.Vector3,h=new THREE.Vector3;
return function(c){var d=this.levels;if(1<d.length){a.setFromMatrixPosition(c.matrixWorld),h.setFromMatrixPosition(this.matrixWorld),c=a.distanceTo(h),d[0].object.visible=!0;for(var e=1,f=d.length;f>e&&c>=d[e].distance;e++)d[e-1].object.visible=!1,d[e].object.visible=!0;for(;f>e;e++)d[e].object.visible=!1}}}(),THREE.LOD.prototype.copy=function(a){THREE.Object3D.prototype.copy.call(this,a,!1),a=a.levels;for(var h=0,c=a.length;c>h;h++){var d=a[h];this.addLevel(d.object.clone(),d.distance)}return this},THREE.LOD.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a),a.object.levels=[];for(var h=this.levels,c=0,d=h.length;d>c;c++){var e=h[c];a.object.levels.push({object:e.object.uuid,distance:e.distance})}return a},THREE.Sprite=function(){var a=new Uint16Array([0,1,2,0,2,3]),h=new Float32Array([-.5,-.5,0,.5,-.5,0,.5,.5,0,-.5,.5,0]),c=new Float32Array([0,0,1,0,1,1,0,1]),d=new THREE.BufferGeometry;return d.setIndex(new THREE.BufferAttribute(a,1)),d.addAttribute("position",new THREE.BufferAttribute(h,3)),d.addAttribute("uv",new THREE.BufferAttribute(c,2)),function(a){THREE.Object3D.call(this),this.type="Sprite",this.geometry=d,this.material=void 0!==a?a:new THREE.SpriteMaterial}}(),THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype),THREE.Sprite.prototype.constructor=THREE.Sprite,THREE.Sprite.prototype.raycast=function(){var a=new THREE.Vector3;return function(h,c){a.setFromMatrixPosition(this.matrixWorld);var d=h.ray.distanceSqToPoint(a);d>this.scale.x*this.scale.y||c.push({distance:Math.sqrt(d),point:this.position,face:null,object:this})}}(),THREE.Sprite.prototype.clone=function(){return new this.constructor(this.material).copy(this)},THREE.Particle=THREE.Sprite,THREE.LensFlare=function(a,h,c,d,e){THREE.Object3D.call(this),this.lensFlares=[],this.positionScreen=new THREE.Vector3,this.customUpdateCallback=void 0,void 0!==a&&this.add(a,h,c,d,e)},THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype),THREE.LensFlare.prototype.constructor=THREE.LensFlare,THREE.LensFlare.prototype.add=function(a,h,c,d,e,f){void 0===h&&(h=-1),void 0===c&&(c=0),void 0===f&&(f=1),void 0===e&&(e=new THREE.Color(16777215)),void 0===d&&(d=THREE.NormalBlending),c=Math.min(c,Math.max(0,c)),this.lensFlares.push({texture:a,size:h,distance:c,x:0,y:0,z:0,scale:1,rotation:0,opacity:f,color:e,blending:d})},THREE.LensFlare.prototype.updateLensFlares=function(){var a,h=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;h>a;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*.25,c.rotation+=.25*(c.wantedRotation-c.rotation)},THREE.LensFlare.prototype.copy=function(a){THREE.Object3D.prototype.copy.call(this,a),this.positionScreen.copy(a.positionScreen),this.customUpdateCallback=a.customUpdateCallback;for(var h=0,c=a.lensFlares.length;c>h;h++)this.lensFlares.push(a.lensFlares[h]);return this},THREE.Scene=function(){THREE.Object3D.call(this),this.type="Scene",this.overrideMaterial=this.fog=null,this.autoUpdate=!0},THREE.Scene.prototype=Object.create(THREE.Object3D.prototype),THREE.Scene.prototype.constructor=THREE.Scene,THREE.Scene.prototype.copy=function(a,h){return THREE.Object3D.prototype.copy.call(this,a,h),null!==a.fog&&(this.fog=a.fog.clone()),null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone()),this.autoUpdate=a.autoUpdate,this.matrixAutoUpdate=a.matrixAutoUpdate,this},THREE.Fog=function(a,h,c){this.name="",this.color=new THREE.Color(a),this.near=void 0!==h?h:1,this.far=void 0!==c?c:1e3},THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)},THREE.FogExp2=function(a,h){this.name="",this.color=new THREE.Color(a),this.density=void 0!==h?h:25e-5},THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)},THREE.ShaderChunk={},THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n",THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",THREE.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif\n",THREE.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif",THREE.ShaderChunk.begin_vertex="\nvec3 transformed = vec3( position );\n",THREE.ShaderChunk.beginnormal_vertex="\nvec3 objectNormal = vec3( normal );\n",THREE.ShaderChunk.bsdfs="bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n	return any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n		if( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n			float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n			float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n			return distanceFalloff * maxDistanceCutoffFactor;\n#else\n			return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n		}\n		return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_Smith( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n",THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif",THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n",THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif",THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif",THREE.ShaderChunk.common="#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n",THREE.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\nconst float cubeUV_textureSize = 1024.0;\nint getFaceFromDirection(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    int face = -1;\n    if( absDirection.x > absDirection.z ) {\n        if(absDirection.x > absDirection.y )\n            face = direction.x > 0.0 ? 0 : 3;\n        else\n            face = direction.y > 0.0 ? 1 : 4;\n    }\n    else {\n        if(absDirection.z > absDirection.y )\n            face = direction.z > 0.0 ? 2 : 5;\n        else\n            face = direction.y > 0.0 ? 1 : 4;\n    }\n    return face;\n}\nconst float cubeUV_maxLods1 = log2(cubeUV_textureSize*0.25) - 1.0;\nconst float cubeUV_rangeClamp = exp2((6.0 - 1.0) * 2.0);\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n    float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n    float dxRoughness = dFdx(roughness);\n    float dyRoughness = dFdy(roughness);\n    vec3 dx = dFdx( vec * scale * dxRoughness );\n    vec3 dy = dFdy( vec * scale * dyRoughness );\n    float d = max( dot( dx, dx ), dot( dy, dy ) );\n    d = clamp(d, 1.0, cubeUV_rangeClamp);\n    float mipLevel = 0.5 * log2(d);\n    return vec2(floor(mipLevel), fract(mipLevel));\n}\nconst float cubeUV_maxLods2 = log2(cubeUV_textureSize*0.25) - 2.0;\nconst float cubeUV_rcpTextureSize = 1.0 / cubeUV_textureSize;\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n    mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n    float a = 16.0 * cubeUV_rcpTextureSize;\n    vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n    vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n    float powScale = exp2_packed.x * exp2_packed.y;\n    float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n    float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n    bool bRes = mipLevel == 0.0;\n    scale =  bRes && (scale < a) ? a : scale;\n    vec3 r;\n    vec2 offset;\n    int face = getFaceFromDirection(direction);\n    float rcpPowScale = 1.0 / powScale;\n    if( face == 0) {\n        r = vec3(direction.x, -direction.z, direction.y);\n        offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 1) {\n        r = vec3(direction.y, direction.x, direction.z);\n        offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 2) {\n        r = vec3(direction.z, direction.x, direction.y);\n        offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n    }\n    else if( face == 3) {\n        r = vec3(direction.x, direction.z, direction.y);\n        offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    else if( face == 4) {\n        r = vec3(direction.y, direction.x, -direction.z);\n        offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    else {\n        r = vec3(direction.z, -direction.x, direction.y);\n        offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n    }\n    r = normalize(r);\n    float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n    vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n    vec2 base = offset + vec2( texelOffset );\n    return base + s * ( scale - 2.0 * texelOffset );\n}\nconst float cubeUV_maxLods3 = log2(cubeUV_textureSize*0.25) - 3.0;\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n    float roughnessVal = roughness* cubeUV_maxLods3;\n    float r1 = floor(roughnessVal);\n    float r2 = r1 + 1.0;\n    float t = fract(roughnessVal);\n    vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n    float s = mipInfo.y;\n    float level0 = mipInfo.x;\n    float level1 = level0 + 1.0;\n    level1 = level1 > 5.0 ? 5.0 : level1;\n    level0 += min( floor( s + 0.5 ), 5.0 );\n    vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n    vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n    vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n    vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n    vec4 result = mix(color10, color20, t);\n    return vec4(result.rgb, 1.0);\n}\n#endif\n",THREE.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\n	objectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n",THREE.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",THREE.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n",THREE.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",THREE.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n",THREE.ShaderChunk.encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n",THREE.ShaderChunk.encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef DOUBLE_SIDED\n		float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#else\n		float flipNormal = 1.0;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#endif\n	envColor = envMapTexelToLinear( envColor );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n",THREE.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( STANDARD )\n	uniform float reflectivity;\n	uniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n",THREE.ShaderChunk.envmap_pars_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n	varying vec3 vReflect;\n	uniform float refractionRatio;\n#endif\n",THREE.ShaderChunk.envmap_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n	vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n	vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	#ifdef ENVMAP_MODE_REFLECTION\n		vReflect = reflect( cameraToVertex, worldNormal );\n	#else\n		vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n	#endif\n#endif\n",THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\n	#ifdef USE_LOGDEPTHBUF_EXT\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n	#else\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n	#endif\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n	uniform vec3 fogColor;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif",THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif",THREE.ShaderChunk.lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		directLight = getPointDirectLightIrradiance( pointLights[ i ], geometry );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		directLight = getSpotDirectLightIrradiance( spotLights[ i ], geometry );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directLight = getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n",THREE.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	IncidentLight getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n		return directLight;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	IncidentLight getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		if ( testLightInRange( lightDistance, pointLight.distance ) ) {\n			directLight.color = pointLight.color;\n			directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n		return directLight;\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	IncidentLight getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n		return directLight;\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( STANDARD )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n		#endif\n		envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n",THREE.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",THREE.ShaderChunk.lights_phong_pars_fragment="#ifdef USE_ENVMAP\n	varying vec3 vWorldPosition;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n",THREE.ShaderChunk.lights_phong_pars_vertex="#ifdef USE_ENVMAP\n	varying vec3 vWorldPosition;\n#endif\n",THREE.ShaderChunk.lights_phong_vertex="#ifdef USE_ENVMAP\n	vWorldPosition = worldPosition.xyz;\n#endif\n",THREE.ShaderChunk.lights_standard_fragment="StandardMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n",THREE.ShaderChunk.lights_standard_pars_fragment="struct StandardMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n};\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct				RE_Direct_Standard\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Standard\n#define RE_IndirectSpecular		RE_IndirectSpecular_Standard\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",THREE.ShaderChunk.lights_template="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		directLight = getPointDirectLightIrradiance( pointLight, geometry );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		directLight = getSpotDirectLightIrradiance( spotLight, geometry );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		directLight = getDirectionalDirectLightIrradiance( directionalLight, geometry );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#ifdef USE_LIGHTMAP\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n	 	irradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n	#endif\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	vec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n	RE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n#endif\n",THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif",THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n",THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif",THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n	#endif\n#endif\n",THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif\n",THREE.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n",THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n#endif\n",THREE.ShaderChunk.metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.r;\n#endif\n",THREE.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif",THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif",THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n",THREE.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n	#endif\n#endif\n#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n",THREE.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",THREE.ShaderChunk.project_vertex="#ifdef USE_SKINNING\n	vec4 mvPosition = modelViewMatrix * skinned;\n#else\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n",THREE.ShaderChunk.roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.r;\n#endif\n",THREE.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif",THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float unpackDepth( const in vec4 rgba_depth ) {\n		const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n		return dot( rgba_depth, bit_shift );\n	}\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return 1.0;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		vec3 bd3D = normalize( lightToPosition );\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n",THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n",THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n",THREE.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n",THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneGlobalMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneGlobalMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n",THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n#endif\n",THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",THREE.ShaderChunk.specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif",THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif",THREE.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",THREE.ShaderChunk.tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",THREE.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif",THREE.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif",THREE.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif",THREE.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif",THREE.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n#endif\n",THREE.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n	#ifdef USE_SKINNING\n		vec4 worldPosition = modelMatrix * skinned;\n	#else\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n	#endif\n#endif\n",THREE.UniformsUtils={merge:function(a){for(var h={},c=0;c<a.length;c++){var d=this.clone(a[c]),e;
for(e in d)h[e]=d[e]}return h},clone:function(a){var h={},c;for(c in a){h[c]={};for(var d in a[c]){var e=a[c][d];h[c][d]=e instanceof THREE.Color||e instanceof THREE.Vector2||e instanceof THREE.Vector3||e instanceof THREE.Vector4||e instanceof THREE.Matrix3||e instanceof THREE.Matrix4||e instanceof THREE.Texture?e.clone():Array.isArray(e)?e.slice():e}}return h}},THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},specularMap:{type:"t",value:null},alphaMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:.98}},aomap:{aoMap:{type:"t",value:null},aoMapIntensity:{type:"f",value:1}},lightmap:{lightMap:{type:"t",value:null},lightMapIntensity:{type:"f",value:1}},emissivemap:{emissiveMap:{type:"t",value:null}},bumpmap:{bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},displacementmap:{displacementMap:{type:"t",value:null},displacementScale:{type:"f",value:1},displacementBias:{type:"f",value:0}},roughnessmap:{roughnessMap:{type:"t",value:null}},metalnessmap:{metalnessMap:{type:"t",value:null}},fog:{fogDensity:{type:"f",value:25e-5},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2e3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLights:{type:"sa",value:[],properties:{direction:{type:"v3"},color:{type:"c"},shadow:{type:"i"},shadowBias:{type:"f"},shadowRadius:{type:"f"},shadowMapSize:{type:"v2"}}},directionalShadowMap:{type:"tv",value:[]},directionalShadowMatrix:{type:"m4v",value:[]},spotLights:{type:"sa",value:[],properties:{color:{type:"c"},position:{type:"v3"},direction:{type:"v3"},distance:{type:"f"},coneCos:{type:"f"},penumbraCos:{type:"f"},decay:{type:"f"},shadow:{type:"i"},shadowBias:{type:"f"},shadowRadius:{type:"f"},shadowMapSize:{type:"v2"}}},spotShadowMap:{type:"tv",value:[]},spotShadowMatrix:{type:"m4v",value:[]},pointLights:{type:"sa",value:[],properties:{color:{type:"c"},position:{type:"v3"},decay:{type:"f"},distance:{type:"f"},shadow:{type:"i"},shadowBias:{type:"f"},shadowRadius:{type:"f"},shadowMapSize:{type:"v2"}}},pointShadowMap:{type:"tv",value:[]},pointShadowMatrix:{type:"m4v",value:[]},hemisphereLights:{type:"sa",value:[],properties:{direction:{type:"v3"},skyColor:{type:"c"},groundColor:{type:"c"}}}},points:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)}}},THREE.ShaderChunk.cube_frag="uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n	#include <logdepthbuf_fragment>\n}\n",THREE.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n	#include <logdepthbuf_vertex>\n}\n",THREE.ShaderChunk.depth_frag="uniform float mNear;\nuniform float mFar;\nuniform float opacity;\n#include <common>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	#ifdef USE_LOGDEPTHBUF_EXT\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n	#else\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n	#endif\n	float color = 1.0 - smoothstep( mNear, mFar, depth );\n	gl_FragColor = vec4( vec3( color ), opacity );\n}\n",THREE.ShaderChunk.depth_vert="#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n}\n",THREE.ShaderChunk.depthRGBA_frag="#include <common>\n#include <logdepthbuf_pars_fragment>\nvec4 pack_depth( const in float depth ) {\n	const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n	const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n	vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n	res -= res.xxyz * bit_mask;\n	return res;\n}\nvoid main() {\n	#include <logdepthbuf_fragment>\n	#ifdef USE_LOGDEPTHBUF_EXT\n		gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n	#else\n		gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n	#endif\n}\n",THREE.ShaderChunk.depthRGBA_vert="#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n}\n",THREE.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\nvec4 pack1K ( float depth ) {\n	depth /= 1000.0;\n	const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n	const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n	vec4 res = mod( depth * bitSh * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n	res -= res.xxyz * bitMsk;\n	return res;\n}\nfloat unpack1K ( vec4 color ) {\n	const vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n	return dot( color, bitSh ) * 1000.0;\n}\nvoid main () {\n	gl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\n}\n",THREE.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\nvoid main() {\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	vWorldPosition = worldPosition;\n}\n",THREE.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	vec3 direction = normalize( vWorldPosition );\n	vec2 sampleUV;\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <logdepthbuf_fragment>\n}\n",THREE.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n	#include <logdepthbuf_vertex>\n}\n",THREE.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n}\n",THREE.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight;\n	reflectedLight.directDiffuse = vec3( 0.0 );\n	reflectedLight.directSpecular = vec3( 0.0 );\n	reflectedLight.indirectDiffuse = diffuseColor.rgb;\n	reflectedLight.indirectSpecular = vec3( 0.0 );\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n}\n",THREE.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderChunk.meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <lights_phong_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_phong_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderChunk.meshstandard_frag="#define STANDARD\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_standard_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_standard_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshstandard_vert="#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderChunk.normal_frag="uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n	#include <logdepthbuf_fragment>\n}\n",THREE.ShaderChunk.normal_vert="varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	vNormal = normalize( normalMatrix * normal );\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n}\n",THREE.ShaderChunk.points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <project_vertex>\n	#ifdef USE_SIZEATTENUATION\n		gl_PointSize = size * ( scale / - mvPosition.z );\n	#else\n		gl_PointSize = size;\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.meshbasic_vert,fragmentShader:THREE.ShaderChunk.meshbasic_frag},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)}}]),vertexShader:THREE.ShaderChunk.meshlambert_vert,fragmentShader:THREE.ShaderChunk.meshlambert_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"f",value:30}}]),vertexShader:THREE.ShaderChunk.meshphong_vert,fragmentShader:THREE.ShaderChunk.meshphong_frag},standard:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.roughnessmap,THREE.UniformsLib.metalnessmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)},roughness:{type:"f",value:.5},metalness:{type:"f",value:0},envMapIntensity:{type:"f",value:1}}]),vertexShader:THREE.ShaderChunk.meshstandard_vert,fragmentShader:THREE.ShaderChunk.meshstandard_frag},points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.points_vert,fragmentShader:THREE.ShaderChunk.points_frag},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:THREE.ShaderChunk.linedashed_vert,fragmentShader:THREE.ShaderChunk.linedashed_frag},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2e3},opacity:{type:"f",value:1}},vertexShader:THREE.ShaderChunk.depth_vert,fragmentShader:THREE.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:THREE.ShaderChunk.normal_vert,fragmentShader:THREE.ShaderChunk.normal_frag},cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:THREE.ShaderChunk.cube_vert,fragmentShader:THREE.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:THREE.ShaderChunk.equirect_vert,fragmentShader:THREE.ShaderChunk.equirect_frag},depthRGBA:{uniforms:{},vertexShader:THREE.ShaderChunk.depthRGBA_vert,fragmentShader:THREE.ShaderChunk.depthRGBA_frag},distanceRGBA:{uniforms:{lightPos:{type:"v3",value:new THREE.Vector3(0,0,0)}},vertexShader:THREE.ShaderChunk.distanceRGBA_vert,fragmentShader:THREE.ShaderChunk.distanceRGBA_frag}},THREE.WebGLRenderer=function(a){function h(a,h,c,d){!0===F&&(a*=d,h*=d,c*=d),Ht.clearColor(a,h,c,d)}function c(){Ht.init(),Ht.scissor(tt.copy(ut).multiplyScalar(lt)),Ht.viewport(nt.copy(dt).multiplyScalar(lt)),h(at.r,at.g,at.b,st)}function d(){et=Z=null,$="",J=-1,Ht.reset()}function e(a){a.preventDefault(),d(),c(),_t.clear()}function f(a){a=a.target,a.removeEventListener("dispose",f);e:{var h=_t.get(a);if(a.image&&h.__image__webglTextureCube)r.deleteTexture(h.__image__webglTextureCube);else{if(void 0===h.__webglInit)break e;r.deleteTexture(h.__webglTexture)}_t.delete(a)}vt.textures--}function E(a){a=a.target,a.removeEventListener("dispose",E);var h=_t.get(a),c=_t.get(a.texture);if(a&&void 0!==c.__webglTexture){if(r.deleteTexture(c.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(c=0;6>c;c++)r.deleteFramebuffer(h.__webglFramebuffer[c]),r.deleteRenderbuffer(h.__webglDepthbuffer[c]);else r.deleteFramebuffer(h.__webglFramebuffer),r.deleteRenderbuffer(h.__webglDepthbuffer);_t.delete(a.texture),_t.delete(a)}vt.textures--}function g(a){a=a.target,a.removeEventListener("dispose",g),v(a),_t.delete(a)}function v(a){var h=_t.get(a).program;a.program=void 0,void 0!==h&&Mt.releaseProgram(h)}function l(a,h){return Math.abs(h[0])-Math.abs(a[0])}function p(a,h){return a.object.renderOrder!==h.object.renderOrder?a.object.renderOrder-h.object.renderOrder:a.material.id!==h.material.id?a.material.id-h.material.id:a.z!==h.z?a.z-h.z:a.id-h.id}function n(a,h){return a.object.renderOrder!==h.object.renderOrder?a.object.renderOrder-h.object.renderOrder:a.z!==h.z?h.z-a.z:a.id-h.id}function m(a,h,c,d,e){var f;c.transparent?(d=z,f=++k):(d=O,f=++G),f=d[f],void 0!==f?(f.id=a.id,f.object=a,f.geometry=h,f.material=c,f.z=mt.z,f.group=e):(f={id:a.id,object:a,geometry:h,material:c,z:mt.z,group:e},d.push(f))}function q(a,h){if(!1!==a.visible){if(a.layers.test(h.layers))if(a instanceof THREE.Light)V.push(a);else if(a instanceof THREE.Sprite)!1!==a.frustumCulled&&!0!==Et.intersectsObject(a)||W.push(a);else if(a instanceof THREE.LensFlare)X.push(a);else if(a instanceof THREE.ImmediateRenderObject)!0===Y.sortObjects&&(mt.setFromMatrixPosition(a.matrixWorld),mt.applyProjection(ft)),m(a,null,a.material,mt.z,null);else if((a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof THREE.Points)&&(a instanceof THREE.SkinnedMesh&&a.skeleton.update(),!1===a.frustumCulled||!0===Et.intersectsObject(a))){var c=a.material;if(!0===c.visible){!0===Y.sortObjects&&(mt.setFromMatrixPosition(a.matrixWorld),mt.applyProjection(ft));var d=bt.update(a);if(c instanceof THREE.MultiMaterial)for(var e=d.groups,f=c.materials,c=0,E=e.length;E>c;c++){var g=e[c],v=f[g.materialIndex];!0===v.visible&&m(a,d,v,mt.z,g)}else m(a,d,c,mt.z,null)}}for(d=a.children,c=0,E=d.length;E>c;c++)q(d[c],h)}}function u(a,h,c,d){for(var e=0,f=a.length;f>e;e++){var E=a[e],g=E.object,v=E.geometry,l=void 0===d?E.material:d,E=E.group;if(g.modelViewMatrix.multiplyMatrices(h.matrixWorldInverse,g.matrixWorld),g.normalMatrix.getNormalMatrix(g.modelViewMatrix),g instanceof THREE.ImmediateRenderObject){T(l);var m=t(h,c,l,g);$="",g.render(function(a){Y.renderBufferImmediate(a,m,l)})}else Y.renderBufferDirect(h,c,v,l,g,E)}}function T(a){a.side!==THREE.DoubleSide?Ht.enable(r.CULL_FACE):Ht.disable(r.CULL_FACE),Ht.setFlipSided(a.side===THREE.BackSide),!0===a.transparent?Ht.setBlending(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha):Ht.setBlending(THREE.NoBlending),Ht.setDepthFunc(a.depthFunc),Ht.setDepthTest(a.depthTest),Ht.setDepthWrite(a.depthWrite),Ht.setColorWrite(a.colorWrite),Ht.setPolygonOffset(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}function t(a,h,c,d){ot=0;var e=_t.get(c);if(void 0===e.program&&(c.needsUpdate=!0),void 0!==e.lightsHash&&e.lightsHash!==gt.hash&&(c.needsUpdate=!0),c.needsUpdate){e:{var f=_t.get(c),E=Mt.getParameters(c,gt,h,d),l=Mt.getProgramCode(c,E),m=f.program,p=!0;if(void 0===m)c.addEventListener("dispose",g);else if(m.code!==l)v(c);else{if(void 0!==E.shaderID)break e;p=!1}if(p&&(E.shaderID?(m=THREE.ShaderLib[E.shaderID],f.__webglShader={name:c.type,uniforms:THREE.UniformsUtils.clone(m.uniforms),vertexShader:m.vertexShader,fragmentShader:m.fragmentShader}):f.__webglShader={name:c.type,uniforms:c.uniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader},c.__webglShader=f.__webglShader,m=Mt.acquireProgram(c,E,l),f.program=m,c.program=m),E=m.getAttributes(),c.morphTargets)for(l=c.numSupportedMorphTargets=0;l<Y.maxMorphTargets;l++)0<=E["morphTarget"+l]&&c.numSupportedMorphTargets++;if(c.morphNormals)for(l=c.numSupportedMorphNormals=0;l<Y.maxMorphNormals;l++)0<=E["morphNormal"+l]&&c.numSupportedMorphNormals++;f.uniformsList=[];var E=f.__webglShader.uniforms,l=f.program.getUniforms(),n;for(n in E)(m=l[n])&&f.uniformsList.push([f.__webglShader.uniforms[n],m]);for((c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshStandardMaterial||c.lights)&&(f.lightsHash=gt.hash,E.ambientLightColor.value=gt.ambient,E.directionalLights.value=gt.directional,E.spotLights.value=gt.spot,E.pointLights.value=gt.point,E.hemisphereLights.value=gt.hemi,E.directionalShadowMap.value=gt.directionalShadowMap,E.directionalShadowMatrix.value=gt.directionalShadowMatrix,E.spotShadowMap.value=gt.spotShadowMap,E.spotShadowMatrix.value=gt.spotShadowMatrix,E.pointShadowMap.value=gt.pointShadowMap,E.pointShadowMatrix.value=gt.pointShadowMatrix),f.hasDynamicUniforms=!1,n=0,E=f.uniformsList.length;E>n;n++)if(!0===f.uniformsList[n][0].dynamic){f.hasDynamicUniforms=!0;break}}c.needsUpdate=!1}if(m=l=p=!1,f=e.program,n=f.getUniforms(),E=e.__webglShader.uniforms,f.id!==Z&&(r.useProgram(f.program),Z=f.id,m=l=p=!0),c.id!==J&&(J=c.id,l=!0),(p||a!==et)&&(r.uniformMatrix4fv(n.projectionMatrix,!1,a.projectionMatrix.elements),xt.logarithmicDepthBuffer&&r.uniform1f(n.logDepthBufFC,2/(Math.log(a.far+1)/Math.LN2)),a!==et&&(et=a,m=l=!0),(c instanceof THREE.ShaderMaterial||c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshStandardMaterial||c.envMap)&&void 0!==n.cameraPosition&&(mt.setFromMatrixPosition(a.matrixWorld),r.uniform3f(n.cameraPosition,mt.x,mt.y,mt.z)),(c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshBasicMaterial||c instanceof THREE.MeshStandardMaterial||c instanceof THREE.ShaderMaterial||c.skinning)&&void 0!==n.viewMatrix&&r.uniformMatrix4fv(n.viewMatrix,!1,a.matrixWorldInverse.elements),void 0!==n.toneMappingExposure&&r.uniform1f(n.toneMappingExposure,Y.toneMappingExposure),void 0!==n.toneMappingWhitePoint&&r.uniform1f(n.toneMappingWhitePoint,Y.toneMappingWhitePoint)),c.skinning&&(d.bindMatrix&&void 0!==n.bindMatrix&&r.uniformMatrix4fv(n.bindMatrix,!1,d.bindMatrix.elements),d.bindMatrixInverse&&void 0!==n.bindMatrixInverse&&r.uniformMatrix4fv(n.bindMatrixInverse,!1,d.bindMatrixInverse.elements),xt.floatVertexTextures&&d.skeleton&&d.skeleton.useVertexTexture?(void 0!==n.boneTexture&&(p=s(),r.uniform1i(n.boneTexture,p),Y.setTexture(d.skeleton.boneTexture,p)),void 0!==n.boneTextureWidth&&r.uniform1i(n.boneTextureWidth,d.skeleton.boneTextureWidth),void 0!==n.boneTextureHeight&&r.uniform1i(n.boneTextureHeight,d.skeleton.boneTextureHeight)):d.skeleton&&d.skeleton.boneMatrices&&void 0!==n.boneGlobalMatrices&&r.uniformMatrix4fv(n.boneGlobalMatrices,!1,d.skeleton.boneMatrices)),l){if((c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshStandardMaterial||c.lights)&&(l=m,E.ambientLightColor.needsUpdate=l,E.directionalLights.needsUpdate=l,E.pointLights.needsUpdate=l,E.spotLights.needsUpdate=l,E.hemisphereLights.needsUpdate=l),h&&c.fog&&(E.fogColor.value=h.color,h instanceof THREE.Fog?(E.fogNear.value=h.near,E.fogFar.value=h.far):h instanceof THREE.FogExp2&&(E.fogDensity.value=h.density)),c instanceof THREE.MeshBasicMaterial||c instanceof THREE.MeshLambertMaterial||c instanceof THREE.MeshPhongMaterial||c instanceof THREE.MeshStandardMaterial){E.opacity.value=c.opacity,E.diffuse.value=c.color,c.emissive&&E.emissive.value.copy(c.emissive).multiplyScalar(c.emissiveIntensity),E.map.value=c.map,E.specularMap.value=c.specularMap,E.alphaMap.value=c.alphaMap,c.aoMap&&(E.aoMap.value=c.aoMap,E.aoMapIntensity.value=c.aoMapIntensity);
var q;c.map?q=c.map:c.specularMap?q=c.specularMap:c.displacementMap?q=c.displacementMap:c.normalMap?q=c.normalMap:c.bumpMap?q=c.bumpMap:c.roughnessMap?q=c.roughnessMap:c.metalnessMap?q=c.metalnessMap:c.alphaMap?q=c.alphaMap:c.emissiveMap&&(q=c.emissiveMap),void 0!==q&&(q instanceof THREE.WebGLRenderTarget&&(q=q.texture),h=q.offset,q=q.repeat,E.offsetRepeat.value.set(h.x,h.y,q.x,q.y)),E.envMap.value=c.envMap,E.flipEnvMap.value=c.envMap instanceof THREE.WebGLRenderTargetCube?1:-1,E.reflectivity.value=c.reflectivity,E.refractionRatio.value=c.refractionRatio}c instanceof THREE.LineBasicMaterial?(E.diffuse.value=c.color,E.opacity.value=c.opacity):c instanceof THREE.LineDashedMaterial?(E.diffuse.value=c.color,E.opacity.value=c.opacity,E.dashSize.value=c.dashSize,E.totalSize.value=c.dashSize+c.gapSize,E.scale.value=c.scale):c instanceof THREE.PointsMaterial?(E.diffuse.value=c.color,E.opacity.value=c.opacity,E.size.value=c.size*lt,E.scale.value=C.clientHeight/2,E.map.value=c.map,null!==c.map&&(q=c.map.offset,c=c.map.repeat,E.offsetRepeat.value.set(q.x,q.y,c.x,c.y))):c instanceof THREE.MeshLambertMaterial?(c.lightMap&&(E.lightMap.value=c.lightMap,E.lightMapIntensity.value=c.lightMapIntensity),c.emissiveMap&&(E.emissiveMap.value=c.emissiveMap)):c instanceof THREE.MeshPhongMaterial?(E.specular.value=c.specular,E.shininess.value=Math.max(c.shininess,1e-4),c.lightMap&&(E.lightMap.value=c.lightMap,E.lightMapIntensity.value=c.lightMapIntensity),c.emissiveMap&&(E.emissiveMap.value=c.emissiveMap),c.bumpMap&&(E.bumpMap.value=c.bumpMap,E.bumpScale.value=c.bumpScale),c.normalMap&&(E.normalMap.value=c.normalMap,E.normalScale.value.copy(c.normalScale)),c.displacementMap&&(E.displacementMap.value=c.displacementMap,E.displacementScale.value=c.displacementScale,E.displacementBias.value=c.displacementBias)):c instanceof THREE.MeshStandardMaterial?(E.roughness.value=c.roughness,E.metalness.value=c.metalness,c.roughnessMap&&(E.roughnessMap.value=c.roughnessMap),c.metalnessMap&&(E.metalnessMap.value=c.metalnessMap),c.lightMap&&(E.lightMap.value=c.lightMap,E.lightMapIntensity.value=c.lightMapIntensity),c.emissiveMap&&(E.emissiveMap.value=c.emissiveMap),c.bumpMap&&(E.bumpMap.value=c.bumpMap,E.bumpScale.value=c.bumpScale),c.normalMap&&(E.normalMap.value=c.normalMap,E.normalScale.value.copy(c.normalScale)),c.displacementMap&&(E.displacementMap.value=c.displacementMap,E.displacementScale.value=c.displacementScale,E.displacementBias.value=c.displacementBias),c.envMap&&(E.envMapIntensity.value=c.envMapIntensity)):c instanceof THREE.MeshDepthMaterial?(E.mNear.value=a.near,E.mFar.value=a.far,E.opacity.value=c.opacity):c instanceof THREE.MeshNormalMaterial&&(E.opacity.value=c.opacity),R(e.uniformsList)}if(r.uniformMatrix4fv(n.modelViewMatrix,!1,d.modelViewMatrix.elements),n.normalMatrix&&r.uniformMatrix3fv(n.normalMatrix,!1,d.normalMatrix.elements),void 0!==n.modelMatrix&&r.uniformMatrix4fv(n.modelMatrix,!1,d.matrixWorld.elements),!0===e.hasDynamicUniforms){for(e=e.uniformsList,c=[],q=0,h=e.length;h>q;q++)n=e[q][0],E=n.onUpdateCallback,void 0!==E&&(E.bind(n)(d,a),c.push(e[q]));R(c)}return f}function s(){var a=ot;return a>=xt.maxTextures&&void 0,ot+=1,a}function y(a,h,c,d){var e;if("1i"===h)r.uniform1i(c,d);else if("1f"===h)r.uniform1f(c,d);else if("2f"===h)r.uniform2f(c,d[0],d[1]);else if("3f"===h)r.uniform3f(c,d[0],d[1],d[2]);else if("4f"===h)r.uniform4f(c,d[0],d[1],d[2],d[3]);else if("1iv"===h)r.uniform1iv(c,d);else if("3iv"===h)r.uniform3iv(c,d);else if("1fv"===h)r.uniform1fv(c,d);else if("2fv"===h)r.uniform2fv(c,d);else if("3fv"===h)r.uniform3fv(c,d);else if("4fv"===h)r.uniform4fv(c,d);else if("Matrix2fv"===h)r.uniformMatrix2fv(c,!1,d);else if("Matrix3fv"===h)r.uniformMatrix3fv(c,!1,d);else if("Matrix4fv"===h)r.uniformMatrix4fv(c,!1,d);else if("i"===h)r.uniform1i(c,d);else if("f"===h)r.uniform1f(c,d);else if("v2"===h)r.uniform2f(c,d.x,d.y);else if("v3"===h)r.uniform3f(c,d.x,d.y,d.z);else if("v4"===h)r.uniform4f(c,d.x,d.y,d.z,d.w);else if("c"===h)r.uniform3f(c,d.r,d.g,d.b);else if("s"===h){a=a.properties;for(var E in a){e=a[E];var f=c[E],g=d[E];y(e,e.type,f,g)}}else if("sa"===h){a=a.properties,h=0;for(var v=d.length;v>h;h++)for(E in a)e=a[E],f=c[h][E],g=d[h][E],y(e,e.type,f,g)}else if("iv1"===h)r.uniform1iv(c,d);else if("iv"===h)r.uniform3iv(c,d);else if("fv1"===h)r.uniform1fv(c,d);else if("fv"===h)r.uniform3fv(c,d);else if("v2v"===h){for(void 0===a._array&&(a._array=new Float32Array(2*d.length)),e=h=0,E=d.length;E>h;h++,e+=2)a._array[e+0]=d[h].x,a._array[e+1]=d[h].y;r.uniform2fv(c,a._array)}else if("v3v"===h){for(void 0===a._array&&(a._array=new Float32Array(3*d.length)),e=h=0,E=d.length;E>h;h++,e+=3)a._array[e+0]=d[h].x,a._array[e+1]=d[h].y,a._array[e+2]=d[h].z;r.uniform3fv(c,a._array)}else if("v4v"===h){for(void 0===a._array&&(a._array=new Float32Array(4*d.length)),e=h=0,E=d.length;E>h;h++,e+=4)a._array[e+0]=d[h].x,a._array[e+1]=d[h].y,a._array[e+2]=d[h].z,a._array[e+3]=d[h].w;r.uniform4fv(c,a._array)}else if("m2"===h)r.uniformMatrix2fv(c,!1,d.elements);else if("m3"===h)r.uniformMatrix3fv(c,!1,d.elements);else if("m3v"===h){for(void 0===a._array&&(a._array=new Float32Array(9*d.length)),h=0,E=d.length;E>h;h++)d[h].flattenToArrayOffset(a._array,9*h);r.uniformMatrix3fv(c,!1,a._array)}else if("m4"===h)r.uniformMatrix4fv(c,!1,d.elements);else if("m4v"===h){for(void 0===a._array&&(a._array=new Float32Array(16*d.length)),h=0,E=d.length;E>h;h++)d[h].flattenToArrayOffset(a._array,16*h);r.uniformMatrix4fv(c,!1,a._array)}else if("t"===h)e=s(),r.uniform1i(c,e),d&&(d instanceof THREE.CubeTexture||Array.isArray(d.image)&&6===d.image.length?b(d,e):d instanceof THREE.WebGLRenderTargetCube?M(d.texture,e):d instanceof THREE.WebGLRenderTarget?Y.setTexture(d.texture,e):Y.setTexture(d,e));else if("tv"===h){for(void 0===a._array&&(a._array=[]),h=0,E=a.value.length;E>h;h++)a._array[h]=s();for(r.uniform1iv(c,a._array),h=0,E=a.value.length;E>h;h++)d=a.value[h],e=a._array[h],d&&(d instanceof THREE.CubeTexture||d.image instanceof Array&&6===d.image.length?b(d,e):d instanceof THREE.WebGLRenderTarget?Y.setTexture(d.texture,e):d instanceof THREE.WebGLRenderTargetCube?M(d.texture,e):Y.setTexture(d,e))}}function R(a){for(var h=0,c=a.length;c>h;h++){var d=a[h][0];!1!==d.needsUpdate&&y(d,d.type,a[h][1],d.value)}}function x(a,h,c){c?(r.texParameteri(a,r.TEXTURE_WRAP_S,L(h.wrapS)),r.texParameteri(a,r.TEXTURE_WRAP_T,L(h.wrapT)),r.texParameteri(a,r.TEXTURE_MAG_FILTER,L(h.magFilter)),r.texParameteri(a,r.TEXTURE_MIN_FILTER,L(h.minFilter))):(r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),h.wrapS===THREE.ClampToEdgeWrapping&&h.wrapT===THREE.ClampToEdgeWrapping||void 0,r.texParameteri(a,r.TEXTURE_MAG_FILTER,A(h.magFilter)),r.texParameteri(a,r.TEXTURE_MIN_FILTER,A(h.minFilter)),h.minFilter!==THREE.NearestFilter&&h.minFilter!==THREE.LinearFilter&&void 0),!(c=Rt.get("EXT_texture_filter_anisotropic"))||h.type===THREE.FloatType&&null===Rt.get("OES_texture_float_linear")||h.type===THREE.HalfFloatType&&null===Rt.get("OES_texture_half_float_linear")||!(1<h.anisotropy||_t.get(h).__currentAnisotropy)||(r.texParameterf(a,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(h.anisotropy,Y.getMaxAnisotropy())),_t.get(h).__currentAnisotropy=h.anisotropy)}function H(a,h){if(a.width>h||a.height>h){var c=h/Math.max(a.width,a.height),d=document.createElement("canvas");return d.width=Math.floor(a.width*c),d.height=Math.floor(a.height*c),d.getContext("2d").drawImage(a,0,0,a.width,a.height,0,0,d.width,d.height),d}return a}function _(a){return THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height)}function b(a,h){var c=_t.get(a);if(6===a.image.length)if(0<a.version&&c.__version!==a.version){c.__image__webglTextureCube||(a.addEventListener("dispose",f),c.__image__webglTextureCube=r.createTexture(),vt.textures++),Ht.activeTexture(r.TEXTURE0+h),Ht.bindTexture(r.TEXTURE_CUBE_MAP,c.__image__webglTextureCube),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,a.flipY);for(var d=a instanceof THREE.CompressedTexture,e=a.image[0]instanceof THREE.DataTexture,E=[],g=0;6>g;g++)E[g]=!Y.autoScaleCubemaps||d||e?e?a.image[g].image:a.image[g]:H(a.image[g],xt.maxCubemapSize);var v=_(E[0]),l=L(a.format),m=L(a.type);for(x(r.TEXTURE_CUBE_MAP,a,v),g=0;6>g;g++)if(d)for(var n,p=E[g].mipmaps,q=0,s=p.length;s>q;q++)n=p[q],a.format!==THREE.RGBAFormat&&a.format!==THREE.RGBFormat?-1<Ht.getCompressedTextureFormats().indexOf(l)?Ht.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+g,q,l,n.width,n.height,0,n.data):void 0:Ht.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+g,q,l,n.width,n.height,0,l,m,n.data);else e?Ht.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,l,E[g].width,E[g].height,0,l,m,E[g].data):Ht.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,l,l,m,E[g]);a.generateMipmaps&&v&&r.generateMipmap(r.TEXTURE_CUBE_MAP),c.__version=a.version,a.onUpdate&&a.onUpdate(a)}else Ht.activeTexture(r.TEXTURE0+h),Ht.bindTexture(r.TEXTURE_CUBE_MAP,c.__image__webglTextureCube)}function M(a,h){Ht.activeTexture(r.TEXTURE0+h),Ht.bindTexture(r.TEXTURE_CUBE_MAP,_t.get(a).__webglTexture)}function S(a,h,c,d){var e=L(h.texture.format),E=L(h.texture.type);Ht.texImage2D(d,0,e,h.width,h.height,0,e,E,null),r.bindFramebuffer(r.FRAMEBUFFER,a),r.framebufferTexture2D(r.FRAMEBUFFER,c,d,_t.get(h.texture).__webglTexture,0),r.bindFramebuffer(r.FRAMEBUFFER,null)}function w(a,h){r.bindRenderbuffer(r.RENDERBUFFER,a),h.depthBuffer&&!h.stencilBuffer?(r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_COMPONENT16,h.width,h.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,a)):h.depthBuffer&&h.stencilBuffer?(r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,h.width,h.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.RENDERBUFFER,a)):r.renderbufferStorage(r.RENDERBUFFER,r.RGBA4,h.width,h.height),r.bindRenderbuffer(r.RENDERBUFFER,null)}function A(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?r.NEAREST:r.LINEAR}function L(a){var h;if(a===THREE.RepeatWrapping)return r.REPEAT;if(a===THREE.ClampToEdgeWrapping)return r.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return r.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return r.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return r.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return r.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return r.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return r.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return r.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return r.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return r.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return r.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return r.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return r.BYTE;if(a===THREE.ShortType)return r.SHORT;if(a===THREE.UnsignedShortType)return r.UNSIGNED_SHORT;if(a===THREE.IntType)return r.INT;if(a===THREE.UnsignedIntType)return r.UNSIGNED_INT;if(a===THREE.FloatType)return r.FLOAT;if(h=Rt.get("OES_texture_half_float"),null!==h&&a===THREE.HalfFloatType)return h.HALF_FLOAT_OES;if(a===THREE.AlphaFormat)return r.ALPHA;if(a===THREE.RGBFormat)return r.RGB;if(a===THREE.RGBAFormat)return r.RGBA;if(a===THREE.LuminanceFormat)return r.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return r.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return r.FUNC_ADD;if(a===THREE.SubtractEquation)return r.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return r.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return r.ZERO;if(a===THREE.OneFactor)return r.ONE;if(a===THREE.SrcColorFactor)return r.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return r.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return r.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return r.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return r.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return r.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return r.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return r.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return r.SRC_ALPHA_SATURATE;if(h=Rt.get("WEBGL_compressed_texture_s3tc"),null!==h){if(a===THREE.RGB_S3TC_DXT1_Format)return h.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return h.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return h.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return h.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(h=Rt.get("WEBGL_compressed_texture_pvrtc"),null!==h){if(a===THREE.RGB_PVRTC_4BPPV1_Format)return h.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===THREE.RGB_PVRTC_2BPPV1_Format)return h.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(a===THREE.RGBA_PVRTC_4BPPV1_Format)return h.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(a===THREE.RGBA_PVRTC_2BPPV1_Format)return h.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(h=Rt.get("WEBGL_compressed_texture_etc1"),null!==h&&a===THREE.RGB_ETC1_Format)return h.COMPRESSED_RGB_ETC1_WEBGL;if(h=Rt.get("EXT_blend_minmax"),null!==h){if(a===THREE.MinEquation)return h.MIN_EXT;if(a===THREE.MaxEquation)return h.MAX_EXT}return 0}a=a||{};var C=void 0!==a.canvas?a.canvas:document.createElement("canvas"),P=void 0!==a.context?a.context:null,B=void 0!==a.alpha?a.alpha:!1,I=void 0!==a.depth?a.depth:!0,D=void 0!==a.stencil?a.stencil:!0,U=void 0!==a.antialias?a.antialias:!1,F=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,N=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,V=[],O=[],G=-1,z=[],k=-1,j=new Float32Array(8),W=[],X=[];this.domElement=C,this.context=null,this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0,this.gammaFactor=2,this.physicallyCorrectLights=this.gammaOutput=this.gammaInput=!1,this.toneMapping=THREE.LinearToneMapping,this.toneMappingWhitePoint=this.toneMappingExposure=1,this.maxMorphTargets=8,this.maxMorphNormals=4,this.autoScaleCubemaps=!0;var Y=this,Z=null,K=null,Q=null,J=-1,$="",et=null,tt=new THREE.Vector4,it=null,nt=new THREE.Vector4,ot=0,at=new THREE.Color(0),st=0,ht=C.width,ct=C.height,lt=1,ut=new THREE.Vector4(0,0,ht,ct),pt=!1,dt=new THREE.Vector4(0,0,ht,ct),Et=new THREE.Frustum,ft=new THREE.Matrix4,mt=new THREE.Vector3,gt={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[],shadowsPointLight:0},vt={geometries:0,textures:0},Tt={calls:0,vertices:0,faces:0,points:0};this.info={render:Tt,memory:vt,programs:null};var r;try{if(B={alpha:B,depth:I,stencil:D,antialias:U,premultipliedAlpha:F,preserveDrawingBuffer:N},r=P||C.getContext("webgl",B)||C.getContext("experimental-webgl",B),null===r){if(null!==C.getContext("webgl"))throw"Error creating WebGL context with your selected attributes.";throw"Error creating WebGL context."}void 0===r.getShaderPrecisionFormat&&(r.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),C.addEventListener("webglcontextlost",e,!1)}catch(yt){}var Rt=new THREE.WebGLExtensions(r);Rt.get("OES_texture_float"),Rt.get("OES_texture_float_linear"),Rt.get("OES_texture_half_float"),Rt.get("OES_texture_half_float_linear"),Rt.get("OES_standard_derivatives"),Rt.get("ANGLE_instanced_arrays"),Rt.get("OES_element_index_uint")&&(THREE.BufferGeometry.MaxIndex=4294967296);var xt=new THREE.WebGLCapabilities(r,Rt,a),Ht=new THREE.WebGLState(r,Rt,L),_t=new THREE.WebGLProperties,bt=new THREE.WebGLObjects(r,_t,this.info),Mt=new THREE.WebGLPrograms(this,xt),St=new THREE.WebGLLights;this.info.programs=Mt.programs;var wt=new THREE.WebGLBufferRenderer(r,Rt,Tt),At=new THREE.WebGLIndexedBufferRenderer(r,Rt,Tt);c(),this.context=r,this.capabilities=xt,this.extensions=Rt,this.properties=_t,this.state=Ht;var Lt=new THREE.WebGLShadowMap(this,gt,bt);this.shadowMap=Lt;var Ct=new THREE.SpritePlugin(this,W),Pt=new THREE.LensFlarePlugin(this,X);this.getContext=function(){return r},this.getContextAttributes=function(){return r.getContextAttributes()},this.forceContextLoss=function(){Rt.get("WEBGL_lose_context").loseContext()},this.getMaxAnisotropy=function(){var a;return function(){if(void 0!==a)return a;var h=Rt.get("EXT_texture_filter_anisotropic");return a=null!==h?r.getParameter(h.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}}(),this.getPrecision=function(){return xt.precision},this.getPixelRatio=function(){return lt},this.setPixelRatio=function(a){void 0!==a&&(lt=a,this.setSize(dt.z,dt.w,!1))},this.getSize=function(){return{width:ht,height:ct}},this.setSize=function(a,h,c){ht=a,ct=h,C.width=a*lt,C.height=h*lt,!1!==c&&(C.style.width=a+"px",C.style.height=h+"px"),this.setViewport(0,0,a,h)},this.setViewport=function(a,h,c,d){Ht.viewport(dt.set(a,h,c,d))},this.setScissor=function(a,h,c,d){Ht.scissor(ut.set(a,h,c,d))},this.setScissorTest=function(a){Ht.setScissorTest(pt=a)},this.getClearColor=function(){return at},this.setClearColor=function(a,c){at.set(a),st=void 0!==c?c:1,h(at.r,at.g,at.b,st)},this.getClearAlpha=function(){return st},this.setClearAlpha=function(a){st=a,h(at.r,at.g,at.b,st)},this.clear=function(a,h,c){var d=0;(void 0===a||a)&&(d|=r.COLOR_BUFFER_BIT),(void 0===h||h)&&(d|=r.DEPTH_BUFFER_BIT),(void 0===c||c)&&(d|=r.STENCIL_BUFFER_BIT),r.clear(d)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(a,h,c,d){this.setRenderTarget(a),this.clear(h,c,d)},this.resetGLState=d,this.dispose=function(){C.removeEventListener("webglcontextlost",e,!1)},this.renderBufferImmediate=function(a,h,c){Ht.initAttributes();var d=_t.get(a);if(a.hasPositions&&!d.position&&(d.position=r.createBuffer()),a.hasNormals&&!d.normal&&(d.normal=r.createBuffer()),a.hasUvs&&!d.uv&&(d.uv=r.createBuffer()),a.hasColors&&!d.color&&(d.color=r.createBuffer()),h=h.getAttributes(),a.hasPositions&&(r.bindBuffer(r.ARRAY_BUFFER,d.position),r.bufferData(r.ARRAY_BUFFER,a.positionArray,r.DYNAMIC_DRAW),Ht.enableAttribute(h.position),r.vertexAttribPointer(h.position,3,r.FLOAT,!1,0,0)),a.hasNormals){if(r.bindBuffer(r.ARRAY_BUFFER,d.normal),"MeshPhongMaterial"!==c.type&&"MeshStandardMaterial"!==c.type&&c.shading===THREE.FlatShading)for(var e=0,E=3*a.count;E>e;e+=9){var f=a.normalArray,g=(f[e+0]+f[e+3]+f[e+6])/3,v=(f[e+1]+f[e+4]+f[e+7])/3,l=(f[e+2]+f[e+5]+f[e+8])/3;f[e+0]=g,f[e+1]=v,f[e+2]=l,f[e+3]=g,f[e+4]=v,f[e+5]=l,f[e+6]=g,f[e+7]=v,f[e+8]=l}r.bufferData(r.ARRAY_BUFFER,a.normalArray,r.DYNAMIC_DRAW),Ht.enableAttribute(h.normal),r.vertexAttribPointer(h.normal,3,r.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(r.bindBuffer(r.ARRAY_BUFFER,d.uv),r.bufferData(r.ARRAY_BUFFER,a.uvArray,r.DYNAMIC_DRAW),Ht.enableAttribute(h.uv),r.vertexAttribPointer(h.uv,2,r.FLOAT,!1,0,0)),a.hasColors&&c.vertexColors!==THREE.NoColors&&(r.bindBuffer(r.ARRAY_BUFFER,d.color),r.bufferData(r.ARRAY_BUFFER,a.colorArray,r.DYNAMIC_DRAW),Ht.enableAttribute(h.color),r.vertexAttribPointer(h.color,3,r.FLOAT,!1,0,0)),Ht.disableUnusedAttributes(),r.drawArrays(r.TRIANGLES,0,a.count),a.count=0},this.renderBufferDirect=function(a,h,c,d,e,E){T(d);var f=t(a,h,d,e),g=!1;if(a=c.id+"_"+f.id+"_"+d.wireframe,a!==$&&($=a,g=!0),h=e.morphTargetInfluences,void 0!==h){a=[];for(var v=0,g=h.length;g>v;v++){var m=h[v];a.push([m,v])}a.sort(l),8<a.length&&(a.length=8);for(var n=c.morphAttributes,v=0,g=a.length;g>v;v++)m=a[v],j[v]=m[0],0!==m[0]?(h=m[1],!0===d.morphTargets&&n.position&&c.addAttribute("morphTarget"+v,n.position[h]),!0===d.morphNormals&&n.normal&&c.addAttribute("morphNormal"+v,n.normal[h])):(!0===d.morphTargets&&c.removeAttribute("morphTarget"+v),!0===d.morphNormals&&c.removeAttribute("morphNormal"+v));a=f.getUniforms(),null!==a.morphTargetInfluences&&r.uniform1fv(a.morphTargetInfluences,j),g=!0}if(h=c.index,v=c.attributes.position,!0===d.wireframe&&(h=bt.getWireframeAttribute(c)),null!==h?(a=At,a.setIndex(h)):a=wt,g){var g=void 0,p;if(!(c instanceof THREE.InstancedBufferGeometry&&(p=Rt.get("ANGLE_instanced_arrays"),null===p))){void 0===g&&(g=0),Ht.initAttributes();var m=c.attributes,f=f.getAttributes(),n=d.defaultAttributeValues,q;for(q in f){var s=f[q];if(s>=0){var u=m[q];if(void 0!==u){var x=u.itemSize,y=bt.getAttributeBuffer(u);if(u instanceof THREE.InterleavedBufferAttribute){var R=u.data,H=R.stride,u=u.offset;R instanceof THREE.InstancedInterleavedBuffer?(Ht.enableAttributeAndDivisor(s,R.meshPerAttribute,p),void 0===c.maxInstancedCount&&(c.maxInstancedCount=R.meshPerAttribute*R.count)):Ht.enableAttribute(s),r.bindBuffer(r.ARRAY_BUFFER,y),r.vertexAttribPointer(s,x,r.FLOAT,!1,H*R.array.BYTES_PER_ELEMENT,(g*H+u)*R.array.BYTES_PER_ELEMENT)}else u instanceof THREE.InstancedBufferAttribute?(Ht.enableAttributeAndDivisor(s,u.meshPerAttribute,p),void 0===c.maxInstancedCount&&(c.maxInstancedCount=u.meshPerAttribute*u.count)):Ht.enableAttribute(s),r.bindBuffer(r.ARRAY_BUFFER,y),r.vertexAttribPointer(s,x,r.FLOAT,!1,0,g*x*4)}else if(void 0!==n&&(x=n[q],void 0!==x))switch(x.length){case 2:r.vertexAttrib2fv(s,x);break;case 3:r.vertexAttrib3fv(s,x);break;case 4:r.vertexAttrib4fv(s,x);break;default:r.vertexAttrib1fv(s,x)}}}Ht.disableUnusedAttributes()}null!==h&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,bt.getAttributeBuffer(h))}if(p=1/0,null!==h?p=h.count:void 0!==v&&(p=v.count),q=c.drawRange.start,h=c.drawRange.count,v=null!==E?E.start:0,g=null!==E?E.count:1/0,E=Math.max(0,q,v),p=Math.min(0+p,q+h,v+g)-1,p=Math.max(0,p-E+1),e instanceof THREE.Mesh)if(!0===d.wireframe)Ht.setLineWidth(d.wireframeLinewidth*(null===K?lt:1)),a.setMode(r.LINES);else switch(e.drawMode){case THREE.TrianglesDrawMode:a.setMode(r.TRIANGLES);break;case THREE.TriangleStripDrawMode:a.setMode(r.TRIANGLE_STRIP);break;case THREE.TriangleFanDrawMode:a.setMode(r.TRIANGLE_FAN)}else e instanceof THREE.Line?(d=d.linewidth,void 0===d&&(d=1),Ht.setLineWidth(d*(null===K?lt:1)),a.setMode(e instanceof THREE.LineSegments?r.LINES:r.LINE_STRIP)):e instanceof THREE.Points&&a.setMode(r.POINTS);c instanceof THREE.InstancedBufferGeometry?0<c.maxInstancedCount&&a.renderInstances(c,E,p):a.render(E,p)},this.render=function(a,h,c,d){if(!1==h instanceof THREE.Camera);else{var e=a.fog;$="",J=-1,et=null,!0===a.autoUpdate&&a.updateMatrixWorld(),null===h.parent&&h.updateMatrixWorld(),h.matrixWorldInverse.getInverse(h.matrixWorld),ft.multiplyMatrices(h.projectionMatrix,h.matrixWorldInverse),Et.setFromMatrix(ft),V.length=0,k=G=-1,W.length=0,X.length=0,q(a,h),O.length=G+1,z.length=k+1,!0===Y.sortObjects&&(O.sort(p),z.sort(n));var E=V,f,g,v,l=0,m=0,s=0,t,T,x,y=h.matrixWorldInverse,R=0,H=0,b=0,M=0,S=0;for(f=gt.shadowsPointLight=0,g=E.length;g>f;f++)if(v=E[f],t=v.color,T=v.intensity,x=v.distance,v instanceof THREE.AmbientLight)l+=t.r*T,m+=t.g*T,s+=t.b*T;else if(v instanceof THREE.DirectionalLight){var w=St.get(v);w.color.copy(v.color).multiplyScalar(v.intensity),w.direction.setFromMatrixPosition(v.matrixWorld),mt.setFromMatrixPosition(v.target.matrixWorld),w.direction.sub(mt),w.direction.transformDirection(y),(w.shadow=v.castShadow)&&(w.shadowBias=v.shadow.bias,w.shadowRadius=v.shadow.radius,w.shadowMapSize=v.shadow.mapSize,gt.shadows[S++]=v),gt.directionalShadowMap[R]=v.shadow.map,gt.directionalShadowMatrix[R]=v.shadow.matrix,gt.directional[R++]=w}else v instanceof THREE.SpotLight?(w=St.get(v),w.position.setFromMatrixPosition(v.matrixWorld),w.position.applyMatrix4(y),w.color.copy(t).multiplyScalar(T),w.distance=x,w.direction.setFromMatrixPosition(v.matrixWorld),mt.setFromMatrixPosition(v.target.matrixWorld),w.direction.sub(mt),w.direction.transformDirection(y),w.coneCos=Math.cos(v.angle),w.penumbraCos=Math.cos(v.angle*(1-v.penumbra)),w.decay=0===v.distance?0:v.decay,(w.shadow=v.castShadow)&&(w.shadowBias=v.shadow.bias,w.shadowRadius=v.shadow.radius,w.shadowMapSize=v.shadow.mapSize,gt.shadows[S++]=v),gt.spotShadowMap[b]=v.shadow.map,gt.spotShadowMatrix[b]=v.shadow.matrix,gt.spot[b++]=w):v instanceof THREE.PointLight?(w=St.get(v),w.position.setFromMatrixPosition(v.matrixWorld),w.position.applyMatrix4(y),w.color.copy(v.color).multiplyScalar(v.intensity),w.distance=v.distance,w.decay=0===v.distance?0:v.decay,(w.shadow=v.castShadow)&&(w.shadowBias=v.shadow.bias,w.shadowRadius=v.shadow.radius,w.shadowMapSize=v.shadow.mapSize,gt.shadows[S++]=v),gt.pointShadowMap[H]=v.shadow.map,void 0===gt.pointShadowMatrix[H]&&(gt.pointShadowMatrix[H]=new THREE.Matrix4),mt.setFromMatrixPosition(v.matrixWorld).negate(),gt.pointShadowMatrix[H].identity().setPosition(mt),gt.point[H++]=w):v instanceof THREE.HemisphereLight&&(w=St.get(v),w.direction.setFromMatrixPosition(v.matrixWorld),w.direction.transformDirection(y),w.direction.normalize(),w.skyColor.copy(v.color).multiplyScalar(T),w.groundColor.copy(v.groundColor).multiplyScalar(T),gt.hemi[M++]=w);gt.ambient[0]=l,gt.ambient[1]=m,gt.ambient[2]=s,gt.directional.length=R,gt.spot.length=b,gt.point.length=H,gt.hemi.length=M,gt.shadows.length=S,gt.hash=R+","+H+","+b+","+M+","+S,Lt.render(a,h),Tt.calls=0,Tt.vertices=0,Tt.faces=0,Tt.points=0,void 0===c&&(c=null),this.setRenderTarget(c),(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),a.overrideMaterial?(d=a.overrideMaterial,u(O,h,e,d),u(z,h,e,d)):(Ht.setBlending(THREE.NoBlending),u(O,h,e),u(z,h,e)),Ct.render(a,h),Pt.render(a,h,nt),c&&(a=c.texture,a.generateMipmaps&&_(c)&&a.minFilter!==THREE.NearestFilter&&a.minFilter!==THREE.LinearFilter&&(a=c instanceof THREE.WebGLRenderTargetCube?r.TEXTURE_CUBE_MAP:r.TEXTURE_2D,c=_t.get(c.texture).__webglTexture,Ht.bindTexture(a,c),r.generateMipmap(a),Ht.bindTexture(a,null))),Ht.setDepthTest(!0),Ht.setDepthWrite(!0),Ht.setColorWrite(!0)}},this.setFaceCulling=function(a,h){a===THREE.CullFaceNone?Ht.disable(r.CULL_FACE):(r.frontFace(h===THREE.FrontFaceDirectionCW?r.CW:r.CCW),r.cullFace(a===THREE.CullFaceBack?r.BACK:a===THREE.CullFaceFront?r.FRONT:r.FRONT_AND_BACK),Ht.enable(r.CULL_FACE))},this.setTexture=function(a,h){var c=_t.get(a);if(0<a.version&&c.__version!==a.version){var d=a.image;if(void 0===d);else if(!1===d.complete);else{void 0===c.__webglInit&&(c.__webglInit=!0,a.addEventListener("dispose",f),c.__webglTexture=r.createTexture(),vt.textures++),Ht.activeTexture(r.TEXTURE0+h),Ht.bindTexture(r.TEXTURE_2D,c.__webglTexture),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,a.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,a.unpackAlignment);var e=H(a.image,xt.maxTextureSize);if((a.wrapS!==THREE.ClampToEdgeWrapping||a.wrapT!==THREE.ClampToEdgeWrapping||a.minFilter!==THREE.NearestFilter&&a.minFilter!==THREE.LinearFilter)&&!1===_(e))if(d=e,d instanceof HTMLImageElement||d instanceof HTMLCanvasElement){var E=document.createElement("canvas");E.width=THREE.Math.nearestPowerOfTwo(d.width),E.height=THREE.Math.nearestPowerOfTwo(d.height),E.getContext("2d").drawImage(d,0,0,E.width,E.height),e=E}else e=d;var d=_(e),E=L(a.format),g=L(a.type);x(r.TEXTURE_2D,a,d);var v=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<v.length&&d){for(var l=0,m=v.length;m>l;l++)e=v[l],Ht.texImage2D(r.TEXTURE_2D,l,E,e.width,e.height,0,E,g,e.data);a.generateMipmaps=!1}else Ht.texImage2D(r.TEXTURE_2D,0,E,e.width,e.height,0,E,g,e.data);else if(a instanceof THREE.CompressedTexture)for(l=0,m=v.length;m>l;l++)e=v[l],a.format!==THREE.RGBAFormat&&a.format!==THREE.RGBFormat?-1<Ht.getCompressedTextureFormats().indexOf(E)?Ht.compressedTexImage2D(r.TEXTURE_2D,l,E,e.width,e.height,0,e.data):void 0:Ht.texImage2D(r.TEXTURE_2D,l,E,e.width,e.height,0,E,g,e.data);else if(0<v.length&&d){for(l=0,m=v.length;m>l;l++)e=v[l],Ht.texImage2D(r.TEXTURE_2D,l,E,E,g,e);a.generateMipmaps=!1}else Ht.texImage2D(r.TEXTURE_2D,0,E,E,g,e);a.generateMipmaps&&d&&r.generateMipmap(r.TEXTURE_2D),c.__version=a.version,a.onUpdate&&a.onUpdate(a)}}else Ht.activeTexture(r.TEXTURE0+h),Ht.bindTexture(r.TEXTURE_2D,c.__webglTexture)},this.getCurrentRenderTarget=function(){return K},this.setRenderTarget=function(a){if((K=a)&&void 0===_t.get(a).__webglFramebuffer){var h=_t.get(a),c=_t.get(a.texture);a.addEventListener("dispose",E),c.__webglTexture=r.createTexture(),vt.textures++;var d=a instanceof THREE.WebGLRenderTargetCube,e=THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height);if(d){h.__webglFramebuffer=[];for(var f=0;6>f;f++)h.__webglFramebuffer[f]=r.createFramebuffer()}else h.__webglFramebuffer=r.createFramebuffer();if(d){for(Ht.bindTexture(r.TEXTURE_CUBE_MAP,c.__webglTexture),x(r.TEXTURE_CUBE_MAP,a.texture,e),f=0;6>f;f++)S(h.__webglFramebuffer[f],a,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+f);a.texture.generateMipmaps&&e&&r.generateMipmap(r.TEXTURE_CUBE_MAP),Ht.bindTexture(r.TEXTURE_CUBE_MAP,null)}else Ht.bindTexture(r.TEXTURE_2D,c.__webglTexture),x(r.TEXTURE_2D,a.texture,e),S(h.__webglFramebuffer,a,r.COLOR_ATTACHMENT0,r.TEXTURE_2D),a.texture.generateMipmaps&&e&&r.generateMipmap(r.TEXTURE_2D),Ht.bindTexture(r.TEXTURE_2D,null);if(a.depthBuffer){if(h=_t.get(a),a instanceof THREE.WebGLRenderTargetCube)for(h.__webglDepthbuffer=[],c=0;6>c;c++)r.bindFramebuffer(r.FRAMEBUFFER,h.__webglFramebuffer[c]),h.__webglDepthbuffer[c]=r.createRenderbuffer(),w(h.__webglDepthbuffer[c],a);else r.bindFramebuffer(r.FRAMEBUFFER,h.__webglFramebuffer),h.__webglDepthbuffer=r.createRenderbuffer(),w(h.__webglDepthbuffer,a);r.bindFramebuffer(r.FRAMEBUFFER,null)}}h=a instanceof THREE.WebGLRenderTargetCube,a?(c=_t.get(a),c=h?c.__webglFramebuffer[a.activeCubeFace]:c.__webglFramebuffer,tt.copy(a.scissor),it=a.scissorTest,nt.copy(a.viewport)):(c=null,tt.copy(ut).multiplyScalar(lt),it=pt,nt.copy(dt).multiplyScalar(lt)),Q!==c&&(r.bindFramebuffer(r.FRAMEBUFFER,c),Q=c),Ht.scissor(tt),Ht.setScissorTest(it),Ht.viewport(nt),h&&(h=_t.get(a.texture),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+a.activeCubeFace,h.__webglTexture,a.activeMipMapLevel))},this.readRenderTargetPixels=function(a,h,c,d,e,E){if(!1==a instanceof THREE.WebGLRenderTarget);else{var f=_t.get(a).__webglFramebuffer;if(f){var g=!1;f!==Q&&(r.bindFramebuffer(r.FRAMEBUFFER,f),g=!0);try{var v=a.texture;v.format!==THREE.RGBAFormat&&L(v.format)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT)?void 0:(v.type===THREE.UnsignedByteType||L(v.type)===r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)||v.type===THREE.FloatType&&Rt.get("WEBGL_color_buffer_float")||v.type===THREE.HalfFloatType&&Rt.get("EXT_color_buffer_half_float"))&&r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE?r.readPixels(h,c,d,e,L(v.format),L(v.type),E):void 0}finally{g&&r.bindFramebuffer(r.FRAMEBUFFER,Q)}}}}},THREE.WebGLRenderTarget=function(a,h,c){this.uuid=THREE.Math.generateUUID(),this.width=a,this.height=h,this.scissor=new THREE.Vector4(0,0,a,h),this.scissorTest=!1,this.viewport=new THREE.Vector4(0,0,a,h),c=c||{},void 0===c.minFilter&&(c.minFilter=THREE.LinearFilter),this.texture=new THREE.Texture(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy),this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0,this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0},THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,setSize:function(a,h){(this.width!==a||this.height!==h)&&(this.width=a,this.height=h,this.dispose()),this.viewport.set(0,0,a,h),this.scissor.set(0,0,a,h)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){return this.width=a.width,this.height=a.height,this.viewport.copy(a.viewport),this.texture=a.texture.clone(),this.depthBuffer=a.depthBuffer,this.stencilBuffer=a.stencilBuffer,this},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype),THREE.WebGLRenderTargetCube=function(a,h,c){THREE.WebGLRenderTarget.call(this,a,h,c),this.activeMipMapLevel=this.activeCubeFace=0},THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype),THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube,THREE.WebGLBufferRenderer=function(a,h,c){var d;this.setMode=function(a){d=a},this.render=function(h,f){a.drawArrays(d,h,f),c.calls++,c.vertices+=f,d===a.TRIANGLES&&(c.faces+=f/3)
},this.renderInstances=function(e){var f=h.get("ANGLE_instanced_arrays");if(null===f);else{var E=e.attributes.position,g=0,g=E instanceof THREE.InterleavedBufferAttribute?E.data.count:E.count;f.drawArraysInstancedANGLE(d,0,g,e.maxInstancedCount),c.calls++,c.vertices+=g*e.maxInstancedCount,d===a.TRIANGLES&&(c.faces+=e.maxInstancedCount*g/3)}}},THREE.WebGLIndexedBufferRenderer=function(a,h,c){var d,e,f;this.setMode=function(a){d=a},this.setIndex=function(c){c.array instanceof Uint32Array&&h.get("OES_element_index_uint")?(e=a.UNSIGNED_INT,f=4):(e=a.UNSIGNED_SHORT,f=2)},this.render=function(h,E){a.drawElements(d,E,e,h*f),c.calls++,c.vertices+=E,d===a.TRIANGLES&&(c.faces+=E/3)},this.renderInstances=function(E,g,v){var l=h.get("ANGLE_instanced_arrays");null===l?void 0:(l.drawElementsInstancedANGLE(d,v,e,g*f,E.maxInstancedCount),c.calls++,c.vertices+=v*E.maxInstancedCount,d===a.TRIANGLES&&(c.faces+=E.maxInstancedCount*v/3))}},THREE.WebGLExtensions=function(a){var h={};this.get=function(c){if(void 0!==h[c])return h[c];var d;switch(c){case"EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case"WEBGL_compressed_texture_etc1":d=a.getExtension("WEBGL_compressed_texture_etc1");break;default:d=a.getExtension(c)}return h[c]=d}},THREE.WebGLCapabilities=function(a,h,c){function d(h){if("highp"===h){if(0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision)return"highp";h="mediump"}return"mediump"===h&&0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision?"mediump":"lowp"}this.getMaxPrecision=d,this.precision=void 0!==c.precision?c.precision:"highp",this.logarithmicDepthBuffer=void 0!==c.logarithmicDepthBuffer?c.logarithmicDepthBuffer:!1,this.maxTextures=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),this.maxVertexTextures=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS),this.maxTextureSize=a.getParameter(a.MAX_TEXTURE_SIZE),this.maxCubemapSize=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE),this.maxAttributes=a.getParameter(a.MAX_VERTEX_ATTRIBS),this.maxVertexUniforms=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS),this.maxVaryings=a.getParameter(a.MAX_VARYING_VECTORS),this.maxFragmentUniforms=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS),this.vertexTextures=0<this.maxVertexTextures,this.floatFragmentTextures=!!h.get("OES_texture_float"),this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures,c=d(this.precision),c!==this.precision&&(this.precision=c),this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=!!h.get("EXT_frag_depth"))},THREE.WebGLGeometries=function(a,h,c){function d(a){var E=a.target;a=f[E.id],null!==a.index&&e(a.index);var g=a.attributes,l;for(l in g)e(g[l]);E.removeEventListener("dispose",d),delete f[E.id],l=h.get(E),l.wireframe&&e(l.wireframe),h.delete(E),E=h.get(a),E.wireframe&&e(E.wireframe),h.delete(a),c.memory.geometries--}function e(c){var d;d=c instanceof THREE.InterleavedBufferAttribute?h.get(c.data).__webglBuffer:h.get(c).__webglBuffer,void 0!==d&&(a.deleteBuffer(d),h.delete(c instanceof THREE.InterleavedBufferAttribute?c.data:c))}var f={};this.get=function(a){var h=a.geometry;if(void 0!==f[h.id])return f[h.id];h.addEventListener("dispose",d);var e;return h instanceof THREE.BufferGeometry?e=h:h instanceof THREE.Geometry&&(void 0===h._bufferGeometry&&(h._bufferGeometry=(new THREE.BufferGeometry).setFromObject(a)),e=h._bufferGeometry),f[h.id]=e,c.memory.geometries++,e}},THREE.WebGLLights=function(){var a={};this.get=function(h){if(void 0!==a[h.id])return a[h.id];var c;switch(h.type){case"DirectionalLight":c={direction:new THREE.Vector3,color:new THREE.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"SpotLight":c={position:new THREE.Vector3,direction:new THREE.Vector3,color:new THREE.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"PointLight":c={position:new THREE.Vector3,color:new THREE.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"HemisphereLight":c={direction:new THREE.Vector3,skyColor:new THREE.Color,groundColor:new THREE.Color}}return a[h.id]=c}},THREE.WebGLObjects=function(a,h,c){function d(c,d){var e=c instanceof THREE.InterleavedBufferAttribute?c.data:c,f=h.get(e);void 0===f.__webglBuffer?(f.__webglBuffer=a.createBuffer(),a.bindBuffer(d,f.__webglBuffer),a.bufferData(d,e.array,e.dynamic?a.DYNAMIC_DRAW:a.STATIC_DRAW),f.version=e.version):f.version!==e.version&&(a.bindBuffer(d,f.__webglBuffer),!1===e.dynamic||-1===e.updateRange.count?a.bufferSubData(d,0,e.array):0===e.updateRange.count?void 0:(a.bufferSubData(d,e.updateRange.offset*e.array.BYTES_PER_ELEMENT,e.array.subarray(e.updateRange.offset,e.updateRange.offset+e.updateRange.count)),e.updateRange.count=0),f.version=e.version)}function e(a,h,c){if(h>c){var d=h;h=c,c=d}return d=a[h],void 0===d?(a[h]=[c],!0):-1===d.indexOf(c)?(d.push(c),!0):!1}var f=new THREE.WebGLGeometries(a,h,c);this.getAttributeBuffer=function(a){return a instanceof THREE.InterleavedBufferAttribute?h.get(a.data).__webglBuffer:h.get(a).__webglBuffer},this.getWireframeAttribute=function(c){var f=h.get(c);if(void 0!==f.wireframe)return f.wireframe;var E=[],l=c.index,p=c.attributes;if(c=p.position,null!==l)for(var p={},l=l.array,n=0,m=l.length;m>n;n+=3){var q=l[n+0],u=l[n+1],g=l[n+2];e(p,q,u)&&E.push(q,u),e(p,u,g)&&E.push(u,g),e(p,g,q)&&E.push(g,q)}else for(l=p.position.array,n=0,m=l.length/3-1;m>n;n+=3)q=n+0,u=n+1,g=n+2,E.push(q,u,u,g,g,q);return E=new THREE.BufferAttribute(new(65535<c.count?Uint32Array:Uint16Array)(E),1),d(E,a.ELEMENT_ARRAY_BUFFER),f.wireframe=E},this.update=function(h){var c=f.get(h);h.geometry instanceof THREE.Geometry&&c.updateFromObject(h),h=c.index;var e=c.attributes;null!==h&&d(h,a.ELEMENT_ARRAY_BUFFER);for(var l in e)d(e[l],a.ARRAY_BUFFER);h=c.morphAttributes;for(l in h)for(var e=h[l],p=0,n=e.length;n>p;p++)d(e[p],a.ARRAY_BUFFER);return c}},THREE.WebGLProgram=function(){function a(a){switch(a){case THREE.LinearEncoding:return["Linear","( value )"];case THREE.sRGBEncoding:return["sRGB","( value )"];case THREE.RGBEEncoding:return["RGBE","( value )"];case THREE.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case THREE.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case THREE.RGBDEncoding:return["RGBD","( value, 256.0 )"];case THREE.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw Error("unsupported encoding: "+a)}}function h(h,c){var d=a(c);return"vec4 "+h+"( vec4 value ) { return "+d[0]+"ToLinear"+d[1]+"; }"}function c(h,c){var d=a(c);return"vec4 "+h+"( vec4 value ) { return LinearTo"+d[0]+d[1]+"; }"}function d(a,h){var c;switch(h){case THREE.LinearToneMapping:c="Linear";break;case THREE.ReinhardToneMapping:c="Reinhard";break;case THREE.Uncharted2ToneMapping:c="Uncharted2";break;case THREE.CineonToneMapping:c="OptimizedCineon";break;default:throw Error("unsupported toneMapping: "+h)}return"vec3 "+a+"( vec3 color ) { return "+c+"ToneMapping( color ); }"}function e(a,h,c){return a=a||{},[a.derivatives||h.envMapCubeUV||h.bumpMap||h.normalMap||h.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(a.fragDepth||h.logarithmicDepthBuffer)&&c.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",a.drawBuffers&&c.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(a.shaderTextureLOD||h.envMap)&&c.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(E).join("\n")}function f(a){var h=[],c;for(c in a){var d=a[c];!1!==d&&h.push("#define "+c+" "+d)}return h.join("\n")}function E(a){return""!==a}function g(a,h){return a.replace(/NUM_DIR_LIGHTS/g,h.numDirLights).replace(/NUM_SPOT_LIGHTS/g,h.numSpotLights).replace(/NUM_POINT_LIGHTS/g,h.numPointLights).replace(/NUM_HEMI_LIGHTS/g,h.numHemiLights)}function v(a){return a.replace(/#include +<([\w\d.]+)>/g,function(a,h){var c=THREE.ShaderChunk[h];if(void 0===c)throw Error("Can not resolve #include <"+h+">");return v(c)})}function l(a){return a.replace(/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(a,h,c,d){for(a="",h=parseInt(h);h<parseInt(c);h++)a+=d.replace(/\[ i \]/g,"[ "+h+" ]");return a})}var p=0,n=/^([\w\d_]+)\.([\w\d_]+)$/,m=/^([\w\d_]+)\[(\d+)\]\.([\w\d_]+)$/,q=/^([\w\d_]+)\[0\]$/;return function(a,T,t,s){var y=a.context,R=t.extensions,x=t.defines,H=t.__webglShader.vertexShader,_=t.__webglShader.fragmentShader,b="SHADOWMAP_TYPE_BASIC";s.shadowMapType===THREE.PCFShadowMap?b="SHADOWMAP_TYPE_PCF":s.shadowMapType===THREE.PCFSoftShadowMap&&(b="SHADOWMAP_TYPE_PCF_SOFT");var M="ENVMAP_TYPE_CUBE",S="ENVMAP_MODE_REFLECTION",w="ENVMAP_BLENDING_MULTIPLY";if(s.envMap){switch(t.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:M="ENVMAP_TYPE_CUBE";break;case THREE.CubeUVReflectionMapping:case THREE.CubeUVRefractionMapping:M="ENVMAP_TYPE_CUBE_UV";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:M="ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:M="ENVMAP_TYPE_SPHERE"}switch(t.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:S="ENVMAP_MODE_REFRACTION"}switch(t.combine){case THREE.MultiplyOperation:w="ENVMAP_BLENDING_MULTIPLY";break;case THREE.MixOperation:w="ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:w="ENVMAP_BLENDING_ADD"}}var A=0<a.gammaFactor?a.gammaFactor:1,R=e(R,s,a.extensions),L=f(x),C=y.createProgram();t instanceof THREE.RawShaderMaterial?a=x="":(x=["precision "+s.precision+" float;","precision "+s.precision+" int;","#define SHADER_NAME "+t.__webglShader.name,L,s.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+A,"#define MAX_BONES "+s.maxBones,s.map?"#define USE_MAP":"",s.envMap?"#define USE_ENVMAP":"",s.envMap?"#define "+S:"",s.lightMap?"#define USE_LIGHTMAP":"",s.aoMap?"#define USE_AOMAP":"",s.emissiveMap?"#define USE_EMISSIVEMAP":"",s.bumpMap?"#define USE_BUMPMAP":"",s.normalMap?"#define USE_NORMALMAP":"",s.displacementMap&&s.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",s.specularMap?"#define USE_SPECULARMAP":"",s.roughnessMap?"#define USE_ROUGHNESSMAP":"",s.metalnessMap?"#define USE_METALNESSMAP":"",s.alphaMap?"#define USE_ALPHAMAP":"",s.vertexColors?"#define USE_COLOR":"",s.flatShading?"#define FLAT_SHADED":"",s.skinning?"#define USE_SKINNING":"",s.useVertexTexture?"#define BONE_TEXTURE":"",s.morphTargets?"#define USE_MORPHTARGETS":"",s.morphNormals&&!1===s.flatShading?"#define USE_MORPHNORMALS":"",s.doubleSided?"#define DOUBLE_SIDED":"",s.flipSided?"#define FLIP_SIDED":"",s.shadowMapEnabled?"#define USE_SHADOWMAP":"",s.shadowMapEnabled?"#define "+b:"",0<s.pointLightShadows?"#define POINT_LIGHT_SHADOWS":"",s.sizeAttenuation?"#define USE_SIZEATTENUATION":"",s.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",s.logarithmicDepthBuffer&&a.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(E).join("\n"),a=[R,"precision "+s.precision+" float;","precision "+s.precision+" int;","#define SHADER_NAME "+t.__webglShader.name,L,s.alphaTest?"#define ALPHATEST "+s.alphaTest:"","#define GAMMA_FACTOR "+A,s.useFog&&s.fog?"#define USE_FOG":"",s.useFog&&s.fogExp?"#define FOG_EXP2":"",s.map?"#define USE_MAP":"",s.envMap?"#define USE_ENVMAP":"",s.envMap?"#define "+M:"",s.envMap?"#define "+S:"",s.envMap?"#define "+w:"",s.lightMap?"#define USE_LIGHTMAP":"",s.aoMap?"#define USE_AOMAP":"",s.emissiveMap?"#define USE_EMISSIVEMAP":"",s.bumpMap?"#define USE_BUMPMAP":"",s.normalMap?"#define USE_NORMALMAP":"",s.specularMap?"#define USE_SPECULARMAP":"",s.roughnessMap?"#define USE_ROUGHNESSMAP":"",s.metalnessMap?"#define USE_METALNESSMAP":"",s.alphaMap?"#define USE_ALPHAMAP":"",s.vertexColors?"#define USE_COLOR":"",s.flatShading?"#define FLAT_SHADED":"",s.doubleSided?"#define DOUBLE_SIDED":"",s.flipSided?"#define FLIP_SIDED":"",s.shadowMapEnabled?"#define USE_SHADOWMAP":"",s.shadowMapEnabled?"#define "+b:"",0<s.pointLightShadows?"#define POINT_LIGHT_SHADOWS":"",s.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",s.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",s.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",s.logarithmicDepthBuffer&&a.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",s.envMap&&a.extensions.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",s.toneMapping!==THREE.NoToneMapping?"#define TONE_MAPPING":"",s.toneMapping!==THREE.NoToneMapping?THREE.ShaderChunk.tonemapping_pars_fragment:"",s.toneMapping!==THREE.NoToneMapping?d("toneMapping",s.toneMapping):"",s.outputEncoding||s.mapEncoding||s.envMapEncoding||s.emissiveMapEncoding?THREE.ShaderChunk.encodings_pars_fragment:"",s.mapEncoding?h("mapTexelToLinear",s.mapEncoding):"",s.envMapEncoding?h("envMapTexelToLinear",s.envMapEncoding):"",s.emissiveMapEncoding?h("emissiveMapTexelToLinear",s.emissiveMapEncoding):"",s.outputEncoding?c("linearToOutputTexel",s.outputEncoding):"","\n"].filter(E).join("\n")),H=v(H,s),H=g(H,s),_=v(_,s),_=g(_,s),!1==t instanceof THREE.ShaderMaterial&&(H=l(H),_=l(_)),_=a+_,H=THREE.WebGLShader(y,y.VERTEX_SHADER,x+H),_=THREE.WebGLShader(y,y.FRAGMENT_SHADER,_),y.attachShader(C,H),y.attachShader(C,_),void 0!==t.index0AttributeName?y.bindAttribLocation(C,0,t.index0AttributeName):!0===s.morphTargets&&y.bindAttribLocation(C,0,"position"),y.linkProgram(C),s=y.getProgramInfoLog(C),b=y.getShaderInfoLog(H),M=y.getShaderInfoLog(_),w=S=!0,!1===y.getProgramParameter(C,y.LINK_STATUS)?void(S=!1):""!==s||(""===b||""===M)&&(w=!1),w&&(this.diagnostics={runnable:S,material:t,programLog:s,vertexShader:{log:b,prefix:x},fragmentShader:{log:M,prefix:a}}),y.deleteShader(H),y.deleteShader(_);var P;this.getUniforms=function(){if(void 0===P){for(var a={},h=y.getProgramParameter(C,y.ACTIVE_UNIFORMS),c=0;h>c;c++){var d=y.getActiveUniform(C,c).name,e=y.getUniformLocation(C,d),E=n.exec(d);if(E){var d=E[1],E=E[2],f=a[d];f||(f=a[d]={}),f[E]=e}else if(E=m.exec(d)){var f=E[1],d=E[2],E=E[3],g=a[f];g||(g=a[f]=[]),(f=g[d])||(f=g[d]={}),f[E]=e}else(E=q.exec(d))?(f=E[1],a[f]=e):a[d]=e}P=a}return P};var B;return this.getAttributes=function(){if(void 0===B){for(var a={},h=y.getProgramParameter(C,y.ACTIVE_ATTRIBUTES),c=0;h>c;c++){var d=y.getActiveAttrib(C,c).name;a[d]=y.getAttribLocation(C,d)}B=a}return B},this.destroy=function(){y.deleteProgram(C),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return this.getUniforms()}},attributes:{get:function(){return this.getAttributes()}}}),this.id=p++,this.code=T,this.usedTimes=1,this.program=C,this.vertexShader=H,this.fragmentShader=_,this}}(),THREE.WebGLPrograms=function(a,h){function c(a,h){var c;return a?a instanceof THREE.Texture?c=a.encoding:a instanceof THREE.WebGLRenderTarget&&(c=a.texture.encoding):c=THREE.LinearEncoding,c===THREE.LinearEncoding&&h&&(c=THREE.GammaEncoding),c}var d=[],e={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshStandardMaterial:"standard",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points"},f="precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights shadowMapEnabled pointLightShadows toneMapping physicallyCorrectLights shadowMapType alphaTest doubleSided flipSided".split(" ");this.getParameters=function(d,f,E,l){var p=e[d.type],n;h.floatVertexTextures&&l&&l.skeleton&&l.skeleton.useVertexTexture?n=1024:(n=Math.floor((h.maxVertexUniforms-20)/4),void 0!==l&&l instanceof THREE.SkinnedMesh&&(n=Math.min(l.skeleton.bones.length,n),n<l.skeleton.bones.length&&void 0));var m=a.getPrecision();return null!==d.precision&&(m=h.getMaxPrecision(d.precision),m!==d.precision&&void 0),{shaderID:p,precision:m,supportsVertexTextures:h.vertexTextures,outputEncoding:c(a.getCurrentRenderTarget(),a.gammaOutput),map:!!d.map,mapEncoding:c(d.map,a.gammaInput),envMap:!!d.envMap,envMapMode:d.envMap&&d.envMap.mapping,envMapEncoding:c(d.envMap,a.gammaInput),envMapCubeUV:!!d.envMap&&(d.envMap.mapping===THREE.CubeUVReflectionMapping||d.envMap.mapping===THREE.CubeUVRefractionMapping),lightMap:!!d.lightMap,aoMap:!!d.aoMap,emissiveMap:!!d.emissiveMap,emissiveMapEncoding:c(d.emissiveMap,a.gammaInput),bumpMap:!!d.bumpMap,normalMap:!!d.normalMap,displacementMap:!!d.displacementMap,roughnessMap:!!d.roughnessMap,metalnessMap:!!d.metalnessMap,specularMap:!!d.specularMap,alphaMap:!!d.alphaMap,combine:d.combine,vertexColors:d.vertexColors,fog:E,useFog:d.fog,fogExp:E instanceof THREE.FogExp2,flatShading:d.shading===THREE.FlatShading,sizeAttenuation:d.sizeAttenuation,logarithmicDepthBuffer:h.logarithmicDepthBuffer,skinning:d.skinning,maxBones:n,useVertexTexture:h.floatVertexTextures&&l&&l.skeleton&&l.skeleton.useVertexTexture,morphTargets:d.morphTargets,morphNormals:d.morphNormals,maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:f.directional.length,numPointLights:f.point.length,numSpotLights:f.spot.length,numHemiLights:f.hemi.length,pointLightShadows:f.shadowsPointLight,shadowMapEnabled:a.shadowMap.enabled&&l.receiveShadow&&0<f.shadows.length,shadowMapType:a.shadowMap.type,toneMapping:a.toneMapping,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:d.premultipliedAlpha,alphaTest:d.alphaTest,doubleSided:d.side===THREE.DoubleSide,flipSided:d.side===THREE.BackSide}},this.getProgramCode=function(a,h){var c=[];if(h.shaderID?c.push(h.shaderID):(c.push(a.fragmentShader),c.push(a.vertexShader)),void 0!==a.defines)for(var d in a.defines)c.push(d),c.push(a.defines[d]);for(d=0;d<f.length;d++){var e=f[d];c.push(e),c.push(h[e])}return c.join()},this.acquireProgram=function(h,c,e){for(var f,p=0,n=d.length;n>p;p++){var m=d[p];if(m.code===e){f=m,++f.usedTimes;break}}return void 0===f&&(f=new THREE.WebGLProgram(a,e,h,c),d.push(f)),f},this.releaseProgram=function(a){if(0===--a.usedTimes){var h=d.indexOf(a);d[h]=d[d.length-1],d.pop(),a.destroy()}},this.programs=d},THREE.WebGLProperties=function(){var a={};this.get=function(h){h=h.uuid;var c=a[h];return void 0===c&&(c={},a[h]=c),c},this.delete=function(h){delete a[h.uuid]},this.clear=function(){a={}}},THREE.WebGLShader=function(){function a(a){a=a.split("\n");for(var h=0;h<a.length;h++)a[h]=h+1+": "+a[h];return a.join("\n")}return function(a,h,d){var e=a.createShader(h);return a.shaderSource(e,d),a.compileShader(e),!1===a.getShaderParameter(e,a.COMPILE_STATUS)&&void 0,""!==a.getShaderInfoLog(e)&&void 0,e}}(),THREE.WebGLShadowMap=function(a,h,c){function d(a,h,c,d){var e=a.geometry,f=null,f=q,E=a.customDepthMaterial;return c&&(f=u,E=a.customDistanceMaterial),E?f=E:(a=a instanceof THREE.SkinnedMesh&&h.skinning,E=0,void 0!==e.morphTargets&&0<e.morphTargets.length&&h.morphTargets&&(E|=1),a&&(E|=2),f=f[E]),f.visible=h.visible,f.wireframe=h.wireframe,f.wireframeLinewidth=h.wireframeLinewidth,c&&void 0!==f.uniforms.lightPos&&f.uniforms.lightPos.value.copy(d),f}function e(a,h,c){if(!1!==a.visible){a.layers.test(h.layers)&&(a instanceof THREE.Mesh||a instanceof THREE.Line||a instanceof THREE.Points)&&a.castShadow&&(!1===a.frustumCulled||!0===g.intersectsObject(a))&&!0===a.material.visible&&(a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,a.matrixWorld),m.push(a)),a=a.children;for(var d=0,f=a.length;f>d;d++)e(a[d],h,c)}}for(var f=a.context,E=a.state,g=new THREE.Frustum,v=new THREE.Matrix4,l=new THREE.Vector2,p=new THREE.Vector3,n=new THREE.Vector3,m=[],q=Array(4),u=Array(4),T=[new THREE.Vector3(1,0,0),new THREE.Vector3(-1,0,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1),new THREE.Vector3(0,1,0),new THREE.Vector3(0,-1,0)],t=[new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1)],s=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4],y=THREE.ShaderLib.depthRGBA,R=THREE.UniformsUtils.clone(y.uniforms),x=THREE.ShaderLib.distanceRGBA,H=THREE.UniformsUtils.clone(x.uniforms),_=0;4!==_;++_){var b=0!==(1&_),M=0!==(2&_),S=new THREE.ShaderMaterial({uniforms:R,vertexShader:y.vertexShader,fragmentShader:y.fragmentShader,morphTargets:b,skinning:M});q[_]=S,b=new THREE.ShaderMaterial({defines:{USE_SHADOWMAP:""},uniforms:H,vertexShader:x.vertexShader,fragmentShader:x.fragmentShader,morphTargets:b,skinning:M}),u[_]=b}var w=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=THREE.PCFShadowMap,this.cullFace=THREE.CullFaceFront,this.render=function(q,u){var x,y,R=h.shadows;if(0!==R.length&&!1!==w.enabled&&(!1!==w.autoUpdate||!1!==w.needsUpdate)){E.clearColor(1,1,1,1),E.disable(f.BLEND),E.enable(f.CULL_FACE),f.frontFace(f.CCW),f.cullFace(w.cullFace===THREE.CullFaceFront?f.FRONT:f.BACK),E.setDepthTest(!0),E.setScissorTest(!1);for(var H=0,_=R.length;_>H;H++){var b=R[H],M=b.shadow,S=M.camera;if(l.copy(M.mapSize),b instanceof THREE.PointLight){x=6,y=!0;var A=l.x,L=l.y;s[0].set(2*A,L,A,L),s[1].set(0,L,A,L),s[2].set(3*A,L,A,L),s[3].set(A,L,A,L),s[4].set(3*A,0,A,L),s[5].set(A,0,A,L),l.x*=4,l.y*=2}else x=1,y=!1;for(null===M.map&&(M.map=new THREE.WebGLRenderTarget(l.x,l.y,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat}),b instanceof THREE.SpotLight&&(S.aspect=l.x/l.y),S.updateProjectionMatrix()),A=M.map,M=M.matrix,n.setFromMatrixPosition(b.matrixWorld),S.position.copy(n),a.setRenderTarget(A),a.clear(),A=0;x>A;A++){y?(p.copy(S.position),p.add(T[A]),S.up.copy(t[A]),S.lookAt(p),E.viewport(s[A])):(p.setFromMatrixPosition(b.target.matrixWorld),S.lookAt(p)),S.updateMatrixWorld(),S.matrixWorldInverse.getInverse(S.matrixWorld),M.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),M.multiply(S.projectionMatrix),M.multiply(S.matrixWorldInverse),v.multiplyMatrices(S.projectionMatrix,S.matrixWorldInverse),g.setFromMatrix(v),m.length=0,e(q,u,S);for(var L=0,C=m.length;C>L;L++){var P=m[L],B=c.update(P),I=P.material;if(I instanceof THREE.MultiMaterial)for(var D=B.groups,I=I.materials,U=0,F=D.length;F>U;U++){var N=D[U],V=I[N.materialIndex];!0===V.visible&&(V=d(P,V,y,n),a.renderBufferDirect(S,null,B,V,P,N))}else V=d(P,I,y,n),a.renderBufferDirect(S,null,B,V,P,null)}}}x=a.getClearColor(),y=a.getClearAlpha(),a.setClearColor(x,y),E.enable(f.BLEND),w.cullFace===THREE.CullFaceFront&&f.cullFace(f.BACK),w.needsUpdate=!1}}},THREE.WebGLState=function(a,h,c){var d=this,e=new THREE.Vector4,f=new Uint8Array(16),E=new Uint8Array(16),g=new Uint8Array(16),v={},l=null,p=null,n=null,m=null,q=null,u=null,T=null,t=null,s=!1,y=null,R=null,x=null,H=null,_=null,b=null,M=null,S=null,w=null,A=null,L=null,C=null,P=null,B=null,I=null,D=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),U=void 0,F={},N=new THREE.Vector4,V=null,O=null,G=new THREE.Vector4,z=new THREE.Vector4,k=a.createTexture();a.bindTexture(a.TEXTURE_2D,k),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR),a.texImage2D(a.TEXTURE_2D,0,a.RGB,1,1,0,a.RGB,a.UNSIGNED_BYTE,new Uint8Array(3)),this.init=function(){this.clearColor(0,0,0,1),this.clearDepth(1),this.clearStencil(0),this.enable(a.DEPTH_TEST),a.depthFunc(a.LEQUAL),a.frontFace(a.CCW),a.cullFace(a.BACK),this.enable(a.CULL_FACE),this.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA)},this.initAttributes=function(){for(var a=0,h=f.length;h>a;a++)f[a]=0},this.enableAttribute=function(c){f[c]=1,0===E[c]&&(a.enableVertexAttribArray(c),E[c]=1),0!==g[c]&&(h.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c,0),g[c]=0)},this.enableAttributeAndDivisor=function(h,c,d){f[h]=1,0===E[h]&&(a.enableVertexAttribArray(h),E[h]=1),g[h]!==c&&(d.vertexAttribDivisorANGLE(h,c),g[h]=c)},this.disableUnusedAttributes=function(){for(var h=0,c=E.length;c>h;h++)E[h]!==f[h]&&(a.disableVertexAttribArray(h),E[h]=0)},this.enable=function(h){!0!==v[h]&&(a.enable(h),v[h]=!0)},this.disable=function(h){!1!==v[h]&&(a.disable(h),v[h]=!1)},this.getCompressedTextureFormats=function(){if(null===l&&(l=[],h.get("WEBGL_compressed_texture_pvrtc")||h.get("WEBGL_compressed_texture_s3tc")||h.get("WEBGL_compressed_texture_etc1")))for(var c=a.getParameter(a.COMPRESSED_TEXTURE_FORMATS),d=0;d<c.length;d++)l.push(c[d]);return l},this.setBlending=function(h,d,e,f,E,g,v,l){h===THREE.NoBlending?this.disable(a.BLEND):this.enable(a.BLEND),(h!==p||l!==s)&&(h===THREE.AdditiveBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE,a.ONE,a.ONE)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE)):h===THREE.SubtractiveBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR)):h===THREE.MultiplyBlending?l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.ZERO,a.SRC_COLOR,a.SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.SRC_COLOR)):l?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)),p=h,s=l),h===THREE.CustomBlending?(E=E||d,g=g||e,v=v||f,(d!==n||E!==u)&&(a.blendEquationSeparate(c(d),c(E)),n=d,u=E),(e!==m||f!==q||g!==T||v!==t)&&(a.blendFuncSeparate(c(e),c(f),c(g),c(v)),m=e,q=f,T=g,t=v)):t=T=u=q=m=n=null},this.setDepthFunc=function(h){if(y!==h){if(h)switch(h){case THREE.NeverDepth:a.depthFunc(a.NEVER);break;case THREE.AlwaysDepth:a.depthFunc(a.ALWAYS);break;case THREE.LessDepth:a.depthFunc(a.LESS);break;case THREE.LessEqualDepth:a.depthFunc(a.LEQUAL);break;case THREE.EqualDepth:a.depthFunc(a.EQUAL);break;case THREE.GreaterEqualDepth:a.depthFunc(a.GEQUAL);break;case THREE.GreaterDepth:a.depthFunc(a.GREATER);break;case THREE.NotEqualDepth:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}else a.depthFunc(a.LEQUAL);y=h}},this.setDepthTest=function(h){h?this.enable(a.DEPTH_TEST):this.disable(a.DEPTH_TEST)},this.setDepthWrite=function(h){R!==h&&(a.depthMask(h),R=h)},this.setColorWrite=function(h){x!==h&&(a.colorMask(h,h,h,h),x=h)},this.setStencilFunc=function(h,c,d){(_!==h||b!==c||M!==d)&&(a.stencilFunc(h,c,d),_=h,b=c,M=d)},this.setStencilOp=function(h,c,d){(S!==h||w!==c||A!==d)&&(a.stencilOp(h,c,d),S=h,w=c,A=d)},this.setStencilTest=function(h){h?this.enable(a.STENCIL_TEST):this.disable(a.STENCIL_TEST)},this.setStencilWrite=function(h){H!==h&&(a.stencilMask(h),H=h)},this.setFlipSided=function(h){L!==h&&(a.frontFace(h?a.CW:a.CCW),L=h)},this.setLineWidth=function(h){h!==C&&(a.lineWidth(h),C=h)},this.setPolygonOffset=function(h,c,d){h?this.enable(a.POLYGON_OFFSET_FILL):this.disable(a.POLYGON_OFFSET_FILL),!h||P===c&&B===d||(a.polygonOffset(c,d),P=c,B=d)},this.getScissorTest=function(){return I},this.setScissorTest=function(h){(I=h)?this.enable(a.SCISSOR_TEST):this.disable(a.SCISSOR_TEST)},this.activeTexture=function(h){void 0===h&&(h=a.TEXTURE0+D-1),U!==h&&(a.activeTexture(h),U=h)},this.bindTexture=function(h,c){void 0===U&&d.activeTexture();var e=F[U];void 0===e&&(e={type:void 0,texture:void 0},F[U]=e),(e.type!==h||e.texture!==c)&&(a.bindTexture(h,c||k),e.type=h,e.texture=c)},this.compressedTexImage2D=function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(h){}},this.texImage2D=function(){try{a.texImage2D.apply(a,arguments)}catch(h){}},this.clearColor=function(h,c,d,f){e.set(h,c,d,f),!1===N.equals(e)&&(a.clearColor(h,c,d,f),N.copy(e))},this.clearDepth=function(h){V!==h&&(a.clearDepth(h),V=h)},this.clearStencil=function(h){O!==h&&(a.clearStencil(h),O=h)},this.scissor=function(h){!1===G.equals(h)&&(a.scissor(h.x,h.y,h.z,h.w),G.copy(h))},this.viewport=function(h){!1===z.equals(h)&&(a.viewport(h.x,h.y,h.z,h.w),z.copy(h))},this.reset=function(){for(var h=0;h<E.length;h++)1===E[h]&&(a.disableVertexAttribArray(h),E[h]=0);v={},l=null,U=void 0,F={},L=H=R=x=p=null}},THREE.LensFlarePlugin=function(a,h){var c,d,e,f,E,g,v,l,p,n,m=a.context,q=a.state,u,T,t,s,y,R;this.render=function(x,H,_){if(0!==h.length){x=new THREE.Vector3;var b=_.w/_.z,M=.5*_.z,S=.5*_.w,w=16/_.w,A=new THREE.Vector2(w*b,w),L=new THREE.Vector3(1,1,0),C=new THREE.Vector2(1,1);if(void 0===t){var w=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),P=new Uint16Array([0,1,2,0,2,3]);u=m.createBuffer(),T=m.createBuffer(),m.bindBuffer(m.ARRAY_BUFFER,u),m.bufferData(m.ARRAY_BUFFER,w,m.STATIC_DRAW),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,T),m.bufferData(m.ELEMENT_ARRAY_BUFFER,P,m.STATIC_DRAW),y=m.createTexture(),R=m.createTexture(),q.bindTexture(m.TEXTURE_2D,y),m.texImage2D(m.TEXTURE_2D,0,m.RGB,16,16,0,m.RGB,m.UNSIGNED_BYTE,null),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST),q.bindTexture(m.TEXTURE_2D,R),m.texImage2D(m.TEXTURE_2D,0,m.RGBA,16,16,0,m.RGBA,m.UNSIGNED_BYTE,null),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST);var w=(s=0<m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS))?{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif ( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif ( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if ( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},P=m.createProgram(),B=m.createShader(m.FRAGMENT_SHADER),I=m.createShader(m.VERTEX_SHADER),D="precision "+a.getPrecision()+" float;\n";
m.shaderSource(B,D+w.fragmentShader),m.shaderSource(I,D+w.vertexShader),m.compileShader(B),m.compileShader(I),m.attachShader(P,B),m.attachShader(P,I),m.linkProgram(P),t=P,p=m.getAttribLocation(t,"position"),n=m.getAttribLocation(t,"uv"),c=m.getUniformLocation(t,"renderType"),d=m.getUniformLocation(t,"map"),e=m.getUniformLocation(t,"occlusionMap"),f=m.getUniformLocation(t,"opacity"),E=m.getUniformLocation(t,"color"),g=m.getUniformLocation(t,"scale"),v=m.getUniformLocation(t,"rotation"),l=m.getUniformLocation(t,"screenPosition")}for(m.useProgram(t),q.initAttributes(),q.enableAttribute(p),q.enableAttribute(n),q.disableUnusedAttributes(),m.uniform1i(e,0),m.uniform1i(d,1),m.bindBuffer(m.ARRAY_BUFFER,u),m.vertexAttribPointer(p,2,m.FLOAT,!1,16,0),m.vertexAttribPointer(n,2,m.FLOAT,!1,16,8),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,T),q.disable(m.CULL_FACE),q.setDepthWrite(!1),P=0,B=h.length;B>P;P++)if(w=16/_.w,A.set(w*b,w),I=h[P],x.set(I.matrixWorld.elements[12],I.matrixWorld.elements[13],I.matrixWorld.elements[14]),x.applyMatrix4(H.matrixWorldInverse),x.applyProjection(H.projectionMatrix),L.copy(x),C.x=L.x*M+M,C.y=L.y*S+S,s||0<C.x&&C.x<_.z&&0<C.y&&C.y<_.w){q.activeTexture(m.TEXTURE0),q.bindTexture(m.TEXTURE_2D,null),q.activeTexture(m.TEXTURE1),q.bindTexture(m.TEXTURE_2D,y),m.copyTexImage2D(m.TEXTURE_2D,0,m.RGB,_.x+C.x-8,_.y+C.y-8,16,16,0),m.uniform1i(c,0),m.uniform2f(g,A.x,A.y),m.uniform3f(l,L.x,L.y,L.z),q.disable(m.BLEND),q.enable(m.DEPTH_TEST),m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0),q.activeTexture(m.TEXTURE0),q.bindTexture(m.TEXTURE_2D,R),m.copyTexImage2D(m.TEXTURE_2D,0,m.RGBA,_.x+C.x-8,_.y+C.y-8,16,16,0),m.uniform1i(c,1),q.disable(m.DEPTH_TEST),q.activeTexture(m.TEXTURE1),q.bindTexture(m.TEXTURE_2D,y),m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0),I.positionScreen.copy(L),I.customUpdateCallback?I.customUpdateCallback(I):I.updateLensFlares(),m.uniform1i(c,2),q.enable(m.BLEND);for(var D=0,U=I.lensFlares.length;U>D;D++){var F=I.lensFlares[D];.001<F.opacity&&.001<F.scale&&(L.x=F.x,L.y=F.y,L.z=F.z,w=F.size*F.scale/_.w,A.x=w*b,A.y=w,m.uniform3f(l,L.x,L.y,L.z),m.uniform2f(g,A.x,A.y),m.uniform1f(v,F.rotation),m.uniform1f(f,F.opacity),m.uniform3f(E,F.color.r,F.color.g,F.color.b),q.setBlending(F.blending,F.blendEquation,F.blendSrc,F.blendDst),a.setTexture(F.texture,1),m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0))}}q.enable(m.CULL_FACE),q.enable(m.DEPTH_TEST),q.setDepthWrite(!0),a.resetGLState()}}},THREE.SpritePlugin=function(a,h){function c(a,h){return a.renderOrder!==h.renderOrder?a.renderOrder-h.renderOrder:a.z!==h.z?h.z-a.z:h.id-a.id}var E,d,e,f,g,v,T,l,p,n,m,q,u,y,t,s,R,x=a.context,H=a.state,_,b,M,S,w=new THREE.Vector3,A=new THREE.Quaternion,L=new THREE.Vector3;this.render=function(C,P){if(0!==h.length){if(void 0===M){var B=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),I=new Uint16Array([0,1,2,0,2,3]);_=x.createBuffer(),b=x.createBuffer(),x.bindBuffer(x.ARRAY_BUFFER,_),x.bufferData(x.ARRAY_BUFFER,B,x.STATIC_DRAW),x.bindBuffer(x.ELEMENT_ARRAY_BUFFER,b),x.bufferData(x.ELEMENT_ARRAY_BUFFER,I,x.STATIC_DRAW);var B=x.createProgram(),I=x.createShader(x.VERTEX_SHADER),D=x.createShader(x.FRAGMENT_SHADER);x.shaderSource(I,["precision "+a.getPrecision()+" float;","uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n")),x.shaderSource(D,["precision "+a.getPrecision()+" float;","uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n")),x.compileShader(I),x.compileShader(D),x.attachShader(B,I),x.attachShader(B,D),x.linkProgram(B),M=B,s=x.getAttribLocation(M,"position"),R=x.getAttribLocation(M,"uv"),E=x.getUniformLocation(M,"uvOffset"),d=x.getUniformLocation(M,"uvScale"),e=x.getUniformLocation(M,"rotation"),f=x.getUniformLocation(M,"scale"),g=x.getUniformLocation(M,"color"),v=x.getUniformLocation(M,"map"),T=x.getUniformLocation(M,"opacity"),l=x.getUniformLocation(M,"modelViewMatrix"),p=x.getUniformLocation(M,"projectionMatrix"),n=x.getUniformLocation(M,"fogType"),m=x.getUniformLocation(M,"fogDensity"),q=x.getUniformLocation(M,"fogNear"),u=x.getUniformLocation(M,"fogFar"),y=x.getUniformLocation(M,"fogColor"),t=x.getUniformLocation(M,"alphaTest"),B=document.createElement("canvas"),B.width=8,B.height=8,I=B.getContext("2d"),I.fillStyle="white",I.fillRect(0,0,8,8),S=new THREE.Texture(B),S.needsUpdate=!0}x.useProgram(M),H.initAttributes(),H.enableAttribute(s),H.enableAttribute(R),H.disableUnusedAttributes(),H.disable(x.CULL_FACE),H.enable(x.BLEND),x.bindBuffer(x.ARRAY_BUFFER,_),x.vertexAttribPointer(s,2,x.FLOAT,!1,16,0),x.vertexAttribPointer(R,2,x.FLOAT,!1,16,8),x.bindBuffer(x.ELEMENT_ARRAY_BUFFER,b),x.uniformMatrix4fv(p,!1,P.projectionMatrix.elements),H.activeTexture(x.TEXTURE0),x.uniform1i(v,0),I=B=0,(D=C.fog)?(x.uniform3f(y,D.color.r,D.color.g,D.color.b),D instanceof THREE.Fog?(x.uniform1f(q,D.near),x.uniform1f(u,D.far),x.uniform1i(n,1),I=B=1):D instanceof THREE.FogExp2&&(x.uniform1f(m,D.density),x.uniform1i(n,2),I=B=2)):(x.uniform1i(n,0),I=B=0);for(var D=0,U=h.length;U>D;D++){var F=h[D];F.modelViewMatrix.multiplyMatrices(P.matrixWorldInverse,F.matrixWorld),F.z=-F.modelViewMatrix.elements[14]}h.sort(c);for(var N=[],D=0,U=h.length;U>D;D++){var F=h[D],V=F.material;x.uniform1f(t,V.alphaTest),x.uniformMatrix4fv(l,!1,F.modelViewMatrix.elements),F.matrixWorld.decompose(w,A,L),N[0]=L.x,N[1]=L.y,F=0,C.fog&&V.fog&&(F=I),B!==F&&(x.uniform1i(n,F),B=F),null!==V.map?(x.uniform2f(E,V.map.offset.x,V.map.offset.y),x.uniform2f(d,V.map.repeat.x,V.map.repeat.y)):(x.uniform2f(E,0,0),x.uniform2f(d,1,1)),x.uniform1f(T,V.opacity),x.uniform3f(g,V.color.r,V.color.g,V.color.b),x.uniform1f(e,V.rotation),x.uniform2fv(f,N),H.setBlending(V.blending,V.blendEquation,V.blendSrc,V.blendDst),H.setDepthTest(V.depthTest),H.setDepthWrite(V.depthWrite),V.map&&V.map.image&&V.map.image.width?a.setTexture(V.map,0):a.setTexture(S,0),x.drawElements(x.TRIANGLES,6,x.UNSIGNED_SHORT,0)}H.enable(x.CULL_FACE),a.resetGLState()}}},Object.defineProperties(THREE.Box2.prototype,{empty:{value:function(){return this.isEmpty()}},isIntersectionBox:{value:function(a){return this.intersectsBox(a)}}}),Object.defineProperties(THREE.Box3.prototype,{empty:{value:function(){return this.isEmpty()}},isIntersectionBox:{value:function(a){return this.intersectsBox(a)}},isIntersectionSphere:{value:function(a){return this.intersectsSphere(a)}}}),Object.defineProperties(THREE.Matrix3.prototype,{multiplyVector3:{value:function(a){return a.applyMatrix3(this)}},multiplyVector3Array:{value:function(a){return this.applyToVector3Array(a)}}}),Object.defineProperties(THREE.Matrix4.prototype,{extractPosition:{value:function(a){return this.copyPosition(a)}},setRotationFromQuaternion:{value:function(a){return this.makeRotationFromQuaternion(a)}},multiplyVector3:{value:function(a){return a.applyProjection(this)}},multiplyVector4:{value:function(a){return a.applyMatrix4(this)}},multiplyVector3Array:{value:function(a){return this.applyToVector3Array(a)}},rotateAxis:{value:function(a){a.transformDirection(this)}},crossVector:{value:function(a){return a.applyMatrix4(this)}},translate:{value:function(a){}},rotateX:{value:function(a){}},rotateY:{value:function(a){}},rotateZ:{value:function(a){}},rotateByAxis:{value:function(a,h){}}}),Object.defineProperties(THREE.Plane.prototype,{isIntersectionLine:{value:function(a){return this.intersectsLine(a)}}}),Object.defineProperties(THREE.Quaternion.prototype,{multiplyVector3:{value:function(a){return a.applyQuaternion(this)}}}),Object.defineProperties(THREE.Ray.prototype,{isIntersectionBox:{value:function(a){return this.intersectsBox(a)}},isIntersectionPlane:{value:function(a){return this.intersectsPlane(a)}},isIntersectionSphere:{value:function(a){return this.intersectsSphere(a)}}}),Object.defineProperties(THREE.Vector3.prototype,{setEulerFromRotationMatrix:{value:function(){}},setEulerFromQuaternion:{value:function(){}},getPositionFromMatrix:{value:function(a){return this.setFromMatrixPosition(a)}},getScaleFromMatrix:{value:function(a){return this.setFromMatrixScale(a)}},getColumnFromMatrix:{value:function(a,h){return this.setFromMatrixColumn(a,h)}}}),THREE.Face4=function(a,h,c,d,e,f,E){return new THREE.Face3(a,h,c,e,f,E)},THREE.Vertex=function(a,h,c){return new THREE.Vector3(a,h,c)},Object.defineProperties(THREE.Object3D.prototype,{eulerOrder:{get:function(){return this.rotation.order},set:function(a){this.rotation.order=a}},getChildByName:{value:function(a){return this.getObjectByName(a)}},renderDepth:{set:function(a){}},translate:{value:function(a,h){return this.translateOnAxis(h,a)}},useQuaternion:{get:function(){},set:function(a){}}}),Object.defineProperties(THREE,{PointCloud:{value:function(a,h){return new THREE.Points(a,h)}},ParticleSystem:{value:function(a,h){return new THREE.Points(a,h)}}}),Object.defineProperties(THREE.Light.prototype,{onlyShadow:{set:function(a){}},shadowCameraFov:{set:function(a){this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){this.shadow.camera.far=a}},shadowCameraVisible:{set:function(a){}},shadowBias:{set:function(a){this.shadow.bias=a}},shadowDarkness:{set:function(a){}},shadowMapWidth:{set:function(a){this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){this.shadow.mapSize.height=a}}}),Object.defineProperties(THREE.BufferAttribute.prototype,{length:{get:function(){return this.array.length}}}),Object.defineProperties(THREE.BufferGeometry.prototype,{drawcalls:{get:function(){return this.groups}},offsets:{get:function(){return this.groups}},addIndex:{value:function(a){this.setIndex(a)}},addDrawCall:{value:function(a,h,c){this.addGroup(a,h)}},clearDrawCalls:{value:function(){this.clearGroups()}},computeTangents:{value:function(){}},computeOffsets:{value:function(){}}}),Object.defineProperties(THREE.Material.prototype,{wrapAround:{get:function(){},set:function(a){}},wrapRGB:{get:function(){return new THREE.Color}}}),Object.defineProperties(THREE,{PointCloudMaterial:{value:function(a){return new THREE.PointsMaterial(a)}},ParticleBasicMaterial:{value:function(a){return new THREE.PointsMaterial(a)}},ParticleSystemMaterial:{value:function(a){return new THREE.PointsMaterial(a)}}}),Object.defineProperties(THREE.MeshPhongMaterial.prototype,{metal:{get:function(){return!1},set:function(a){}}}),Object.defineProperties(THREE.ShaderMaterial.prototype,{derivatives:{get:function(){return this.extensions.derivatives},set:function(a){this.extensions.derivatives=a}}}),Object.defineProperties(THREE.WebGLRenderer.prototype,{supportsFloatTextures:{value:function(){return this.extensions.get("OES_texture_float")}},supportsHalfFloatTextures:{value:function(){return this.extensions.get("OES_texture_half_float")}},supportsStandardDerivatives:{value:function(){return this.extensions.get("OES_standard_derivatives")}},supportsCompressedTextureS3TC:{value:function(){return this.extensions.get("WEBGL_compressed_texture_s3tc")}},supportsCompressedTexturePVRTC:{value:function(){return this.extensions.get("WEBGL_compressed_texture_pvrtc")}},supportsBlendMinMax:{value:function(){return this.extensions.get("EXT_blend_minmax")}},supportsVertexTextures:{value:function(){return this.capabilities.vertexTextures}},supportsInstancedArrays:{value:function(){return this.extensions.get("ANGLE_instanced_arrays")}},enableScissorTest:{value:function(a){this.setScissorTest(a)}},initMaterial:{value:function(){}},addPrePlugin:{value:function(){}},addPostPlugin:{value:function(){}},updateShadowMap:{value:function(){}},shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){this.shadowMap.type=a}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(a){this.shadowMap.cullFace=a}}}),Object.defineProperties(THREE.WebGLRenderTarget.prototype,{wrapS:{get:function(){return this.texture.wrapS},set:function(a){this.texture.wrapS=a}},wrapT:{get:function(){return this.texture.wrapT},set:function(a){this.texture.wrapT=a}},magFilter:{get:function(){return this.texture.magFilter},set:function(a){this.texture.magFilter=a}},minFilter:{get:function(){return this.texture.minFilter},set:function(a){this.texture.minFilter=a}},anisotropy:{get:function(){return this.texture.anisotropy},set:function(a){this.texture.anisotropy=a}},offset:{get:function(){return this.texture.offset},set:function(a){this.texture.offset=a}},repeat:{get:function(){return this.texture.repeat},set:function(a){this.texture.repeat=a}},format:{get:function(){return this.texture.format},set:function(a){this.texture.format=a}},type:{get:function(){return this.texture.type},set:function(a){this.texture.type=a}},generateMipmaps:{get:function(){return this.texture.generateMipmaps},set:function(a){this.texture.generateMipmaps=a}}}),THREE.GeometryUtils={merge:function(a,h,c){var d;h instanceof THREE.Mesh&&(h.matrixAutoUpdate&&h.updateMatrix(),d=h.matrix,h=h.geometry),a.merge(h,d,c)},center:function(a){return a.center()}},THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(a,h,c,d){var e=new THREE.TextureLoader;return e.setCrossOrigin(this.crossOrigin),a=e.load(a,c,void 0,d),h&&(a.mapping=h),a},loadTextureCube:function(a,h,c,d){var e=new THREE.CubeTextureLoader;return e.setCrossOrigin(this.crossOrigin),a=e.load(a,c,void 0,d),h&&(a.mapping=h),a},loadCompressedTexture:function(){},loadCompressedTextureCube:function(){}},THREE.Projector=function(){this.projectVector=function(a,h){a.project(h)},this.unprojectVector=function(a,h){a.unproject(h)},this.pickingRay=function(a,h){}},THREE.CanvasRenderer=function(){this.domElement=document.createElement("canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}},THREE.MeshFaceMaterial=THREE.MultiMaterial,THREE.CurveUtils={tangentQuadraticBezier:function(a,h,c,d){return 2*(1-a)*(c-h)+2*a*(d-c)},tangentCubicBezier:function(a,h,c,d,e){return-3*h*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,h,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,h,c,d,e){a=.5*(c-a),d=.5*(d-h);var f=e*e;return(2*h-2*c+a+d)*e*f+(-3*h+3*c-2*a-d)*f+a*e+h}},THREE.SceneUtils={createMultiMaterialObject:function(a,h){for(var c=new THREE.Group,d=0,e=h.length;e>d;d++)c.add(new THREE.Mesh(a,h[d]));return c},detach:function(a,h,c){a.applyMatrix(h.matrixWorld),h.remove(a),c.add(a)},attach:function(a,h,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld),a.applyMatrix(d),h.remove(a),c.add(a)}},THREE.ShapeUtils={area:function(a){for(var h=a.length,c=0,d=h-1,e=0;h>e;d=e++)c+=a[d].x*a[e].y-a[e].x*a[d].y;return.5*c},triangulate:function(){return function(a,h){var c=a.length;if(3>c)return null;var d=[],e=[],f=[],E,g,v;if(0<THREE.ShapeUtils.area(a))for(g=0;c>g;g++)e[g]=g;else for(g=0;c>g;g++)e[g]=c-1-g;var l=2*c;for(g=c-1;c>2&&!(0>=l--);){E=g,E>=c&&(E=0),g=E+1,g>=c&&(g=0),v=g+1,v>=c&&(v=0);var p;e:{var n=p=void 0,m=void 0,q=void 0,u=void 0,T=void 0,t=void 0,s=void 0,y=void 0,n=a[e[E]].x,m=a[e[E]].y,q=a[e[g]].x,u=a[e[g]].y,T=a[e[v]].x,t=a[e[v]].y;if(Number.EPSILON>(q-n)*(t-m)-(u-m)*(T-n))p=!1;else{var R=void 0,x=void 0,H=void 0,_=void 0,b=void 0,M=void 0,S=void 0,w=void 0,A=void 0,L=void 0,A=w=S=y=s=void 0,R=T-q,x=t-u,H=n-T,_=m-t,b=q-n,M=u-m;for(p=0;c>p;p++)if(s=a[e[p]].x,y=a[e[p]].y,!(s===n&&y===m||s===q&&y===u||s===T&&y===t)&&(S=s-n,w=y-m,A=s-q,L=y-u,s-=T,y-=t,A=R*L-x*A,S=b*w-M*S,w=H*y-_*s,A>=-Number.EPSILON&&w>=-Number.EPSILON&&S>=-Number.EPSILON)){p=!1;break e}p=!0}}if(p){for(d.push([a[e[E]],a[e[g]],a[e[v]]]),f.push([e[E],e[g],e[v]]),E=g,v=g+1;c>v;E++,v++)e[E]=e[v];c--,l=2*c}}return h?f:d}}(),triangulateShape:function(a,h){function c(a,h,c){return a.x!==h.x?a.x<h.x?a.x<=c.x&&c.x<=h.x:h.x<=c.x&&c.x<=a.x:a.y<h.y?a.y<=c.y&&c.y<=h.y:h.y<=c.y&&c.y<=a.y}function d(a,h,d,e,f){var E=h.x-a.x,g=h.y-a.y,v=e.x-d.x,l=e.y-d.y,n=a.x-d.x,p=a.y-d.y,T=g*v-E*l,y=g*n-E*p;if(Math.abs(T)>Number.EPSILON){if(T>0){if(0>y||y>T)return[];if(v=l*n-v*p,0>v||v>T)return[]}else{if(y>0||T>y)return[];if(v=l*n-v*p,v>0||T>v)return[]}return 0===v?!f||0!==y&&y!==T?[a]:[]:v===T?!f||0!==y&&y!==T?[h]:[]:0===y?[d]:y===T?[e]:(f=v/T,[{x:a.x+f*E,y:a.y+f*g}])}return 0!==y||l*n!==v*p?[]:(g=0===E&&0===g,v=0===v&&0===l,g&&v?a.x!==d.x||a.y!==d.y?[]:[a]:g?c(d,e,a)?[a]:[]:v?c(a,h,d)?[d]:[]:(0!==E?(a.x<h.x?(E=a,v=a.x,g=h,a=h.x):(E=h,v=h.x,g=a,a=a.x),d.x<e.x?(h=d,T=d.x,l=e,d=e.x):(h=e,T=e.x,l=d,d=d.x)):(a.y<h.y?(E=a,v=a.y,g=h,a=h.y):(E=h,v=h.y,g=a,a=a.y),d.y<e.y?(h=d,T=d.y,l=e,d=e.y):(h=e,T=e.y,l=d,d=d.y)),T>=v?T>a?[]:a===T?f?[]:[h]:d>=a?[h,g]:[h,l]:v>d?[]:v===d?f?[]:[E]:d>=a?[E,g]:[E,l]))}function e(a,h,c,d){var e=h.x-a.x,f=h.y-a.y;h=c.x-a.x,c=c.y-a.y;var E=d.x-a.x;return d=d.y-a.y,a=e*c-f*h,e=e*d-f*E,Math.abs(a)>Number.EPSILON?(h=E*c-d*h,a>0?e>=0&&h>=0:e>=0||h>=0):e>0}var f,E,g,v,l,p={};for(g=a.concat(),f=0,E=h.length;E>f;f++)Array.prototype.push.apply(g,h[f]);for(f=0,E=g.length;E>f;f++)l=g[f].x+":"+g[f].y,void 0!==p[l]&&void 0,p[l]=f;f=function(a,h){function c(a,h){var d=g.length-1,f=a-1;0>f&&(f=d);var c=a+1;return c>d&&(c=0),(d=e(g[a],g[f],g[c],v[h]))?(d=v.length-1,f=h-1,0>f&&(f=d),c=h+1,c>d&&(c=0),(d=e(v[h],v[f],v[c],g[a]))?!0:!1):!1}function f(a,h){var c,e;for(c=0;c<g.length;c++)if(e=c+1,e%=g.length,e=d(a,h,g[c],g[e],!0),0<e.length)return!0;return!1}function E(a,c){var e,f,E,g;for(e=0;e<l.length;e++)for(f=h[l[e]],E=0;E<f.length;E++)if(g=E+1,g%=f.length,g=d(a,c,f[E],f[g],!0),0<g.length)return!0;return!1}var g=a.concat(),v,l=[],n,p,T,y,R,H=[],_,b,M,S=0;for(n=h.length;n>S;S++)l.push(S);_=0;for(var w=2*l.length;0<l.length&&(w--,!(0>w));)for(p=_;p<g.length;p++){for(T=g[p],n=-1,S=0;S<l.length;S++)if(y=l[S],R=T.x+":"+T.y+":"+y,void 0===H[R]){for(v=h[y],b=0;b<v.length;b++)if(y=v[b],c(p,b)&&!f(T,y)&&!E(T,y)){n=b,l.splice(S,1),_=g.slice(0,p+1),y=g.slice(p),b=v.slice(n),M=v.slice(0,n+1),g=_.concat(b).concat(M).concat(y),_=p;break}if(n>=0)break;H[R]=!0}if(n>=0)break}return g}(a,h);var n=THREE.ShapeUtils.triangulate(f,!1);for(f=0,E=n.length;E>f;f++)for(v=n[f],g=0;3>g;g++)l=v[g].x+":"+v[g].y,l=p[l],void 0!==l&&(v[g]=l);return n.concat()},isClockWise:function(a){return 0>THREE.ShapeUtils.area(a)},b2:function(){return function(a,h,c,d){var e=1-a;return e*e*h+2*(1-a)*a*c+a*a*d}}(),b3:function(){return function(a,h,c,d,e){var f=1-a,E=1-a;return f*f*f*h+3*E*E*a*c+3*(1-a)*a*a*d+a*a*a*e}}()},THREE.Curve=function(){},THREE.Curve.prototype={constructor:THREE.Curve,getPoint:function(a){return null},getPointAt:function(a){return a=this.getUtoTmapping(a),this.getPoint(a)},getPoints:function(a){a||(a=5);var h,c=[];for(h=0;a>=h;h++)c.push(this.getPoint(h/a));return c},getSpacedPoints:function(a){a||(a=5);var h,c=[];for(h=0;a>=h;h++)c.push(this.getPointAt(h/a));return c},getLength:function(){var a=this.getLengths();return a[a.length-1]},getLengths:function(a){if(a||(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200),this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var h=[],c,d=this.getPoint(0),e,f=0;for(h.push(0),e=1;a>=e;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),h.push(f),d=c;return this.cacheArcLengths=h},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(a,h){var c=this.getLengths(),d=0,e=c.length,f;f=h?h:a*c[e-1];for(var E=0,g=e-1,v;g>=E;)if(d=Math.floor(E+(g-E)/2),v=c[d]-f,0>v)E=d+1;else{if(!(v>0)){g=d;break}g=d-1}return d=g,c[d]===f?d/(e-1):(E=c[d],c=(d+(f-E)/(c[d+1]-E))/(e-1))},getTangent:function(a){var h=a-1e-4;return a+=1e-4,0>h&&(h=0),a>1&&(a=1),h=this.getPoint(h),this.getPoint(a).clone().sub(h).normalize()},getTangentAt:function(a){return a=this.getUtoTmapping(a),this.getTangent(a)}},THREE.Curve.create=function(a,h){return a.prototype=Object.create(THREE.Curve.prototype),a.prototype.constructor=a,a.prototype.getPoint=h,a},THREE.CurvePath=function(){this.curves=[],this.autoClose=!1},THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype),THREE.CurvePath.prototype.constructor=THREE.CurvePath,THREE.CurvePath.prototype.add=function(a){this.curves.push(a)},THREE.CurvePath.prototype.closePath=function(){var a=this.curves[0].getPoint(0),h=this.curves[this.curves.length-1].getPoint(1);a.equals(h)||this.curves.push(new THREE.LineCurve(h,a))},THREE.CurvePath.prototype.getPoint=function(a){for(var h=a*this.getLength(),c=this.getCurveLengths(),d=0;d<c.length;){if(c[d]>=h)return a=this.curves[d],h=1-(c[d]-h)/a.getLength(),a.getPointAt(h);d++}return null},THREE.CurvePath.prototype.getLength=function(){var a=this.getCurveLengths();return a[a.length-1]},THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],h=0,c=0,d=this.curves.length;d>c;c++)h+=this.curves[c].getLength(),a.push(h);return this.cacheLengths=a},THREE.CurvePath.prototype.createPointsGeometry=function(a){return a=this.getPoints(a),this.createGeometry(a)},THREE.CurvePath.prototype.createSpacedPointsGeometry=function(a){return a=this.getSpacedPoints(a),this.createGeometry(a)},THREE.CurvePath.prototype.createGeometry=function(a){for(var h=new THREE.Geometry,c=0,d=a.length;d>c;c++){var e=a[c];h.vertices.push(new THREE.Vector3(e.x,e.y,e.z||0))}return h},THREE.Font=function(a){this.data=a},THREE.Font.prototype={constructor:THREE.Font,generateShapes:function(a,h,c){void 0===h&&(h=100),void 0===c&&(c=4);var d=this.data;a=String(a).split("");var e=h/d.resolution,f=0;h=[];for(var E=0;E<a.length;E++){var g;g=e;var v=f,l=d.glyphs[a[E]]||d.glyphs["?"];if(l){var p=new THREE.Path,n=[],m=THREE.ShapeUtils.b2,q=THREE.ShapeUtils.b3,u=void 0,T=void 0,t=T=u=void 0,s=void 0,y=void 0,R=void 0,x=void 0,H=void 0,s=void 0;if(l.o)for(var _=l._cachedOutline||(l._cachedOutline=l.o.split(" ")),b=0,M=_.length;M>b;)switch(_[b++]){case"m":u=_[b++]*g+v,T=_[b++]*g,p.moveTo(u,T);break;case"l":u=_[b++]*g+v,T=_[b++]*g,p.lineTo(u,T);break;case"q":if(u=_[b++]*g+v,T=_[b++]*g,y=_[b++]*g+v,R=_[b++]*g,p.quadraticCurveTo(y,R,u,T),s=n[n.length-1])for(var t=s.x,s=s.y,S=1;c>=S;S++){var w=S/c;m(w,t,y,u),m(w,s,R,T)}break;case"b":if(u=_[b++]*g+v,T=_[b++]*g,y=_[b++]*g+v,R=_[b++]*g,x=_[b++]*g+v,H=_[b++]*g,p.bezierCurveTo(y,R,x,H,u,T),s=n[n.length-1])for(t=s.x,s=s.y,S=1;c>=S;S++)w=S/c,q(w,t,y,x,u),q(w,s,R,H,T)}g={offset:l.ha*g,path:p}}else g=void 0;f+=g.offset,h.push(g.path)}for(c=[],d=0,a=h.length;a>d;d++)Array.prototype.push.apply(c,h[d].toShapes());return c}},THREE.Path=function(a){THREE.CurvePath.call(this),this.actions=[],a&&this.fromPoints(a)},THREE.Path.prototype=Object.create(THREE.CurvePath.prototype),THREE.Path.prototype.constructor=THREE.Path,THREE.Path.prototype.fromPoints=function(a){this.moveTo(a[0].x,a[0].y);for(var h=1,c=a.length;c>h;h++)this.lineTo(a[h].x,a[h].y)},THREE.Path.prototype.moveTo=function(a,h){this.actions.push({action:"moveTo",args:[a,h]})},THREE.Path.prototype.lineTo=function(a,h){var c=this.actions[this.actions.length-1].args,c=new THREE.LineCurve(new THREE.Vector2(c[c.length-2],c[c.length-1]),new THREE.Vector2(a,h));this.curves.push(c),this.actions.push({action:"lineTo",args:[a,h]})},THREE.Path.prototype.quadraticCurveTo=function(a,h,c,d){var e=this.actions[this.actions.length-1].args,e=new THREE.QuadraticBezierCurve(new THREE.Vector2(e[e.length-2],e[e.length-1]),new THREE.Vector2(a,h),new THREE.Vector2(c,d));this.curves.push(e),this.actions.push({action:"quadraticCurveTo",args:[a,h,c,d]})},THREE.Path.prototype.bezierCurveTo=function(a,h,c,d,e,f){var E=this.actions[this.actions.length-1].args,E=new THREE.CubicBezierCurve(new THREE.Vector2(E[E.length-2],E[E.length-1]),new THREE.Vector2(a,h),new THREE.Vector2(c,d),new THREE.Vector2(e,f));this.curves.push(E),this.actions.push({action:"bezierCurveTo",args:[a,h,c,d,e,f]})},THREE.Path.prototype.splineThru=function(a){var h=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a),c=new THREE.SplineCurve(c),this.curves.push(c),this.actions.push({action:"splineThru",args:h})},THREE.Path.prototype.arc=function(a,h,c,d,e,f){var E=this.actions[this.actions.length-1].args;this.absarc(a+E[E.length-2],h+E[E.length-1],c,d,e,f)},THREE.Path.prototype.absarc=function(a,h,c,d,e,f){this.absellipse(a,h,c,c,d,e,f)},THREE.Path.prototype.ellipse=function(a,h,c,d,e,f,E,g){var v=this.actions[this.actions.length-1].args;this.absellipse(a+v[v.length-2],h+v[v.length-1],c,d,e,f,E,g)},THREE.Path.prototype.absellipse=function(a,h,c,d,e,f,E,g){var v=[a,h,c,d,e,f,E,g||0];a=new THREE.EllipseCurve(a,h,c,d,e,f,E,g),this.curves.push(a),a=a.getPoint(1),v.push(a.x),v.push(a.y),this.actions.push({action:"ellipse",args:v})},THREE.Path.prototype.getSpacedPoints=function(a){a||(a=40);for(var h=[],c=0;a>c;c++)h.push(this.getPoint(c/a));return this.autoClose&&h.push(h[0]),h},THREE.Path.prototype.getPoints=function(a){a=a||12;for(var h=THREE.ShapeUtils.b2,c=THREE.ShapeUtils.b3,d=[],e,f,E,g,v,l,p,n,m,q,u=0,T=this.actions.length;T>u;u++){m=this.actions[u];var t=m.args;switch(m.action){case"moveTo":d.push(new THREE.Vector2(t[0],t[1]));break;case"lineTo":d.push(new THREE.Vector2(t[0],t[1]));break;case"quadraticCurveTo":for(e=t[2],f=t[3],v=t[0],l=t[1],0<d.length?(m=d[d.length-1],p=m.x,n=m.y):(m=this.actions[u-1].args,p=m[m.length-2],n=m[m.length-1]),t=1;a>=t;t++)q=t/a,m=h(q,p,v,e),q=h(q,n,l,f),d.push(new THREE.Vector2(m,q));break;case"bezierCurveTo":for(e=t[4],f=t[5],v=t[0],l=t[1],E=t[2],g=t[3],0<d.length?(m=d[d.length-1],p=m.x,n=m.y):(m=this.actions[u-1].args,p=m[m.length-2],n=m[m.length-1]),t=1;a>=t;t++)q=t/a,m=c(q,p,v,E,e),q=c(q,n,l,g,f),d.push(new THREE.Vector2(m,q));break;case"splineThru":for(m=this.actions[u-1].args,q=[new THREE.Vector2(m[m.length-2],m[m.length-1])],m=a*t[0].length,q=q.concat(t[0]),q=new THREE.SplineCurve(q),t=1;m>=t;t++)d.push(q.getPointAt(t/m));break;case"arc":for(e=t[0],f=t[1],l=t[2],E=t[3],m=t[4],v=!!t[5],p=m-E,n=2*a,t=1;n>=t;t++)q=t/n,v||(q=1-q),q=E+q*p,m=e+l*Math.cos(q),q=f+l*Math.sin(q),d.push(new THREE.Vector2(m,q));break;case"ellipse":e=t[0],f=t[1],l=t[2],g=t[3],E=t[4],m=t[5],v=!!t[6];var s=t[7];p=m-E,n=2*a;var y,R;for(0!==s&&(y=Math.cos(s),R=Math.sin(s)),t=1;n>=t;t++){if(q=t/n,v||(q=1-q),q=E+q*p,m=e+l*Math.cos(q),q=f+g*Math.sin(q),0!==s){var x=m;m=(x-e)*y-(q-f)*R+e,q=(x-e)*R+(q-f)*y+f}d.push(new THREE.Vector2(m,q))}}}return a=d[d.length-1],Math.abs(a.x-d[0].x)<Number.EPSILON&&Math.abs(a.y-d[0].y)<Number.EPSILON&&d.splice(d.length-1,1),this.autoClose&&d.push(d[0]),d},THREE.Path.prototype.toShapes=function(a,h){function c(a){for(var h=[],c=0,d=a.length;d>c;c++){var e=a[c],f=new THREE.Shape;f.actions=e.actions,f.curves=e.curves,h.push(f)}return h}function d(a,h){for(var c=h.length,d=!1,e=c-1,f=0;c>f;e=f++){var E=h[e],g=h[f],v=g.x-E.x,l=g.y-E.y;if(Math.abs(l)>Number.EPSILON){if(0>l&&(E=h[f],v=-v,g=h[e],l=-l),!(a.y<E.y||a.y>g.y))if(a.y===E.y){if(a.x===E.x)return!0}else{if(e=l*(a.x-E.x)-v*(a.y-E.y),0===e)return!0;0>e||(d=!d)}}else if(a.y===E.y&&(g.x<=a.x&&a.x<=E.x||E.x<=a.x&&a.x<=g.x))return!0}return d}var e=THREE.ShapeUtils.isClockWise,f=function(a){for(var h=[],c=new THREE.Path,d=0,e=a.length;e>d;d++){var f=a[d],E=f.args,f=f.action;"moveTo"===f&&0!==c.actions.length&&(h.push(c),c=new THREE.Path),c[f].apply(c,E)}return 0!==c.actions.length&&h.push(c),h}(this.actions);if(0===f.length)return[];if(!0===h)return c(f);var E,g,v,l=[];if(1===f.length)return g=f[0],v=new THREE.Shape,v.actions=g.actions,v.curves=g.curves,l.push(v),l;var p=!e(f[0].getPoints()),p=a?!p:p;v=[];var n=[],m=[],q=0,u;n[q]=void 0,m[q]=[];for(var T=0,t=f.length;t>T;T++)g=f[T],u=g.getPoints(),E=e(u),(E=a?!E:E)?(!p&&n[q]&&q++,n[q]={s:new THREE.Shape,p:u},n[q].s.actions=g.actions,n[q].s.curves=g.curves,p&&q++,m[q]=[]):m[q].push({h:g,p:u[0]});if(!n[0])return c(f);if(1<n.length){for(T=!1,g=[],e=0,f=n.length;f>e;e++)v[e]=[];for(e=0,f=n.length;f>e;e++)for(E=m[e],p=0;p<E.length;p++){for(q=E[p],u=!0,t=0;t<n.length;t++)d(q.p,n[t].p)&&(e!==t&&g.push({froms:e,tos:t,hole:p}),u?(u=!1,v[t].push(q)):T=!0);u&&v[e].push(q)}0<g.length&&(T||(m=v))}for(T=0,e=n.length;e>T;T++)for(v=n[T].s,l.push(v),g=m[T],f=0,E=g.length;E>f;f++)v.holes.push(g[f].h);return l},THREE.Shape=function(){THREE.Path.apply(this,arguments),this.holes=[]},THREE.Shape.prototype=Object.create(THREE.Path.prototype),THREE.Shape.prototype.constructor=THREE.Shape,THREE.Shape.prototype.extrude=function(a){return new THREE.ExtrudeGeometry(this,a)},THREE.Shape.prototype.makeGeometry=function(a){return new THREE.ShapeGeometry(this,a)},THREE.Shape.prototype.getPointsHoles=function(a){for(var h=[],c=0,d=this.holes.length;d>c;c++)h[c]=this.holes[c].getPoints(a);return h},THREE.Shape.prototype.extractAllPoints=function(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}},THREE.Shape.prototype.extractPoints=function(a){return this.extractAllPoints(a)},THREE.LineCurve=function(a,h){this.v1=a,this.v2=h},THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.LineCurve.prototype.constructor=THREE.LineCurve,THREE.LineCurve.prototype.getPoint=function(a){var h=this.v2.clone().sub(this.v1);return h.multiplyScalar(a).add(this.v1),h},THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)},THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()},THREE.QuadraticBezierCurve=function(a,h,c){this.v0=a,this.v1=h,this.v2=c},THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve,THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var h=THREE.ShapeUtils.b2;return new THREE.Vector2(h(a,this.v0.x,this.v1.x,this.v2.x),h(a,this.v0.y,this.v1.y,this.v2.y))},THREE.QuadraticBezierCurve.prototype.getTangent=function(a){var h=THREE.CurveUtils.tangentQuadraticBezier;return new THREE.Vector2(h(a,this.v0.x,this.v1.x,this.v2.x),h(a,this.v0.y,this.v1.y,this.v2.y)).normalize()},THREE.CubicBezierCurve=function(a,h,c,d){this.v0=a,this.v1=h,this.v2=c,this.v3=d},THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve,THREE.CubicBezierCurve.prototype.getPoint=function(a){var h=THREE.ShapeUtils.b3;return new THREE.Vector2(h(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),h(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y))
},THREE.CubicBezierCurve.prototype.getTangent=function(a){var h=THREE.CurveUtils.tangentCubicBezier;return new THREE.Vector2(h(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),h(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y)).normalize()},THREE.SplineCurve=function(a){this.points=void 0==a?[]:a},THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.SplineCurve.prototype.constructor=THREE.SplineCurve,THREE.SplineCurve.prototype.getPoint=function(a){var h=this.points;a*=h.length-1;var c=Math.floor(a);a-=c;var d=h[0===c?c:c-1],e=h[c],f=h[c>h.length-2?h.length-1:c+1],h=h[c>h.length-3?h.length-1:c+2],c=THREE.CurveUtils.interpolate;return new THREE.Vector2(c(d.x,e.x,f.x,h.x,a),c(d.y,e.y,f.y,h.y,a))},THREE.EllipseCurve=function(a,h,c,d,e,f,E,g){this.aX=a,this.aY=h,this.xRadius=c,this.yRadius=d,this.aStartAngle=e,this.aEndAngle=f,this.aClockwise=E,this.aRotation=g||0},THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype),THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve,THREE.EllipseCurve.prototype.getPoint=function(a){var h=this.aEndAngle-this.aStartAngle;0>h&&(h+=2*Math.PI),h>2*Math.PI&&(h-=2*Math.PI),h=!0===this.aClockwise?this.aEndAngle+(1-a)*(2*Math.PI-h):this.aStartAngle+a*h,a=this.aX+this.xRadius*Math.cos(h);var c=this.aY+this.yRadius*Math.sin(h);if(0!==this.aRotation){var h=Math.cos(this.aRotation),d=Math.sin(this.aRotation),e=a;a=(e-this.aX)*h-(c-this.aY)*d+this.aX,c=(e-this.aX)*d+(c-this.aY)*h+this.aY}return new THREE.Vector2(a,c)},THREE.ArcCurve=function(a,h,c,d,e,f){THREE.EllipseCurve.call(this,a,h,c,c,d,e,f)},THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype),THREE.ArcCurve.prototype.constructor=THREE.ArcCurve,THREE.LineCurve3=THREE.Curve.create(function(a,h){this.v1=a,this.v2=h},function(a){var h=new THREE.Vector3;return h.subVectors(this.v2,this.v1),h.multiplyScalar(a),h.add(this.v1),h}),THREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,h,c){this.v0=a,this.v1=h,this.v2=c},function(a){var h=THREE.ShapeUtils.b2;return new THREE.Vector3(h(a,this.v0.x,this.v1.x,this.v2.x),h(a,this.v0.y,this.v1.y,this.v2.y),h(a,this.v0.z,this.v1.z,this.v2.z))}),THREE.CubicBezierCurve3=THREE.Curve.create(function(a,h,c,d){this.v0=a,this.v1=h,this.v2=c,this.v3=d},function(a){var h=THREE.ShapeUtils.b3;return new THREE.Vector3(h(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x),h(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y),h(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z))}),THREE.SplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var h=this.points;a*=h.length-1;var c=Math.floor(a);a-=c;var d=h[0==c?c:c-1],e=h[c],f=h[c>h.length-2?h.length-1:c+1],h=h[c>h.length-3?h.length-1:c+2],c=THREE.CurveUtils.interpolate;return new THREE.Vector3(c(d.x,e.x,f.x,h.x,a),c(d.y,e.y,f.y,h.y,a),c(d.z,e.z,f.z,h.z,a))}),THREE.CatmullRomCurve3=function(){function a(){}var h=new THREE.Vector3,c=new a,d=new a,e=new a;return a.prototype.init=function(a,h,c,d){this.c0=a,this.c1=c,this.c2=-3*a+3*h-2*c-d,this.c3=2*a-2*h+c+d},a.prototype.initNonuniformCatmullRom=function(a,h,c,d,e,p,n){a=((h-a)/e-(c-a)/(e+p)+(c-h)/p)*p,d=((c-h)/p-(d-h)/(p+n)+(d-c)/n)*p,this.init(h,c,a,d)},a.prototype.initCatmullRom=function(a,h,c,d,e){this.init(h,c,e*(c-a),e*(d-h))},a.prototype.calc=function(a){var h=a*a;return this.c0+this.c1*a+this.c2*h+this.c3*h*a},THREE.Curve.create(function(a){this.points=a||[],this.closed=!1},function(a){var E=this.points,g,v;v=E.length,a*=v-(this.closed?0:1),g=Math.floor(a),a-=g,this.closed?g+=g>0?0:(Math.floor(Math.abs(g)/E.length)+1)*E.length:0===a&&g===v-1&&(g=v-2,a=1);var l,p,n;if(this.closed||g>0?l=E[(g-1)%v]:(h.subVectors(E[0],E[1]).add(E[0]),l=h),p=E[g%v],n=E[(g+1)%v],this.closed||v>g+2?E=E[(g+2)%v]:(h.subVectors(E[v-1],E[v-2]).add(E[v-1]),E=h),void 0===this.type||"centripetal"===this.type||"chordal"===this.type){var m="chordal"===this.type?.5:.25;v=Math.pow(l.distanceToSquared(p),m),g=Math.pow(p.distanceToSquared(n),m),m=Math.pow(n.distanceToSquared(E),m),1e-4>g&&(g=1),1e-4>v&&(v=g),1e-4>m&&(m=g),c.initNonuniformCatmullRom(l.x,p.x,n.x,E.x,v,g,m),d.initNonuniformCatmullRom(l.y,p.y,n.y,E.y,v,g,m),e.initNonuniformCatmullRom(l.z,p.z,n.z,E.z,v,g,m)}else"catmullrom"===this.type&&(v=void 0!==this.tension?this.tension:.5,c.initCatmullRom(l.x,p.x,n.x,E.x,v),d.initCatmullRom(l.y,p.y,n.y,E.y,v),e.initCatmullRom(l.z,p.z,n.z,E.z,v));return new THREE.Vector3(c.calc(a),d.calc(a),e.calc(a))})}(),THREE.ClosedSplineCurve3=function(a){THREE.CatmullRomCurve3.call(this,a),this.type="catmullrom",this.closed=!0},THREE.ClosedSplineCurve3.prototype=Object.create(THREE.CatmullRomCurve3.prototype),THREE.BoxGeometry=function(a,h,c,d,e,f){THREE.Geometry.call(this),this.type="BoxGeometry",this.parameters={width:a,height:h,depth:c,widthSegments:d,heightSegments:e,depthSegments:f},this.fromBufferGeometry(new THREE.BoxBufferGeometry(a,h,c,d,e,f)),this.mergeVertices()},THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry,THREE.CubeGeometry=THREE.BoxGeometry,THREE.BoxBufferGeometry=function(a,h,c,d,e,f){function E(a,h,c,d,e,f,E,v,l,R,H){var _=f/l,b=E/R,M=f/2,S=E/2,w=v/2;E=l+1;for(var A=R+1,L=f=0,C=new THREE.Vector3,P=0;A>P;P++)for(var B=P*b-S,I=0;E>I;I++)C[a]=(I*_-M)*d,C[h]=B*e,C[c]=w,n[u]=C.x,n[u+1]=C.y,n[u+2]=C.z,C[a]=0,C[h]=0,C[c]=v>0?1:-1,m[u]=C.x,m[u+1]=C.y,m[u+2]=C.z,q[T]=I/l,q[T+1]=1-P/R,u+=3,T+=2,f+=1;for(P=0;R>P;P++)for(I=0;l>I;I++)a=s+I+E*(P+1),h=s+(I+1)+E*(P+1),c=s+(I+1)+E*P,p[t]=s+I+E*P,p[t+1]=a,p[t+2]=c,p[t+3]=a,p[t+4]=h,p[t+5]=c,t+=6,L+=6;g.addGroup(y,L,H),y+=L,s+=f}THREE.BufferGeometry.call(this),this.type="BoxBufferGeometry",this.parameters={width:a,height:h,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};var g=this;d=Math.floor(d)||1,e=Math.floor(e)||1,f=Math.floor(f)||1;var v=function(a,h,c){return a=0+a*h*2+a*c*2,a+=c*h*2,4*a}(d,e,f),l=v/4*6,p=new(l>65535?Uint32Array:Uint16Array)(l),n=new Float32Array(3*v),m=new Float32Array(3*v),q=new Float32Array(2*v),u=0,T=0,t=0,s=0,y=0;E("z","y","x",-1,-1,c,h,a,f,e,0),E("z","y","x",1,-1,c,h,-a,f,e,1),E("x","z","y",1,1,a,c,h,d,f,2),E("x","z","y",1,-1,a,c,-h,d,f,3),E("x","y","z",1,-1,a,h,c,d,e,4),E("x","y","z",-1,-1,a,h,-c,d,e,5),this.setIndex(new THREE.BufferAttribute(p,1)),this.addAttribute("position",new THREE.BufferAttribute(n,3)),this.addAttribute("normal",new THREE.BufferAttribute(m,3)),this.addAttribute("uv",new THREE.BufferAttribute(q,2))},THREE.BoxBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BoxBufferGeometry.prototype.constructor=THREE.BoxBufferGeometry,THREE.CircleGeometry=function(a,h,c,d){THREE.Geometry.call(this),this.type="CircleGeometry",this.parameters={radius:a,segments:h,thetaStart:c,thetaLength:d},this.fromBufferGeometry(new THREE.CircleBufferGeometry(a,h,c,d))},THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry,THREE.CircleBufferGeometry=function(a,h,c,d){THREE.BufferGeometry.call(this),this.type="CircleBufferGeometry",this.parameters={radius:a,segments:h,thetaStart:c,thetaLength:d},a=a||50,h=void 0!==h?Math.max(3,h):8,c=void 0!==c?c:0,d=void 0!==d?d:2*Math.PI;var e=h+2,f=new Float32Array(3*e),E=new Float32Array(3*e),e=new Float32Array(2*e);E[2]=1,e[0]=.5,e[1]=.5;for(var g=0,v=3,l=2;h>=g;g++,v+=3,l+=2){var p=c+g/h*d;f[v]=a*Math.cos(p),f[v+1]=a*Math.sin(p),E[v+2]=1,e[l]=(f[v]/a+1)/2,e[l+1]=(f[v+1]/a+1)/2}for(c=[],v=1;h>=v;v++)c.push(v,v+1,0);this.setIndex(new THREE.BufferAttribute(new Uint16Array(c),1)),this.addAttribute("position",new THREE.BufferAttribute(f,3)),this.addAttribute("normal",new THREE.BufferAttribute(E,3)),this.addAttribute("uv",new THREE.BufferAttribute(e,2)),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)},THREE.CircleBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.CircleBufferGeometry.prototype.constructor=THREE.CircleBufferGeometry,THREE.CylinderBufferGeometry=function(a,h,c,d,e,f,E,g){function v(c){var e,f,v;v=new THREE.Vector2;var l=new THREE.Vector3,p=!0===c?a:h,s=!0===c?1:-1;for(f=T,e=1;d>=e;e++)m.setXYZ(T,0,y*s,0),q.setXYZ(T,0,s,0),!0===c?(v.x=e/d,v.y=0):(v.x=(e-1)/d,v.y=1),u.setXY(T,v.x,v.y),T++;for(v=T,e=0;d>=e;e++){var R=e/d;l.x=p*Math.sin(R*g+E),l.y=y*s,l.z=p*Math.cos(R*g+E),m.setXYZ(T,l.x,l.y,l.z),q.setXYZ(T,0,s,0),u.setXY(T,R,!0===c?1:0),T++}for(e=0;d>e;e++)l=f+e,p=v+e,!0===c?(n.setX(t,p),t++,n.setX(t,p+1)):(n.setX(t,p+1),t++,n.setX(t,p)),t++,n.setX(t,l),t++}THREE.BufferGeometry.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:a,radiusBottom:h,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:E,thetaLength:g},a=void 0!==a?a:20,h=void 0!==h?h:20,c=void 0!==c?c:100,d=Math.floor(d)||8,e=Math.floor(e)||1,f=void 0!==f?f:!1,E=void 0!==E?E:0,g=void 0!==g?g:2*Math.PI;var l=function(){var a=(d+1)*(e+1);return!1===f&&(a+=2*(d+1)+2*d),a}(),p=function(){var a=d*e*6;return!1===f&&(a+=6*d),a}(),n=new THREE.BufferAttribute(new(p>65535?Uint32Array:Uint16Array)(p),1),m=new THREE.BufferAttribute(new Float32Array(3*l),3),q=new THREE.BufferAttribute(new Float32Array(3*l),3),u=new THREE.BufferAttribute(new Float32Array(2*l),2),T=0,t=0,s=[],y=c/2;!function(){var f,v,l=new THREE.Vector3,p=new THREE.Vector3,R=(h-a)/c;for(v=0;e>=v;v++){var H=[],_=v/e,b=_*(h-a)+a;for(f=0;d>=f;f++){var M=f/d;p.x=b*Math.sin(M*g+E),p.y=-_*c+y,p.z=b*Math.cos(M*g+E),m.setXYZ(T,p.x,p.y,p.z),l.copy(p),(0===a&&0===v||0===h&&v===e)&&(l.x=Math.sin(M*g+E),l.z=Math.cos(M*g+E)),l.setY(Math.sqrt(l.x*l.x+l.z*l.z)*R).normalize(),q.setXYZ(T,l.x,l.y,l.z),u.setXY(T,M,1-_),H.push(T),T++}s.push(H)}for(f=0;d>f;f++)for(v=0;e>v;v++)l=s[v+1][f],p=s[v+1][f+1],R=s[v][f+1],n.setX(t,s[v][f]),t++,n.setX(t,l),t++,n.setX(t,R),t++,n.setX(t,l),t++,n.setX(t,p),t++,n.setX(t,R),t++}(),!1===f&&(a>0&&v(!0),h>0&&v(!1)),this.setIndex(n),this.addAttribute("position",m),this.addAttribute("normal",q),this.addAttribute("uv",u)},THREE.CylinderBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.CylinderBufferGeometry.prototype.constructor=THREE.CylinderBufferGeometry,THREE.CylinderGeometry=function(a,h,c,d,e,f,E,g){THREE.Geometry.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:a,radiusBottom:h,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:E,thetaLength:g},this.fromBufferGeometry(new THREE.CylinderBufferGeometry(a,h,c,d,e,f,E,g)),this.mergeVertices()},THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry,THREE.EdgesGeometry=function(a,h){function c(a,h){return a-h}THREE.BufferGeometry.call(this);var d=Math.cos(THREE.Math.degToRad(void 0!==h?h:1)),e=[0,0],f={},E=["a","b","c"],g;a instanceof THREE.BufferGeometry?(g=new THREE.Geometry,g.fromBufferGeometry(a)):g=a.clone(),g.mergeVertices(),g.computeFaceNormals();var v=g.vertices;g=g.faces;for(var l=0,p=g.length;p>l;l++)for(var n=g[l],m=0;3>m;m++){e[0]=n[E[m]],e[1]=n[E[(m+1)%3]],e.sort(c);var q=e.toString();void 0===f[q]?f[q]={vert1:e[0],vert2:e[1],face1:l,face2:void 0}:f[q].face2=l}e=[];for(q in f)E=f[q],(void 0===E.face2||g[E.face1].normal.dot(g[E.face2].normal)<=d)&&(l=v[E.vert1],e.push(l.x),e.push(l.y),e.push(l.z),l=v[E.vert2],e.push(l.x),e.push(l.y),e.push(l.z));this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(e),3))},THREE.EdgesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.EdgesGeometry.prototype.constructor=THREE.EdgesGeometry,THREE.ExtrudeGeometry=function(a,h){"undefined"!=typeof a&&(THREE.Geometry.call(this),this.type="ExtrudeGeometry",a=Array.isArray(a)?a:[a],this.addShapeList(a,h),this.computeFaceNormals())},THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry,THREE.ExtrudeGeometry.prototype.addShapeList=function(a,h){for(var c=a.length,d=0;c>d;d++)this.addShape(a[d],h)},THREE.ExtrudeGeometry.prototype.addShape=function(a,h){function c(a,h,c){return h.clone().multiplyScalar(c).add(a)}function d(a,h,c){var d=1,d=a.x-h.x,e=a.y-h.y,f=c.x-a.x,E=c.y-a.y,g=d*d+e*e;if(Math.abs(d*E-e*f)>Number.EPSILON){var v=Math.sqrt(g),l=Math.sqrt(f*f+E*E),g=h.x-e/v;if(h=h.y+d/v,f=((c.x-E/l-g)*E-(c.y+f/l-h)*f)/(d*E-e*f),c=g+d*f-a.x,a=h+e*f-a.y,d=c*c+a*a,2>=d)return new THREE.Vector2(c,a);d=Math.sqrt(d/2)}else a=!1,d>Number.EPSILON?f>Number.EPSILON&&(a=!0):d<-Number.EPSILON?f<-Number.EPSILON&&(a=!0):Math.sign(e)===Math.sign(E)&&(a=!0),a?(c=-e,a=d,d=Math.sqrt(g)):(c=d,a=e,d=Math.sqrt(g/2));return new THREE.Vector2(c/d,a/d)}function e(a,h){var c,d;for(O=a.length;0<=--O;){c=O,d=O-1,0>d&&(d=a.length-1);for(var e=0,f=q+2*p,e=0;f>e;e++){var E=F*e,g=F*(e+1),v=h+c+E,E=h+d+E,l=h+d+g,g=h+c+g,v=v+w,E=E+w,l=l+w,g=g+w;S.faces.push(new THREE.Face3(v,E,g,null,null,1)),S.faces.push(new THREE.Face3(E,l,g,null,null,1)),v=s.generateSideWallUV(S,v,E,l,g),S.faceVertexUvs[0].push([v[0],v[1],v[3]]),S.faceVertexUvs[0].push([v[1],v[2],v[3]])}}}function f(a,h,c){S.vertices.push(new THREE.Vector3(a,h,c))}function E(a,h,c){a+=w,h+=w,c+=w,S.faces.push(new THREE.Face3(a,h,c,null,null,0)),a=s.generateTopUV(S,a,h,c),S.faceVertexUvs[0].push(a)}var g=void 0!==h.amount?h.amount:100,v=void 0!==h.bevelThickness?h.bevelThickness:6,l=void 0!==h.bevelSize?h.bevelSize:v-2,p=void 0!==h.bevelSegments?h.bevelSegments:3,n=void 0!==h.bevelEnabled?h.bevelEnabled:!0,m=void 0!==h.curveSegments?h.curveSegments:12,q=void 0!==h.steps?h.steps:1,u=h.extrudePath,T,t=!1,s=void 0!==h.UVGenerator?h.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,y,R,x,H;u&&(T=u.getSpacedPoints(q),t=!0,n=!1,y=void 0!==h.frames?h.frames:new THREE.TubeGeometry.FrenetFrames(u,q,!1),R=new THREE.Vector3,x=new THREE.Vector3,H=new THREE.Vector3),n||(l=v=p=0);var _,b,M,S=this,w=this.vertices.length,u=a.extractPoints(m),m=u.shape,A=u.holes;if(u=!THREE.ShapeUtils.isClockWise(m)){for(m=m.reverse(),b=0,M=A.length;M>b;b++)_=A[b],THREE.ShapeUtils.isClockWise(_)&&(A[b]=_.reverse());u=!1}var L=THREE.ShapeUtils.triangulateShape(m,A),C=m;for(b=0,M=A.length;M>b;b++)_=A[b],m=m.concat(_);var P,B,I,D,U,F=m.length,N,V=L.length,u=[],O=0;for(I=C.length,P=I-1,B=O+1;I>O;O++,P++,B++)P===I&&(P=0),B===I&&(B=0),u[O]=d(C[O],C[P],C[B]);var G=[],z,k=u.concat();for(b=0,M=A.length;M>b;b++){for(_=A[b],z=[],O=0,I=_.length,P=I-1,B=O+1;I>O;O++,P++,B++)P===I&&(P=0),B===I&&(B=0),z[O]=d(_[O],_[P],_[B]);G.push(z),k=k.concat(z)}for(P=0;p>P;P++){for(I=P/p,D=v*(1-I),B=l*Math.sin(I*Math.PI/2),O=0,I=C.length;I>O;O++)U=c(C[O],u[O],B),f(U.x,U.y,-D);for(b=0,M=A.length;M>b;b++)for(_=A[b],z=G[b],O=0,I=_.length;I>O;O++)U=c(_[O],z[O],B),f(U.x,U.y,-D)}for(B=l,O=0;F>O;O++)U=n?c(m[O],k[O],B):m[O],t?(x.copy(y.normals[0]).multiplyScalar(U.x),R.copy(y.binormals[0]).multiplyScalar(U.y),H.copy(T[0]).add(x).add(R),f(H.x,H.y,H.z)):f(U.x,U.y,0);for(I=1;q>=I;I++)for(O=0;F>O;O++)U=n?c(m[O],k[O],B):m[O],t?(x.copy(y.normals[I]).multiplyScalar(U.x),R.copy(y.binormals[I]).multiplyScalar(U.y),H.copy(T[I]).add(x).add(R),f(H.x,H.y,H.z)):f(U.x,U.y,g/q*I);for(P=p-1;P>=0;P--){for(I=P/p,D=v*(1-I),B=l*Math.sin(I*Math.PI/2),O=0,I=C.length;I>O;O++)U=c(C[O],u[O],B),f(U.x,U.y,g+D);for(b=0,M=A.length;M>b;b++)for(_=A[b],z=G[b],O=0,I=_.length;I>O;O++)U=c(_[O],z[O],B),t?f(U.x,U.y+T[q-1].y,T[q-1].x+D):f(U.x,U.y,g+D)}!function(){if(n){var a;for(a=0*F,O=0;V>O;O++)N=L[O],E(N[2]+a,N[1]+a,N[0]+a);for(a=q+2*p,a*=F,O=0;V>O;O++)N=L[O],E(N[0]+a,N[1]+a,N[2]+a)}else{for(O=0;V>O;O++)N=L[O],E(N[2],N[1],N[0]);for(O=0;V>O;O++)N=L[O],E(N[0]+F*q,N[1]+F*q,N[2]+F*q)}}(),function(){var a=0;for(e(C,a),a+=C.length,b=0,M=A.length;M>b;b++)_=A[b],e(_,a),a+=_.length}()},THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,h,c,d){return a=a.vertices,h=a[h],c=a[c],d=a[d],[new THREE.Vector2(h.x,h.y),new THREE.Vector2(c.x,c.y),new THREE.Vector2(d.x,d.y)]},generateSideWallUV:function(a,h,c,d,e){return a=a.vertices,h=a[h],c=a[c],d=a[d],e=a[e],.01>Math.abs(h.y-c.y)?[new THREE.Vector2(h.x,1-h.z),new THREE.Vector2(c.x,1-c.z),new THREE.Vector2(d.x,1-d.z),new THREE.Vector2(e.x,1-e.z)]:[new THREE.Vector2(h.y,1-h.z),new THREE.Vector2(c.y,1-c.z),new THREE.Vector2(d.y,1-d.z),new THREE.Vector2(e.y,1-e.z)]}},THREE.ShapeGeometry=function(a,h){THREE.Geometry.call(this),this.type="ShapeGeometry",!1===Array.isArray(a)&&(a=[a]),this.addShapeList(a,h),this.computeFaceNormals()},THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry,THREE.ShapeGeometry.prototype.addShapeList=function(a,h){for(var c=0,d=a.length;d>c;c++)this.addShape(a[c],h);return this},THREE.ShapeGeometry.prototype.addShape=function(a,h){void 0===h&&(h={});var c=h.material,d=void 0===h.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:h.UVGenerator,e,f,E,g=this.vertices.length;e=a.extractPoints(void 0!==h.curveSegments?h.curveSegments:12);var v=e.shape,l=e.holes;if(!THREE.ShapeUtils.isClockWise(v))for(v=v.reverse(),e=0,f=l.length;f>e;e++)E=l[e],THREE.ShapeUtils.isClockWise(E)&&(l[e]=E.reverse());var p=THREE.ShapeUtils.triangulateShape(v,l);for(e=0,f=l.length;f>e;e++)E=l[e],v=v.concat(E);for(l=v.length,f=p.length,e=0;l>e;e++)E=v[e],this.vertices.push(new THREE.Vector3(E.x,E.y,0));for(e=0;f>e;e++)l=p[e],v=l[0]+g,E=l[1]+g,l=l[2]+g,this.faces.push(new THREE.Face3(v,E,l,null,null,c)),this.faceVertexUvs[0].push(d.generateTopUV(this,v,E,l))},THREE.LatheBufferGeometry=function(a,h,c,d){THREE.BufferGeometry.call(this),this.type="LatheBufferGeometry",this.parameters={points:a,segments:h,phiStart:c,phiLength:d},h=Math.floor(h)||12,c=c||0,d=d||2*Math.PI,d=THREE.Math.clamp(d,0,2*Math.PI);for(var e=(h+1)*a.length,f=h*a.length*6,E=new THREE.BufferAttribute(new(f>65535?Uint32Array:Uint16Array)(f),1),g=new THREE.BufferAttribute(new Float32Array(3*e),3),v=new THREE.BufferAttribute(new Float32Array(2*e),2),l=0,p=0,n=1/h,m=new THREE.Vector3,q=new THREE.Vector2,e=0;h>=e;e++)for(var f=c+e*n*d,u=Math.sin(f),T=Math.cos(f),f=0;f<=a.length-1;f++)m.x=a[f].x*u,m.y=a[f].y,m.z=a[f].x*T,g.setXYZ(l,m.x,m.y,m.z),q.x=e/h,q.y=f/(a.length-1),v.setXY(l,q.x,q.y),l++;for(e=0;h>e;e++)for(f=0;f<a.length-1;f++)c=f+e*a.length,l=c+a.length,n=c+a.length+1,m=c+1,E.setX(p,c),p++,E.setX(p,l),p++,E.setX(p,m),p++,E.setX(p,l),p++,E.setX(p,n),p++,E.setX(p,m),p++;if(this.setIndex(E),this.addAttribute("position",g),this.addAttribute("uv",v),this.computeVertexNormals(),d===2*Math.PI)for(d=this.attributes.normal.array,E=new THREE.Vector3,g=new THREE.Vector3,v=new THREE.Vector3,c=h*a.length*3,f=e=0;e<a.length;e++,f+=3)E.x=d[f+0],E.y=d[f+1],E.z=d[f+2],g.x=d[c+f+0],g.y=d[c+f+1],g.z=d[c+f+2],v.addVectors(E,g).normalize(),d[f+0]=d[c+f+0]=v.x,d[f+1]=d[c+f+1]=v.y,d[f+2]=d[c+f+2]=v.z},THREE.LatheBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.LatheBufferGeometry.prototype.constructor=THREE.LatheBufferGeometry,THREE.LatheGeometry=function(a,h,c,d){THREE.Geometry.call(this),this.type="LatheGeometry",this.parameters={points:a,segments:h,phiStart:c,phiLength:d},this.fromBufferGeometry(new THREE.LatheBufferGeometry(a,h,c,d)),this.mergeVertices()},THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry,THREE.PlaneGeometry=function(a,h,c,d){THREE.Geometry.call(this),this.type="PlaneGeometry",this.parameters={width:a,height:h,widthSegments:c,heightSegments:d},this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a,h,c,d))},THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry,THREE.PlaneBufferGeometry=function(a,h,c,d){THREE.BufferGeometry.call(this),this.type="PlaneBufferGeometry",this.parameters={width:a,height:h,widthSegments:c,heightSegments:d};var e=a/2,f=h/2;c=Math.floor(c)||1,d=Math.floor(d)||1;var E=c+1,g=d+1,v=a/c,l=h/d;h=new Float32Array(E*g*3),a=new Float32Array(E*g*3);for(var p=new Float32Array(E*g*2),n=0,m=0,q=0;g>q;q++)for(var u=q*l-f,T=0;E>T;T++)h[n]=T*v-e,h[n+1]=-u,a[n+2]=1,p[m]=T/c,p[m+1]=1-q/d,n+=3,m+=2;for(n=0,e=new(65535<h.length/3?Uint32Array:Uint16Array)(c*d*6),q=0;d>q;q++)for(T=0;c>T;T++)f=T+E*(q+1),g=T+1+E*(q+1),v=T+1+E*q,e[n]=T+E*q,e[n+1]=f,e[n+2]=v,e[n+3]=f,e[n+4]=g,e[n+5]=v,n+=6;this.setIndex(new THREE.BufferAttribute(e,1)),this.addAttribute("position",new THREE.BufferAttribute(h,3)),this.addAttribute("normal",new THREE.BufferAttribute(a,3)),this.addAttribute("uv",new THREE.BufferAttribute(p,2))},THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry,THREE.RingBufferGeometry=function(a,h,c,d,e,f){THREE.BufferGeometry.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:a,outerRadius:h,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f},a=a||20,h=h||50,e=void 0!==e?e:0,f=void 0!==f?f:2*Math.PI,c=void 0!==c?Math.max(3,c):8,d=void 0!==d?Math.max(1,d):1;var E=(c+1)*(d+1),g=c*d*6,g=new THREE.BufferAttribute(new(g>65535?Uint32Array:Uint16Array)(g),1),v=new THREE.BufferAttribute(new Float32Array(3*E),3),l=new THREE.BufferAttribute(new Float32Array(3*E),3),E=new THREE.BufferAttribute(new Float32Array(2*E),2),p=0,n=0,m,q=a,u=(h-a)/d,T=new THREE.Vector3,t=new THREE.Vector2,s;for(a=0;d>=a;a++){for(s=0;c>=s;s++)m=e+s/c*f,T.x=q*Math.cos(m),T.y=q*Math.sin(m),v.setXYZ(p,T.x,T.y,T.z),l.setXYZ(p,0,0,1),t.x=(T.x/h+1)/2,t.y=(T.y/h+1)/2,E.setXY(p,t.x,t.y),p++;q+=u}for(a=0;d>a;a++)for(h=a*(c+1),s=0;c>s;s++)e=m=s+h,f=m+c+1,p=m+c+2,m+=1,g.setX(n,e),n++,g.setX(n,f),n++,g.setX(n,p),n++,g.setX(n,e),n++,g.setX(n,p),n++,g.setX(n,m),n++;this.setIndex(g),this.addAttribute("position",v),this.addAttribute("normal",l),this.addAttribute("uv",E)},THREE.RingBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.RingBufferGeometry.prototype.constructor=THREE.RingBufferGeometry,THREE.RingGeometry=function(a,h,c,d,e,f){THREE.Geometry.call(this),this.type="RingGeometry",this.parameters={innerRadius:a,outerRadius:h,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f},this.fromBufferGeometry(new THREE.RingBufferGeometry(a,h,c,d,e,f))},THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.RingGeometry.prototype.constructor=THREE.RingGeometry,THREE.SphereGeometry=function(a,h,c,d,e,f,E){THREE.Geometry.call(this),this.type="SphereGeometry",this.parameters={radius:a,widthSegments:h,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:E},this.fromBufferGeometry(new THREE.SphereBufferGeometry(a,h,c,d,e,f,E))},THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry,THREE.SphereBufferGeometry=function(a,h,c,d,e,f,E){THREE.BufferGeometry.call(this),this.type="SphereBufferGeometry",this.parameters={radius:a,widthSegments:h,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:E},a=a||50,h=Math.max(3,Math.floor(h)||8),c=Math.max(2,Math.floor(c)||6),d=void 0!==d?d:0,e=void 0!==e?e:2*Math.PI,f=void 0!==f?f:0,E=void 0!==E?E:Math.PI;for(var g=f+E,v=(h+1)*(c+1),l=new THREE.BufferAttribute(new Float32Array(3*v),3),p=new THREE.BufferAttribute(new Float32Array(3*v),3),v=new THREE.BufferAttribute(new Float32Array(2*v),2),n=0,m=[],q=new THREE.Vector3,u=0;c>=u;u++){for(var T=[],t=u/c,s=0;h>=s;s++){var y=s/h,R=-a*Math.cos(d+y*e)*Math.sin(f+t*E),x=a*Math.cos(f+t*E),H=a*Math.sin(d+y*e)*Math.sin(f+t*E);q.set(R,x,H).normalize(),l.setXYZ(n,R,x,H),p.setXYZ(n,q.x,q.y,q.z),v.setXY(n,y,1-t),T.push(n),n++}m.push(T)}for(d=[],u=0;c>u;u++)for(s=0;h>s;s++)e=m[u][s+1],E=m[u][s],n=m[u+1][s],q=m[u+1][s+1],(0!==u||f>0)&&d.push(e,E,q),(u!==c-1||g<Math.PI)&&d.push(E,n,q);this.setIndex(new(65535<l.count?THREE.Uint32Attribute:THREE.Uint16Attribute)(d,1)),this.addAttribute("position",l),this.addAttribute("normal",p),this.addAttribute("uv",v),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)},THREE.SphereBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.SphereBufferGeometry.prototype.constructor=THREE.SphereBufferGeometry,THREE.TextGeometry=function(a,h){h=h||{};var c=h.font;return!1==c instanceof THREE.Font?new THREE.Geometry:(c=c.generateShapes(a,h.size,h.curveSegments),h.amount=void 0!==h.height?h.height:50,void 0===h.bevelThickness&&(h.bevelThickness=10),void 0===h.bevelSize&&(h.bevelSize=8),void 0===h.bevelEnabled&&(h.bevelEnabled=!1),THREE.ExtrudeGeometry.call(this,c,h),void(this.type="TextGeometry"))},THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype),THREE.TextGeometry.prototype.constructor=THREE.TextGeometry,THREE.TorusBufferGeometry=function(a,h,c,d,e){THREE.BufferGeometry.call(this),this.type="TorusBufferGeometry",this.parameters={radius:a,tube:h,radialSegments:c,tubularSegments:d,arc:e},a=a||100,h=h||40,c=Math.floor(c)||8,d=Math.floor(d)||6,e=e||2*Math.PI;var f=(c+1)*(d+1),E=c*d*6,E=new(E>65535?Uint32Array:Uint16Array)(E),g=new Float32Array(3*f),v=new Float32Array(3*f),f=new Float32Array(2*f),l=0,p=0,n=0,m=new THREE.Vector3,q=new THREE.Vector3,u=new THREE.Vector3,T,t;for(T=0;c>=T;T++)for(t=0;d>=t;t++){var s=t/d*e,y=T/c*Math.PI*2;q.x=(a+h*Math.cos(y))*Math.cos(s),q.y=(a+h*Math.cos(y))*Math.sin(s),q.z=h*Math.sin(y),g[l]=q.x,g[l+1]=q.y,g[l+2]=q.z,m.x=a*Math.cos(s),m.y=a*Math.sin(s),u.subVectors(q,m).normalize(),v[l]=u.x,v[l+1]=u.y,v[l+2]=u.z,f[p]=t/d,f[p+1]=T/c,l+=3,p+=2}for(T=1;c>=T;T++)for(t=1;d>=t;t++)a=(d+1)*(T-1)+t-1,h=(d+1)*(T-1)+t,e=(d+1)*T+t,E[n]=(d+1)*T+t-1,E[n+1]=a,E[n+2]=e,E[n+3]=a,E[n+4]=h,E[n+5]=e,n+=6;this.setIndex(new THREE.BufferAttribute(E,1)),this.addAttribute("position",new THREE.BufferAttribute(g,3)),this.addAttribute("normal",new THREE.BufferAttribute(v,3)),this.addAttribute("uv",new THREE.BufferAttribute(f,2))},THREE.TorusBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.TorusBufferGeometry.prototype.constructor=THREE.TorusBufferGeometry,THREE.TorusGeometry=function(a,h,c,d,e){THREE.Geometry.call(this),this.type="TorusGeometry",this.parameters={radius:a,tube:h,radialSegments:c,tubularSegments:d,arc:e},this.fromBufferGeometry(new THREE.TorusBufferGeometry(a,h,c,d,e))},THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry,THREE.TorusKnotBufferGeometry=function(a,h,c,d,e,f){function E(a,h,c,d,e){var f=Math.cos(a),E=Math.sin(a);a*=c/h,h=Math.cos(a),e.x=d*(2+h)*.5*f,e.y=d*(2+h)*E*.5,e.z=d*Math.sin(a)*.5}THREE.BufferGeometry.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:a,tube:h,tubularSegments:c,radialSegments:d,p:e,q:f},a=a||100,h=h||40,c=Math.floor(c)||64,d=Math.floor(d)||8,e=e||2,f=f||3;var g=(d+1)*(c+1),v=d*c*6,v=new THREE.BufferAttribute(new(v>65535?Uint32Array:Uint16Array)(v),1),l=new THREE.BufferAttribute(new Float32Array(3*g),3),p=new THREE.BufferAttribute(new Float32Array(3*g),3),g=new THREE.BufferAttribute(new Float32Array(2*g),2),n,m,q=0,u=0,T=new THREE.Vector3,t=new THREE.Vector3,s=new THREE.Vector2,y=new THREE.Vector3,R=new THREE.Vector3,x=new THREE.Vector3,H=new THREE.Vector3,_=new THREE.Vector3;for(n=0;c>=n;++n)for(m=n/c*e*Math.PI*2,E(m,e,f,a,y),E(m+.01,e,f,a,R),H.subVectors(R,y),_.addVectors(R,y),x.crossVectors(H,_),_.crossVectors(x,H),x.normalize(),_.normalize(),m=0;d>=m;++m){var b=m/d*Math.PI*2,M=-h*Math.cos(b),b=h*Math.sin(b);T.x=y.x+(M*_.x+b*x.x),T.y=y.y+(M*_.y+b*x.y),T.z=y.z+(M*_.z+b*x.z),l.setXYZ(q,T.x,T.y,T.z),t.subVectors(T,y).normalize(),p.setXYZ(q,t.x,t.y,t.z),s.x=n/c,s.y=m/d,g.setXY(q,s.x,s.y),q++}for(m=1;c>=m;m++)for(n=1;d>=n;n++)a=(d+1)*m+(n-1),h=(d+1)*m+n,e=(d+1)*(m-1)+n,v.setX(u,(d+1)*(m-1)+(n-1)),u++,v.setX(u,a),u++,v.setX(u,e),u++,v.setX(u,a),u++,v.setX(u,h),u++,v.setX(u,e),u++;this.setIndex(v),this.addAttribute("position",l),this.addAttribute("normal",p),this.addAttribute("uv",g)},THREE.TorusKnotBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.TorusKnotBufferGeometry.prototype.constructor=THREE.TorusKnotBufferGeometry,THREE.TorusKnotGeometry=function(a,h,c,d,e,f,E){THREE.Geometry.call(this),this.type="TorusKnotGeometry",this.parameters={radius:a,tube:h,tubularSegments:c,radialSegments:d,p:e,q:f},this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(a,h,c,d,e,f)),this.mergeVertices()},THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry,THREE.TubeGeometry=function(a,h,c,d,e,f){THREE.Geometry.call(this),this.type="TubeGeometry",this.parameters={path:a,segments:h,radius:c,radialSegments:d,closed:e,taper:f},h=h||64,c=c||1,d=d||8,e=e||!1,f=f||THREE.TubeGeometry.NoTaper;var E=[],g,v,l=h+1,p,n,m,q,u,T=new THREE.Vector3,t,s,y;for(t=new THREE.TubeGeometry.FrenetFrames(a,h,e),s=t.normals,y=t.binormals,this.tangents=t.tangents,this.normals=s,this.binormals=y,t=0;l>t;t++)for(E[t]=[],p=t/(l-1),u=a.getPointAt(p),g=s[t],v=y[t],m=c*f(p),p=0;d>p;p++)n=p/d*2*Math.PI,q=-m*Math.cos(n),n=m*Math.sin(n),T.copy(u),T.x+=q*g.x+n*v.x,T.y+=q*g.y+n*v.y,T.z+=q*g.z+n*v.z,E[t][p]=this.vertices.push(new THREE.Vector3(T.x,T.y,T.z))-1;for(t=0;h>t;t++)for(p=0;d>p;p++)f=e?(t+1)%h:t+1,l=(p+1)%d,a=E[t][p],c=E[f][p],f=E[f][l],l=E[t][l],T=new THREE.Vector2(t/h,p/d),s=new THREE.Vector2((t+1)/h,p/d),y=new THREE.Vector2((t+1)/h,(p+1)/d),g=new THREE.Vector2(t/h,(p+1)/d),this.faces.push(new THREE.Face3(a,c,l)),this.faceVertexUvs[0].push([T,s,g]),this.faces.push(new THREE.Face3(c,f,l)),this.faceVertexUvs[0].push([s.clone(),y,g.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry,THREE.TubeGeometry.NoTaper=function(a){return 1},THREE.TubeGeometry.SinusoidalTaper=function(a){return Math.sin(Math.PI*a)},THREE.TubeGeometry.FrenetFrames=function(a,h,c){var d=new THREE.Vector3,e=[],f=[],E=[],g=new THREE.Vector3,v=new THREE.Matrix4;h+=1;var l,p,n;for(this.tangents=e,this.normals=f,this.binormals=E,l=0;h>l;l++)p=l/(h-1),e[l]=a.getTangentAt(p),e[l].normalize();for(f[0]=new THREE.Vector3,E[0]=new THREE.Vector3,a=Number.MAX_VALUE,l=Math.abs(e[0].x),p=Math.abs(e[0].y),n=Math.abs(e[0].z),a>=l&&(a=l,d.set(1,0,0)),a>=p&&(a=p,d.set(0,1,0)),a>=n&&d.set(0,0,1),g.crossVectors(e[0],d).normalize(),f[0].crossVectors(e[0],g),E[0].crossVectors(e[0],f[0]),l=1;h>l;l++)f[l]=f[l-1].clone(),E[l]=E[l-1].clone(),g.crossVectors(e[l-1],e[l]),g.length()>Number.EPSILON&&(g.normalize(),d=Math.acos(THREE.Math.clamp(e[l-1].dot(e[l]),-1,1)),f[l].applyMatrix4(v.makeRotationAxis(g,d))),E[l].crossVectors(e[l],f[l]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[h-1]),-1,1)),d/=h-1,0<e[0].dot(g.crossVectors(f[0],f[h-1]))&&(d=-d),l=1;h>l;l++)f[l].applyMatrix4(v.makeRotationAxis(e[l],d*l)),E[l].crossVectors(e[l],f[l])},THREE.PolyhedronGeometry=function(a,h,c,d){function e(a){var h=a.normalize().clone();h.index=v.vertices.push(h)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+.5;return a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5,h.uv=new THREE.Vector2(c,1-a),h}function f(a,h,c,d){d=new THREE.Face3(a.index,h.index,c.index,[a.clone(),h.clone(),c.clone()],void 0,d),v.faces.push(d),t.copy(a).add(h).add(c).divideScalar(3),d=Math.atan2(t.z,-t.x),v.faceVertexUvs[0].push([g(a.uv,a,d),g(h.uv,h,d),g(c.uv,c,d)])}function E(a,h){for(var c=Math.pow(2,h),d=e(v.vertices[a.a]),E=e(v.vertices[a.b]),g=e(v.vertices[a.c]),l=[],m=a.materialIndex,n=0;c>=n;n++){l[n]=[];for(var p=e(d.clone().lerp(g,n/c)),q=e(E.clone().lerp(g,n/c)),t=c-n,u=0;t>=u;u++)l[n][u]=0===u&&n===c?p:e(p.clone().lerp(q,u/t))}for(n=0;c>n;n++)for(u=0;2*(c-n)-1>u;u++)d=Math.floor(u/2),0===u%2?f(l[n][d+1],l[n+1][d],l[n][d],m):f(l[n][d+1],l[n+1][d+1],l[n+1][d],m)}function g(a,h,c){return 0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y)),0===h.x&&0===h.z&&(a=new THREE.Vector2(c/2/Math.PI+.5,a.y)),a.clone()}THREE.Geometry.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:a,indices:h,radius:c,detail:d},c=c||1,d=d||0;for(var v=this,l=0,p=a.length;p>l;l+=3)e(new THREE.Vector3(a[l],a[l+1],a[l+2]));a=this.vertices;for(var n=[],m=l=0,p=h.length;p>l;l+=3,m++){var q=a[h[l]],u=a[h[l+1]],T=a[h[l+2]];
n[m]=new THREE.Face3(q.index,u.index,T.index,[q.clone(),u.clone(),T.clone()],void 0,m)}for(var t=new THREE.Vector3,l=0,p=n.length;p>l;l++)E(n[l],d);for(l=0,p=this.faceVertexUvs[0].length;p>l;l++)h=this.faceVertexUvs[0][l],d=h[0].x,a=h[1].x,n=h[2].x,m=Math.max(d,a,n),q=Math.min(d,a,n),m>.9&&.1>q&&(.2>d&&(h[0].x+=1),.2>a&&(h[1].x+=1),.2>n&&(h[2].x+=1));for(l=0,p=this.vertices.length;p>l;l++)this.vertices[l].multiplyScalar(c);this.mergeVertices(),this.computeFaceNormals(),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)},THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry,THREE.DodecahedronGeometry=function(a,h){var c=(1+Math.sqrt(5))/2,d=1/c;THREE.PolyhedronGeometry.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],a,h),this.type="DodecahedronGeometry",this.parameters={radius:a,detail:h}},THREE.DodecahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry,THREE.IcosahedronGeometry=function(a,h){var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,h),this.type="IcosahedronGeometry",this.parameters={radius:a,detail:h}},THREE.IcosahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry,THREE.OctahedronGeometry=function(a,h){THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,h),this.type="OctahedronGeometry",this.parameters={radius:a,detail:h}},THREE.OctahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry,THREE.TetrahedronGeometry=function(a,h){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,h),this.type="TetrahedronGeometry",this.parameters={radius:a,detail:h}},THREE.TetrahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry,THREE.ParametricGeometry=function(a,h,c){THREE.Geometry.call(this),this.type="ParametricGeometry",this.parameters={func:a,slices:h,stacks:c};var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],E,g,v,l,p=h+1;for(E=0;c>=E;E++)for(l=E/c,g=0;h>=g;g++)v=g/h,v=a(v,l),d.push(v);var n,m,q,u;for(E=0;c>E;E++)for(g=0;h>g;g++)a=E*p+g,d=E*p+g+1,l=(E+1)*p+g+1,v=(E+1)*p+g,n=new THREE.Vector2(g/h,E/c),m=new THREE.Vector2((g+1)/h,E/c),q=new THREE.Vector2((g+1)/h,(E+1)/c),u=new THREE.Vector2(g/h,(E+1)/c),e.push(new THREE.Face3(a,d,v)),f.push([n,m,u]),e.push(new THREE.Face3(d,l,v)),f.push([m.clone(),q,u.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry,THREE.WireframeGeometry=function(a){function h(a,h){return a-h}THREE.BufferGeometry.call(this);var c=[0,0],d={},e=["a","b","c"];if(a instanceof THREE.Geometry){var f=a.vertices,E=a.faces,g=0,v=new Uint32Array(6*E.length);a=0;for(var l=E.length;l>a;a++)for(var p=E[a],n=0;3>n;n++){c[0]=p[e[n]],c[1]=p[e[(n+1)%3]],c.sort(h);var m=c.toString();void 0===d[m]&&(v[2*g]=c[0],v[2*g+1]=c[1],d[m]=!0,g++)}for(c=new Float32Array(6*g),a=0,l=g;l>a;a++)for(n=0;2>n;n++)d=f[v[2*a+n]],g=6*a+3*n,c[g+0]=d.x,c[g+1]=d.y,c[g+2]=d.z;this.addAttribute("position",new THREE.BufferAttribute(c,3))}else if(a instanceof THREE.BufferGeometry){if(null!==a.index){for(l=a.index.array,f=a.attributes.position,e=a.groups,g=0,0===e.length&&a.addGroup(0,l.length),v=new Uint32Array(2*l.length),E=0,p=e.length;p>E;++E){a=e[E],n=a.start,m=a.count,a=n;for(var q=n+m;q>a;a+=3)for(n=0;3>n;n++)c[0]=l[a+n],c[1]=l[a+(n+1)%3],c.sort(h),m=c.toString(),void 0===d[m]&&(v[2*g]=c[0],v[2*g+1]=c[1],d[m]=!0,g++)}for(c=new Float32Array(6*g),a=0,l=g;l>a;a++)for(n=0;2>n;n++)g=6*a+3*n,d=v[2*a+n],c[g+0]=f.getX(d),c[g+1]=f.getY(d),c[g+2]=f.getZ(d)}else for(f=a.attributes.position.array,g=f.length/3,v=g/3,c=new Float32Array(6*g),a=0,l=v;l>a;a++)for(n=0;3>n;n++)g=18*a+6*n,v=9*a+3*n,c[g+0]=f[v],c[g+1]=f[v+1],c[g+2]=f[v+2],d=9*a+(n+1)%3*3,c[g+3]=f[d],c[g+4]=f[d+1],c[g+5]=f[d+2];this.addAttribute("position",new THREE.BufferAttribute(c,3))}},THREE.WireframeGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.WireframeGeometry.prototype.constructor=THREE.WireframeGeometry,THREE.AxisHelper=function(a){a=a||1;var h=new Float32Array([0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a]),c=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]);a=new THREE.BufferGeometry,a.addAttribute("position",new THREE.BufferAttribute(h,3)),a.addAttribute("color",new THREE.BufferAttribute(c,3)),h=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors}),THREE.LineSegments.call(this,a,h)},THREE.AxisHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.AxisHelper.prototype.constructor=THREE.AxisHelper,THREE.ArrowHelper=function(){var a=new THREE.Geometry;a.vertices.push(new THREE.Vector3(0,0,0),new THREE.Vector3(0,1,0));var h=new THREE.CylinderGeometry(0,.5,1,5,1);return h.translate(0,-.5,0),function(c,d,e,f,E,g){THREE.Object3D.call(this),void 0===f&&(f=16776960),void 0===e&&(e=1),void 0===E&&(E=.2*e),void 0===g&&(g=.2*E),this.position.copy(d),this.line=new THREE.Line(a,new THREE.LineBasicMaterial({color:f})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new THREE.Mesh(h,new THREE.MeshBasicMaterial({color:f})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(c),this.setLength(e,E,g)}}(),THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper,THREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,h;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),h=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,h))}}(),THREE.ArrowHelper.prototype.setLength=function(a,h,c){void 0===h&&(h=.2*a),void 0===c&&(c=.2*h),this.line.scale.set(1,Math.max(0,a-h),1),this.line.updateMatrix(),this.cone.scale.set(c,h,c),this.cone.position.y=a,this.cone.updateMatrix()},THREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.set(a),this.cone.material.color.set(a)},THREE.BoxHelper=function(a){var h=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),c=new Float32Array(24),d=new THREE.BufferGeometry;d.setIndex(new THREE.BufferAttribute(h,1)),d.addAttribute("position",new THREE.BufferAttribute(c,3)),THREE.LineSegments.call(this,d,new THREE.LineBasicMaterial({color:16776960})),void 0!==a&&this.update(a)},THREE.BoxHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.BoxHelper.prototype.constructor=THREE.BoxHelper,THREE.BoxHelper.prototype.update=function(){var a=new THREE.Box3;return function(h){if(a.setFromObject(h),!a.isEmpty()){h=a.min;var c=a.max,d=this.geometry.attributes.position,e=d.array;e[0]=c.x,e[1]=c.y,e[2]=c.z,e[3]=h.x,e[4]=c.y,e[5]=c.z,e[6]=h.x,e[7]=h.y,e[8]=c.z,e[9]=c.x,e[10]=h.y,e[11]=c.z,e[12]=c.x,e[13]=c.y,e[14]=h.z,e[15]=h.x,e[16]=c.y,e[17]=h.z,e[18]=h.x,e[19]=h.y,e[20]=h.z,e[21]=c.x,e[22]=h.y,e[23]=h.z,d.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),THREE.BoundingBoxHelper=function(a,h){var c=void 0!==h?h:8947848;this.object=a,this.box=new THREE.Box3,THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))},THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper,THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object),this.box.size(this.scale),this.box.center(this.position)},THREE.CameraHelper=function(a){function h(a,h,d){c(a,d),c(h,d)}function c(a,h){d.vertices.push(new THREE.Vector3),d.colors.push(new THREE.Color(h)),void 0===f[a]&&(f[a]=[]),f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};h("n1","n2",16755200),h("n2","n4",16755200),h("n4","n3",16755200),h("n3","n1",16755200),h("f1","f2",16755200),h("f2","f4",16755200),h("f4","f3",16755200),h("f3","f1",16755200),h("n1","f1",16755200),h("n2","f2",16755200),h("n3","f3",16755200),h("n4","f4",16755200),h("p","n1",16711680),h("p","n2",16711680),h("p","n3",16711680),h("p","n4",16711680),h("u1","u2",43775),h("u2","u3",43775),h("u3","u1",43775),h("c","t",16777215),h("p","c",3355443),h("cn1","cn2",3355443),h("cn3","cn4",3355443),h("cf1","cf2",3355443),h("cf3","cf4",3355443),THREE.LineSegments.call(this,d,e),this.camera=a,this.camera.updateProjectionMatrix(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=f,this.update()},THREE.CameraHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.CameraHelper.prototype.constructor=THREE.CameraHelper,THREE.CameraHelper.prototype.update=function(){function a(a,E,g,v){if(d.set(E,g,v).unproject(e),a=c[a],void 0!==a)for(E=0,g=a.length;g>E;E++)h.vertices[a[E]].copy(d)}var h,c,d=new THREE.Vector3,e=new THREE.Camera;return function(){h=this.geometry,c=this.pointMap,e.projectionMatrix.copy(this.camera.projectionMatrix),a("c",0,0,-1),a("t",0,0,1),a("n1",-1,-1,-1),a("n2",1,-1,-1),a("n3",-1,1,-1),a("n4",1,1,-1),a("f1",-1,-1,1),a("f2",1,-1,1),a("f3",-1,1,1),a("f4",1,1,1),a("u1",.7,1.1,-1),a("u2",-.7,1.1,-1),a("u3",0,2,-1),a("cf1",-1,0,1),a("cf2",1,0,1),a("cf3",0,-1,1),a("cf4",0,1,1),a("cn1",-1,0,-1),a("cn2",1,0,-1),a("cn3",0,-1,-1),a("cn4",0,1,-1),h.verticesNeedUpdate=!0}}(),THREE.DirectionalLightHelper=function(a,h){THREE.Object3D.call(this),this.light=a,this.light.updateMatrixWorld(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,h=h||1;var c=new THREE.Geometry;c.vertices.push(new THREE.Vector3(-h,h,0),new THREE.Vector3(h,h,0),new THREE.Vector3(h,-h,0),new THREE.Vector3(-h,-h,0),new THREE.Vector3(-h,h,0));var d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity),this.lightPlane=new THREE.Line(c,d),this.add(this.lightPlane),c=new THREE.Geometry,c.vertices.push(new THREE.Vector3,new THREE.Vector3),d=new THREE.LineBasicMaterial({fog:!1}),d.color.copy(this.light.color).multiplyScalar(this.light.intensity),this.targetLine=new THREE.Line(c,d),this.add(this.targetLine),this.update()},THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper,THREE.DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},THREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Vector3;return function(){a.setFromMatrixPosition(this.light.matrixWorld),h.setFromMatrixPosition(this.light.target.matrixWorld),c.subVectors(h,a),this.lightPlane.lookAt(c),this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity),this.targetLine.geometry.vertices[1].copy(c),this.targetLine.geometry.verticesNeedUpdate=!0,this.targetLine.material.color.copy(this.lightPlane.material.color)}}(),THREE.EdgesHelper=function(a,h,c){h=void 0!==h?h:16777215,THREE.LineSegments.call(this,new THREE.EdgesGeometry(a.geometry,c),new THREE.LineBasicMaterial({color:h})),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1},THREE.EdgesHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper,THREE.FaceNormalsHelper=function(a,h,c,d){this.object=a,this.size=void 0!==h?h:1,a=void 0!==c?c:16776960,d=void 0!==d?d:1,h=0,c=this.object.geometry,c instanceof THREE.Geometry?h=c.faces.length:void 0,c=new THREE.BufferGeometry,h=new THREE.Float32Attribute(6*h,3),c.addAttribute("position",h),THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:a,linewidth:d})),this.matrixAutoUpdate=!1,this.update()},THREE.FaceNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper,THREE.FaceNormalsHelper.prototype.update=function(){var a=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Matrix3;return function(){this.object.updateMatrixWorld(!0),c.getNormalMatrix(this.object.matrixWorld);for(var d=this.object.matrixWorld,e=this.geometry.attributes.position,f=this.object.geometry,E=f.vertices,f=f.faces,g=0,v=0,l=f.length;l>v;v++){var p=f[v],n=p.normal;a.copy(E[p.a]).add(E[p.b]).add(E[p.c]).divideScalar(3).applyMatrix4(d),h.copy(n).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a),e.setXYZ(g,a.x,a.y,a.z),g+=1,e.setXYZ(g,h.x,h.y,h.z),g+=1}return e.needsUpdate=!0,this}}(),THREE.GridHelper=function(a,h){var c=new THREE.Geometry,d=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.color1=new THREE.Color(4473924),this.color2=new THREE.Color(8947848);for(var e=-a;a>=e;e+=h){c.vertices.push(new THREE.Vector3(-a,0,e),new THREE.Vector3(a,0,e),new THREE.Vector3(e,0,-a),new THREE.Vector3(e,0,a));var f=0===e?this.color1:this.color2;c.colors.push(f,f,f,f)}THREE.LineSegments.call(this,c,d)},THREE.GridHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.GridHelper.prototype.constructor=THREE.GridHelper,THREE.GridHelper.prototype.setColors=function(a,h){this.color1.set(a),this.color2.set(h),this.geometry.colorsNeedUpdate=!0},THREE.HemisphereLightHelper=function(a,h){THREE.Object3D.call(this),this.light=a,this.light.updateMatrixWorld(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,this.colors=[new THREE.Color,new THREE.Color];var c=new THREE.SphereGeometry(h,4,2);c.rotateX(-Math.PI/2);for(var d=0;8>d;d++)c.faces[d].color=this.colors[4>d?0:1];d=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0}),this.lightSphere=new THREE.Mesh(c,d),this.add(this.lightSphere),this.update()},THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper,THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose(),this.lightSphere.material.dispose()},THREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity),this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity),this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate()),this.lightSphere.geometry.colorsNeedUpdate=!0}}(),THREE.PointLightHelper=function(a,h){this.light=a,this.light.updateMatrixWorld();var c=new THREE.SphereGeometry(h,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity),THREE.Mesh.call(this,c,d),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1},THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper,THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)},THREE.SkeletonHelper=function(a){this.bones=this.getBoneList(a);for(var h=new THREE.Geometry,c=0;c<this.bones.length;c++)this.bones[c].parent instanceof THREE.Bone&&(h.vertices.push(new THREE.Vector3),h.vertices.push(new THREE.Vector3),h.colors.push(new THREE.Color(0,0,1)),h.colors.push(new THREE.Color(0,1,0)));h.dynamic=!0,c=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0}),THREE.LineSegments.call(this,h,c),this.root=a,this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,this.update()},THREE.SkeletonHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper,THREE.SkeletonHelper.prototype.getBoneList=function(a){var h=[];a instanceof THREE.Bone&&h.push(a);for(var c=0;c<a.children.length;c++)h.push.apply(h,this.getBoneList(a.children[c]));return h},THREE.SkeletonHelper.prototype.update=function(){for(var a=this.geometry,h=(new THREE.Matrix4).getInverse(this.root.matrixWorld),c=new THREE.Matrix4,d=0,e=0;e<this.bones.length;e++){var f=this.bones[e];f.parent instanceof THREE.Bone&&(c.multiplyMatrices(h,f.matrixWorld),a.vertices[d].setFromMatrixPosition(c),c.multiplyMatrices(h,f.parent.matrixWorld),a.vertices[d+1].setFromMatrixPosition(c),d+=2)}a.verticesNeedUpdate=!0,a.computeBoundingSphere()},THREE.SpotLightHelper=function(a){THREE.Object3D.call(this),this.light=a,this.light.updateMatrixWorld(),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1,a=new THREE.CylinderGeometry(0,1,1,8,1,!0),a.translate(0,-.5,0),a.rotateX(-Math.PI/2);var h=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(a,h),this.add(this.cone),this.update()},THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper,THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},THREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,h=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1e4,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c),a.setFromMatrixPosition(this.light.matrixWorld),h.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(h.sub(a)),this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}(),THREE.VertexNormalsHelper=function(a,h,c,d){this.object=a,this.size=void 0!==h?h:1,a=void 0!==c?c:16711680,d=void 0!==d?d:1,h=0,c=this.object.geometry,c instanceof THREE.Geometry?h=3*c.faces.length:c instanceof THREE.BufferGeometry&&(h=c.attributes.normal.count),c=new THREE.BufferGeometry,h=new THREE.Float32Attribute(6*h,3),c.addAttribute("position",h),THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:a,linewidth:d})),this.matrixAutoUpdate=!1,this.update()},THREE.VertexNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper,THREE.VertexNormalsHelper.prototype.update=function(){var a=new THREE.Vector3,h=new THREE.Vector3,c=new THREE.Matrix3;return function(){var d=["a","b","c"];this.object.updateMatrixWorld(!0),c.getNormalMatrix(this.object.matrixWorld);var e=this.object.matrixWorld,f=this.geometry.attributes.position,E=this.object.geometry;if(E instanceof THREE.Geometry)for(var g=E.vertices,v=E.faces,l=E=0,p=v.length;p>l;l++)for(var n=v[l],m=0,q=n.vertexNormals.length;q>m;m++){var u=n.vertexNormals[m];a.copy(g[n[d[m]]]).applyMatrix4(e),h.copy(u).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a),f.setXYZ(E,a.x,a.y,a.z),E+=1,f.setXYZ(E,h.x,h.y,h.z),E+=1}else if(E instanceof THREE.BufferGeometry)for(d=E.attributes.position,g=E.attributes.normal,m=E=0,q=d.count;q>m;m++)a.set(d.getX(m),d.getY(m),d.getZ(m)).applyMatrix4(e),h.set(g.getX(m),g.getY(m),g.getZ(m)),h.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a),f.setXYZ(E,a.x,a.y,a.z),E+=1,f.setXYZ(E,h.x,h.y,h.z),E+=1;return f.needsUpdate=!0,this}}(),THREE.WireframeHelper=function(a,h){var c=void 0!==h?h:16777215;THREE.LineSegments.call(this,new THREE.WireframeGeometry(a.geometry),new THREE.LineBasicMaterial({color:c})),this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1},THREE.WireframeHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper,THREE.ImmediateRenderObject=function(a){THREE.Object3D.call(this),this.material=a,this.render=function(a){}},THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype),THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject,THREE.MorphBlendMesh=function(a,h){THREE.Mesh.call(this,a,h),this.animationsMap={},this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation("__default",0,c-1,c/1),this.setAnimationWeight("__default",1)},THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype),THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh,THREE.MorphBlendMesh.prototype.createAnimation=function(a,h,c,d){h={start:h,end:c,length:c-h+1,fps:d,duration:(c-h)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1},this.animationsMap[a]=h,this.animationsList.push(h)},THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var h=/([a-z]+)_?(\d+)/i,c,d={},e=this.geometry,f=0,E=e.morphTargets.length;E>f;f++){var g=e.morphTargets[f].name.match(h);if(g&&1<g.length){var v=g[1];d[v]||(d[v]={start:1/0,end:-1/0}),g=d[v],f<g.start&&(g.start=f),f>g.end&&(g.end=f),c||(c=v)}}for(v in d)g=d[v],this.createAnimation(v,g.start,g.end,a);this.firstAnimation=c},THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){(a=this.animationsMap[a])&&(a.direction=1,a.directionBackwards=!1)},THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){(a=this.animationsMap[a])&&(a.direction=-1,a.directionBackwards=!0)},THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,h){var c=this.animationsMap[a];c&&(c.fps=h,c.duration=(c.end-c.start)/c.fps)},THREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,h){var c=this.animationsMap[a];c&&(c.duration=h,c.fps=(c.end-c.start)/c.duration)},THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,h){var c=this.animationsMap[a];c&&(c.weight=h)},THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,h){var c=this.animationsMap[a];c&&(c.time=h)},THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var h=0;return(a=this.animationsMap[a])&&(h=a.time),h},THREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var h=-1;return(a=this.animationsMap[a])&&(h=a.duration),h},THREE.MorphBlendMesh.prototype.playAnimation=function(a){var h=this.animationsMap[a];h?(h.time=0,h.active=!0):void 0},THREE.MorphBlendMesh.prototype.stopAnimation=function(a){(a=this.animationsMap[a])&&(a.active=!1)},THREE.MorphBlendMesh.prototype.update=function(a){for(var h=0,c=this.animationsList.length;c>h;h++){var d=this.animationsList[h];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a,d.mirroredLoop?(d.time>d.duration||0>d.time)&&(d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)):(d.time%=d.duration,0>d.time&&(d.time+=d.duration));var f=d.start+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),E=d.weight;f!==d.currentFrame&&(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*E,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f),e=d.time%e/e,d.directionBackwards&&(e=1-e),d.currentFrame!==d.lastFrame?(this.morphTargetInfluences[d.currentFrame]=e*E,this.morphTargetInfluences[d.lastFrame]=(1-e)*E):this.morphTargetInfluences[d.currentFrame]=E}}};